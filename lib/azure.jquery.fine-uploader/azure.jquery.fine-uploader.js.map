{"version":3,"sources":["?","../client/js/jquery-plugin.js","../client/js/jquery-dnd.js","../client/js/azure/jquery-plugin.js","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/azure/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/azure/uploader.basic.js","../client/js/azure/azure.xhr.upload.handler.js","../client/js/azure/get-sas.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/azure/rest/delete-blob.js","../client/js/azure/rest/put-blob.js","../client/js/azure/rest/put-block.js","../client/js/azure/rest/put-block-list.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/azure/uploader.js"],"names":["global","$","$el","pluginOptions","init","options","xformedOpts","transformVariables","newUploaderInstance","getNewUploaderInstance","uploader","addCallbacks","params","uploaderType","pluginOption","namespace","charAt","toUpperCase","slice","toLowerCase","qq","FineUploader","dataStore","key","val","data","undefined","instanceToStore","option","optionVal","transformedOpts","callbacks","each","_options","prop","nonJqueryCallback","name","callbackEventTarget","exec","substring","originalArgs","Array","prototype","call","arguments","transformedArgs","nonJqueryCallbackRetVal","jqueryEventCallbackRetVal","idx","arg","push","maybeWrapInJquery","apply","this","triggerHandler","error","log","message","source","dest","xformed","arrayVals","element","inArray","isPlainObject","isArray","arrayVal","arrayObjDest","merge","isValidCommand","command","type","match","delegateCommand","xformedArgs","origArgs","retVal","transformedVal","nodeType","cloneNode","fn","fineUploader","optionsOrCommand","self","selfArgs","retVals","index","el","length","jQuery","rootDataKey","dropZoneElements","dnd","DragAndDrop","func","$callbackEl","args","jqueryHandlerResult","fineUploaderDnd","fineUploaderAzure","endpointType","hide","style","display","attach","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","getFirstByClass","children","child","firstChild","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","getAttribute","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","Uint8Array","character","charCodeAt","level","console","isObject","variable","Object","toString","isFunction","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","newStr","nextIdxToReplace","strBefore","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","override","target","sourceFn","super_","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","Storage","getItem","bind","oldFunc","context","newArgs","concat","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","disposeSupport","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","paramsInBody","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partIndex","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","alreadyInWaiting","alreadyInOpen","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","azure","util","AZURE_PARAM_PREFIX","_paramNameMatchesAzureParameter","_getPrefixedParamName","getParamsAsHeaders","headerName","parseAzureError","domParser","DOMParser","responseDoc","parseFromString","errorTag","errorDetails","codeTag","messageTag","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","signature","blobProperties","minFileSize","_cannedBlobNames","getBlobName","onGetBlobName","_determineBlobName","deleteBlob","_deleteBlob","blobNameOptionValue","fileExtension","blobNameToUse","blobName","relatedToCancel","deleteBlobSasUri","blobUriStore","deleteFileEndpointStore","getSasSuccess","sasUri","getSasFailure","DeleteBlob","getSas","GetSas","restRequestVerb","minFileSizeForChunking","getBlobMetadata","putBlob","PutBlob","putBlock","PutBlock","putBlockList","PutBlockList","getSasForPutBlobOrBlock","combineChunks","getSignedUrl","mimeType","blockIdEntries","determineBlobUrl","containerUrl","getBlobNameSuccess","getBlobNameFailure","getSasId","getSasXhr","determineBlobUrlSuccess","blobUrl","determineBlobUrlFailure","azureError","blockIdEntry","chunkingData","maybePossible","requestPromises","sasResponseReceived","blobUri","requestPromise","restVerb","bloburi","pendingRequests","handleSuccessResponse","responseJson","successIndicator","failureIndicator","parsedResponse","codes","endpoints","promises","endpointHandler","Content-Type","createBlockId","partNum","digits","zeros","paddedPartNum","btoa","blockId","createRequestBody","doc","implementation","createDocument","latestEl","latestTextEl","createTextNode","XMLSerializer","serializeToString","fileMimeType","registerXhrCallback","blockIdsXml","x-ms-blob-content-type","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","content","createDocumentFragment","map","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","update","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"azure.jquery.fine-uploader.js","sourcesContent":[null,"/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var $el,\n        pluginOptions = [\"uploaderType\", \"endpointType\"];\n\n    function init(options) {\n        var xformedOpts = transformVariables(options || {}),\n            newUploaderInstance = getNewUploaderInstance(xformedOpts);\n\n        uploader(newUploaderInstance);\n        addCallbacks(xformedOpts, newUploaderInstance);\n\n        return $el;\n    }\n\n    function getNewUploaderInstance(params) {\n        var uploaderType = pluginOption(\"uploaderType\"),\n            namespace = pluginOption(\"endpointType\");\n\n        // If the integrator has defined a specific type of uploader to load, use that, otherwise assume `qq.FineUploader`\n        if (uploaderType) {\n            // We can determine the correct constructor function to invoke by combining \"FineUploader\"\n            // with the upper camel cased `uploaderType` value.\n            uploaderType = uploaderType.charAt(0).toUpperCase() + uploaderType.slice(1).toLowerCase();\n\n            if (namespace) {\n                return new qq[namespace][\"FineUploader\" + uploaderType](params);\n            }\n\n            return new qq[\"FineUploader\" + uploaderType](params);\n        }\n        else {\n            if (namespace) {\n                return new qq[namespace].FineUploader(params);\n            }\n\n            return new qq.FineUploader(params);\n        }\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(\"fineuploader\");\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(\"fineuploader\", data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    //the underlying Fine Uploader instance is stored in jQuery's data stored, associated with the element\n    // tied to this instance of the plug-in\n    function uploader(instanceToStore) {\n        return dataStore(\"uploader\", instanceToStore);\n    }\n\n    function pluginOption(option, optionVal) {\n        return dataStore(option, optionVal);\n    }\n\n    // Implement all callbacks defined in Fine Uploader as functions that trigger appropriately names events and\n    // return the result of executing the bound handler back to Fine Uploader\n    function addCallbacks(transformedOpts, newUploaderInstance) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(newUploaderInstance._options.callbacks, function(prop, nonJqueryCallback) {\n            var name, callbackEventTarget;\n\n            name = /^on(\\w+)/.exec(prop)[1];\n            name = name.substring(0, 1).toLowerCase() + name.substring(1);\n            callbackEventTarget = $el;\n\n            callbacks[prop] = function() {\n                var originalArgs = Array.prototype.slice.call(arguments),\n                    transformedArgs = [],\n                    nonJqueryCallbackRetVal, jqueryEventCallbackRetVal;\n\n                $.each(originalArgs, function(idx, arg) {\n                    transformedArgs.push(maybeWrapInJquery(arg));\n                });\n\n                nonJqueryCallbackRetVal = nonJqueryCallback.apply(this, originalArgs);\n\n                try {\n                    jqueryEventCallbackRetVal = callbackEventTarget.triggerHandler(name, transformedArgs);\n                }\n                catch (error) {\n                    qq.log(\"Caught error in Fine Uploader jQuery event handler: \" + error.message, \"error\");\n                }\n\n                /*jshint -W116*/\n                if (nonJqueryCallbackRetVal != null) {\n                    return nonJqueryCallbackRetVal;\n                }\n                return jqueryEventCallbackRetVal;\n            };\n        });\n\n        newUploaderInstance._options.callbacks = callbacks;\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            if (source.uploaderType !== \"basic\") {\n                xformed = { element: $el[0] };\n            }\n            else {\n                xformed = {};\n            }\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if ($.inArray(prop, pluginOptions) >= 0) {\n                pluginOption(prop, val);\n            }\n            else if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    var arrayObjDest = {};\n\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else if ($.isPlainObject(arrayVal)) {\n                        transformVariables(arrayVal, arrayObjDest);\n                        arrayVals.push(arrayObjDest);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            !command.match(/^_/) && //enforce private methods convention\n            uploader()[command] !== undefined;\n    }\n\n    // Assuming we have already verified that this is a valid command, call the associated function in the underlying\n    // Fine Uploader instance (passing along the arguments from the caller) and return the result of the call back to the caller\n    function delegateCommand(command) {\n        var xformedArgs = [],\n            origArgs = Array.prototype.slice.call(arguments, 1),\n            retVal;\n\n        transformVariables(origArgs, xformedArgs);\n\n        retVal = uploader()[command].apply(uploader(), xformedArgs);\n\n        return maybeWrapInJquery(retVal);\n    }\n\n    // If the value is an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n    function maybeWrapInJquery(val) {\n        var transformedVal = val;\n\n        // If the command is returning an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n        /*jshint -W116*/\n        if (val != null && typeof val === \"object\" &&\n           (val.nodeType === 1 || val.nodeType === 9) && val.cloneNode) {\n\n            transformedVal = $(val);\n        }\n\n        return transformedVal;\n    }\n\n    $.fn.fineUploader = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (uploader() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist on jQuery.fineUploader\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var rootDataKey = \"fineUploaderDnd\",\n        $el;\n\n    function init(options) {\n        if (!options) {\n            options = {};\n        }\n\n        options.dropZoneElements = [$el];\n        var xformedOpts = transformVariables(options);\n        addCallbacks(xformedOpts);\n        dnd(new qq.DragAndDrop(xformedOpts));\n\n        return $el;\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(rootDataKey);\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(rootDataKey, data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    function dnd(instanceToStore) {\n        return dataStore(\"dndInstance\", instanceToStore);\n    }\n\n    function addCallbacks(transformedOpts) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(new qq.DragAndDrop.callbacks(), function(prop, func) {\n            var name = prop,\n                $callbackEl;\n\n            $callbackEl = $el;\n\n            callbacks[prop] = function() {\n                var args = Array.prototype.slice.call(arguments),\n                    jqueryHandlerResult = $callbackEl.triggerHandler(name, args);\n\n                return jqueryHandlerResult;\n            };\n        });\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            xformed = {};\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            command === \"dispose\" &&\n            dnd()[command] !== undefined;\n    }\n\n    function delegateCommand(command) {\n        var xformedArgs = [], origArgs = Array.prototype.slice.call(arguments, 1);\n        transformVariables(origArgs, xformedArgs);\n        return dnd()[command].apply(dnd(), xformedArgs);\n    }\n\n    $.fn.fineUploaderDnd = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (dnd() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist in Fine Uploader's DnD module.\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals jQuery*/\n/**\n * Simply an alias for the `fineUploader` plug-in wrapper, but hides the required `endpointType` option from the\n * integrator.  I thought it may be confusing to convey to the integrator that, when using Fine Uploader in Azure mode,\n * you need to specify an `endpointType` with a value of \"azure\", and perhaps an `uploaderType` with a value of \"basic\" if\n * you want to use basic mode when uploading directly to Azure as well.  So, you can use this plug-in alias and not worry\n * about the `endpointType` option at all.\n */\n(function($) {\n    \"use strict\";\n\n    $.fn.fineUploaderAzure = function(optionsOrCommand) {\n        if (typeof optionsOrCommand === \"object\") {\n\n            // This option is used to tell the plug-in wrapper to instantiate the appropriate Azure-namespace modules.\n            optionsOrCommand.endpointType = \"azure\";\n        }\n\n        return $.fn.fineUploader.apply(this, arguments);\n    };\n\n}(jQuery));\n","/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\r\nqq.version = \"5.14.0-beta3\";\r\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\r\n/**\r\n * Defines the public API for FineUploaderBasic mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.basePublicApi = {\r\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\r\n        addBlobs: function(blobDataOrArray, params, endpoint) {\r\n            this.addFiles(blobDataOrArray, params, endpoint);\r\n        },\r\n\r\n        addInitialFiles: function(cannedFileList) {\r\n            var self = this;\r\n\r\n            qq.each(cannedFileList, function(index, cannedFile) {\r\n                self._addCannedFile(cannedFile);\r\n            });\r\n        },\r\n\r\n        addFiles: function(data, params, endpoint) {\r\n            this._maybeHandleIos8SafariWorkaround();\r\n\r\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\r\n\r\n                processBlob = qq.bind(function(blob) {\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processBlobData = qq.bind(function(blobData) {\r\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvas = qq.bind(function(canvas) {\r\n                    var blob = qq.canvasToBlob(canvas);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName + \".png\"\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvasData = qq.bind(function(canvasData) {\r\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\r\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: canvasData.name\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processFileOrInput = qq.bind(function(fileOrInput) {\r\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\r\n                        var files = Array.prototype.slice.call(fileOrInput.files),\r\n                            self = this;\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            self._handleNewFile(file, batchId, verifiedFiles);\r\n                        });\r\n                    }\r\n                    else {\r\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\r\n                    }\r\n                }, this),\r\n\r\n                normalizeData = function() {\r\n                    if (qq.isFileList(data)) {\r\n                        data = Array.prototype.slice.call(data);\r\n                    }\r\n                    data = [].concat(data);\r\n                },\r\n\r\n                self = this,\r\n                verifiedFiles = [];\r\n\r\n            this._currentBatchId = batchId;\r\n\r\n            if (data) {\r\n                normalizeData();\r\n\r\n                qq.each(data, function(idx, fileContainer) {\r\n                    if (qq.isFileOrInput(fileContainer)) {\r\n                        processFileOrInput(fileContainer);\r\n                    }\r\n                    else if (qq.isBlob(fileContainer)) {\r\n                        processBlob(fileContainer);\r\n                    }\r\n                    else if (qq.isObject(fileContainer)) {\r\n                        if (fileContainer.blob && fileContainer.name) {\r\n                            processBlobData(fileContainer);\r\n                        }\r\n                        else if (fileContainer.canvas && fileContainer.name) {\r\n                            processCanvasData(fileContainer);\r\n                        }\r\n                    }\r\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\r\n                        processCanvas(fileContainer);\r\n                    }\r\n                    else {\r\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\r\n                    }\r\n                });\r\n\r\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\r\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\r\n            }\r\n        },\r\n\r\n        cancel: function(id) {\r\n            this._handler.cancel(id);\r\n        },\r\n\r\n        cancelAll: function() {\r\n            var storedIdsCopy = [],\r\n                self = this;\r\n\r\n            qq.extend(storedIdsCopy, this._storedIds);\r\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\r\n                self.cancel(storedFileId);\r\n            });\r\n\r\n            this._handler.cancelAll();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._storedIds = [];\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (uploadData.status === qq.status.PAUSED) {\r\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\r\n                this._uploadFile(id);\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        deleteFile: function(id) {\r\n            return this._onSubmitDelete(id);\r\n        },\r\n\r\n        // TODO document?\r\n        doesExist: function(fileOrBlobId) {\r\n            return this._handler.isValid(fileOrBlobId);\r\n        },\r\n\r\n        // Generate a variable size thumbnail on an img or canvas,\r\n        // returning a promise that is fulfilled when the attempt completes.\r\n        // Thumbnail can either be based off of a URL for an image returned\r\n        // by the server in the upload response, or the associated `Blob`.\r\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\r\n            var promiseToReturn = new qq.Promise(),\r\n                fileOrUrl, options;\r\n\r\n            if (this._imageGenerator) {\r\n                fileOrUrl = this._thumbnailUrls[fileId];\r\n                options = {\r\n                    customResizeFunction: customResizeFunction,\r\n                    maxSize: maxSize > 0 ? maxSize : null,\r\n                    scale: maxSize > 0\r\n                };\r\n\r\n                // If client-side preview generation is possible\r\n                // and we are not specifically looking for the image URl returned by the server...\r\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\r\n                    fileOrUrl = this.getFile(fileId);\r\n                }\r\n\r\n                /* jshint eqeqeq:false,eqnull:true */\r\n                if (fileOrUrl == null) {\r\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\r\n                }\r\n                else {\r\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\r\n                        function success(modifiedContainer) {\r\n                            promiseToReturn.success(modifiedContainer);\r\n                        },\r\n\r\n                        function failure(container, reason) {\r\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n            else {\r\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\r\n            }\r\n\r\n            return promiseToReturn;\r\n        },\r\n\r\n        getButton: function(fileId) {\r\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\r\n        },\r\n\r\n        getEndpoint: function(fileId) {\r\n            return this._endpointStore.get(fileId);\r\n        },\r\n\r\n        getFile: function(fileOrBlobId) {\r\n            return this._handler.getFile(fileOrBlobId) || null;\r\n        },\r\n\r\n        getInProgress: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        getName: function(id) {\r\n            return this._uploadData.retrieve({id: id}).name;\r\n        },\r\n\r\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\r\n        getParentId: function(id) {\r\n            var uploadDataEntry = this.getUploads({id: id}),\r\n                parentId = null;\r\n\r\n            if (uploadDataEntry) {\r\n                if (uploadDataEntry.parentId !== undefined) {\r\n                    parentId = uploadDataEntry.parentId;\r\n                }\r\n            }\r\n\r\n            return parentId;\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            return this._handler.getResumableFilesData();\r\n        },\r\n\r\n        getSize: function(id) {\r\n            return this._uploadData.retrieve({id: id}).size;\r\n        },\r\n\r\n        getNetUploads: function() {\r\n            return this._netUploaded;\r\n        },\r\n\r\n        getRemainingAllowedItems: function() {\r\n            var allowedItems = this._currentItemLimit;\r\n\r\n            if (allowedItems > 0) {\r\n                return allowedItems - this._netUploadedOrQueued;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        getUploads: function(optionalFilter) {\r\n            return this._uploadData.retrieve(optionalFilter);\r\n        },\r\n\r\n        getUuid: function(id) {\r\n            return this._uploadData.retrieve({id: id}).uuid;\r\n        },\r\n\r\n        log: function(str, level) {\r\n            if (this._options.debug && (!level || level === \"info\")) {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\r\n            }\r\n            else if (level && level !== \"info\") {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\r\n\r\n            }\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            // Pause only really makes sense if the file is uploading or retrying\r\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\r\n                if (this._handler.pause(id)) {\r\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\r\n                }\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        removeFileRef: function(id) {\r\n            this._handler.expunge(id);\r\n        },\r\n\r\n        reset: function() {\r\n            this.log(\"Resetting uploader...\");\r\n\r\n            this._handler.reset();\r\n            this._storedIds = [];\r\n            this._autoRetries = [];\r\n            this._retryTimeouts = [];\r\n            this._preventRetries = [];\r\n            this._thumbnailUrls = [];\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n\r\n            this._paramsStore.reset();\r\n            this._endpointStore.reset();\r\n            this._netUploadedOrQueued = 0;\r\n            this._netUploaded = 0;\r\n            this._uploadData.reset();\r\n            this._buttonIdsForFileIds = [];\r\n\r\n            this._pasteHandler && this._pasteHandler.reset();\r\n            this._options.session.refreshOnReset && this._refreshSessionData();\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n\r\n            this._totalProgress && this._totalProgress.reset();\r\n        },\r\n\r\n        retry: function(id) {\r\n            return this._manualRetry(id);\r\n        },\r\n\r\n        scaleImage: function(id, specs) {\r\n            var self = this;\r\n\r\n            return qq.Scaler.prototype.scaleImage(id, specs, {\r\n                log: qq.bind(self.log, self),\r\n                getFile: qq.bind(self.getFile, self),\r\n                uploadData: self._uploadData\r\n            });\r\n        },\r\n\r\n        setCustomHeaders: function(headers, id) {\r\n            this._customHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileCustomHeaders: function(headers, id) {\r\n            this._deleteFileCustomHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileEndpoint: function(endpoint, id) {\r\n            this._deleteFileEndpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setDeleteFileParams: function(params, id) {\r\n            this._deleteFileParamsStore.set(params, id);\r\n        },\r\n\r\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\r\n        setEndpoint: function(endpoint, id) {\r\n            this._endpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setForm: function(elementOrId) {\r\n            this._updateFormSupportAndParams(elementOrId);\r\n        },\r\n\r\n        setItemLimit: function(newItemLimit) {\r\n            this._currentItemLimit = newItemLimit;\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            this._uploadData.updateName(id, newName);\r\n        },\r\n\r\n        setParams: function(params, id) {\r\n            this._paramsStore.set(params, id);\r\n        },\r\n\r\n        setUuid: function(id, newUuid) {\r\n            return this._uploadData.uuidChanged(id, newUuid);\r\n        },\r\n\r\n        /**\r\n         * Expose the internal status of a file id to the public api for manual state changes\r\n         * @public\r\n         *\r\n         * @param {Number} id,\r\n         * @param {String} newStatus\r\n         *\r\n         * @todo Implement the remaining methods\r\n         */\r\n        setStatus: function(id, newStatus) {\r\n            var fileRecord = this.getUploads({id: id});\r\n            if (!fileRecord) {\r\n                throw new qq.Error(id + \" is not a valid file ID.\");\r\n            }\r\n\r\n            switch (newStatus) {\r\n                case qq.status.DELETED:\r\n                    this._onDeleteComplete(id, null, false);\r\n                    break;\r\n                case qq.status.DELETE_FAILED:\r\n                    this._onDeleteComplete(id, null, true);\r\n                    break;\r\n                default:\r\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\r\n                    this.log(errorMessage);\r\n                    throw new qq.Error(errorMessage);\r\n            }\r\n        },\r\n\r\n        uploadStoredFiles: function() {\r\n            if (this._storedIds.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n            }\r\n            else {\r\n                this._uploadStoredFiles();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploaderBasic mode.\r\n     */\r\n    qq.basePrivateApi = {\r\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._uploadData.addFile({\r\n                uuid: sessionData.uuid,\r\n                name: sessionData.name,\r\n                size: sessionData.size,\r\n                status: qq.status.UPLOAD_SUCCESSFUL\r\n            });\r\n\r\n            sessionData.deleteFileEndpoint && this.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\r\n            sessionData.deleteFileParams && this.setDeleteFileParams(sessionData.deleteFileParams, id);\r\n\r\n            if (sessionData.thumbnailUrl) {\r\n                this._thumbnailUrls[id] = sessionData.thumbnailUrl;\r\n            }\r\n\r\n            this._netUploaded++;\r\n            this._netUploadedOrQueued++;\r\n\r\n            return id;\r\n        },\r\n\r\n        _annotateWithButtonId: function(file, associatedInput) {\r\n            if (qq.isFile(file)) {\r\n                file.qqButtonId = this._getButtonId(associatedInput);\r\n            }\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._options.callbacks.onError(null, null, message, undefined);\r\n        },\r\n\r\n        _createDeleteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.DeleteFileAjaxRequester({\r\n                method: this._options.deleteFile.method.toUpperCase(),\r\n                maxConnections: this._options.maxConnections,\r\n                uuidParamName: this._options.request.uuidName,\r\n                customHeaders: this._deleteFileCustomHeadersStore,\r\n                paramsStore: this._deleteFileParamsStore,\r\n                endpointStore: this._deleteFileEndpointStore,\r\n                cors: this._options.cors,\r\n                log: qq.bind(self.log, self),\r\n                onDelete: function(id) {\r\n                    self._onDelete(id);\r\n                    self._options.callbacks.onDelete(id);\r\n                },\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\r\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        _createPasteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.PasteSupport({\r\n                targetElement: this._options.paste.targetElement,\r\n                callbacks: {\r\n                    log: qq.bind(self.log, self),\r\n                    pasteReceived: function(blob) {\r\n                        self._handleCheckedCallback({\r\n                            name: \"onPasteReceived\",\r\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\r\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\r\n                            identifier: \"pasted image\"\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _createStore: function(initialValue, _readOnlyValues_) {\r\n            var store = {},\r\n                catchall = initialValue,\r\n                perIdReadOnlyValues = {},\r\n                readOnlyValues = _readOnlyValues_,\r\n                copy = function(orig) {\r\n                    if (qq.isObject(orig)) {\r\n                        return qq.extend({}, orig);\r\n                    }\r\n                    return orig;\r\n                },\r\n                getReadOnlyValues = function() {\r\n                    if (qq.isFunction(readOnlyValues)) {\r\n                        return readOnlyValues();\r\n                    }\r\n                    return readOnlyValues;\r\n                },\r\n                includeReadOnlyValues = function(id, existing) {\r\n                    if (readOnlyValues && qq.isObject(existing)) {\r\n                        qq.extend(existing, getReadOnlyValues());\r\n                    }\r\n\r\n                    if (perIdReadOnlyValues[id]) {\r\n                        qq.extend(existing, perIdReadOnlyValues[id]);\r\n                    }\r\n                };\r\n\r\n            return {\r\n                set: function(val, id) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id == null) {\r\n                        store = {};\r\n                        catchall = copy(val);\r\n                    }\r\n                    else {\r\n                        store[id] = copy(val);\r\n                    }\r\n                },\r\n\r\n                get: function(id) {\r\n                    var values;\r\n\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id != null && store[id]) {\r\n                        values = store[id];\r\n                    }\r\n                    else {\r\n                        values = copy(catchall);\r\n                    }\r\n\r\n                    includeReadOnlyValues(id, values);\r\n\r\n                    return copy(values);\r\n                },\r\n\r\n                addReadOnly: function(id, values) {\r\n                    // Only applicable to Object stores\r\n                    if (qq.isObject(store)) {\r\n                        // If null ID, apply readonly values to all files\r\n                        if (id === null) {\r\n                            if (qq.isFunction(values)) {\r\n                                readOnlyValues = values;\r\n                            }\r\n                            else {\r\n                                readOnlyValues = readOnlyValues || {};\r\n                                qq.extend(readOnlyValues, values);\r\n                            }\r\n                        }\r\n                        else {\r\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\r\n                            qq.extend(perIdReadOnlyValues[id], values);\r\n                        }\r\n                    }\r\n                },\r\n\r\n                remove: function(fileId) {\r\n                    return delete store[fileId];\r\n                },\r\n\r\n                reset: function() {\r\n                    store = {};\r\n                    perIdReadOnlyValues = {};\r\n                    catchall = initialValue;\r\n                }\r\n            };\r\n        },\r\n\r\n        _createUploadDataTracker: function() {\r\n            var self = this;\r\n\r\n            return new qq.UploadData({\r\n                getName: function(id) {\r\n                    return self.getName(id);\r\n                },\r\n                getUuid: function(id) {\r\n                    return self.getUuid(id);\r\n                },\r\n                getSize: function(id) {\r\n                    return self.getSize(id);\r\n                },\r\n                onStatusChange: function(id, oldStatus, newStatus) {\r\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\r\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\r\n                    self._maybeAllComplete(id, newStatus);\r\n\r\n                    if (self._totalProgress) {\r\n                        setTimeout(function() {\r\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\r\n                        }, 0);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Generate a tracked upload button.\r\n         *\r\n         * @param spec Object containing a required `element` property\r\n         * along with optional `multiple`, `accept`, and `folders`.\r\n         * @returns {qq.UploadButton}\r\n         * @private\r\n         */\r\n        _createUploadButton: function(spec) {\r\n            var self = this,\r\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\r\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\r\n                button;\r\n\r\n            function allowMultiple() {\r\n                if (qq.supportedFeatures.ajaxUploading) {\r\n                    // Workaround for bug in iOS7+ (see #1039)\r\n                    if (self._options.workarounds.iosEmptyVideos &&\r\n                        qq.ios() &&\r\n                        !qq.ios6() &&\r\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\r\n\r\n                        return false;\r\n                    }\r\n\r\n                    if (spec.multiple === undefined) {\r\n                        return self._options.multiple;\r\n                    }\r\n\r\n                    return spec.multiple;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            button = new qq.UploadButton({\r\n                acceptFiles: acceptFiles,\r\n                element: spec.element,\r\n                focusClass: this._options.classes.buttonFocus,\r\n                folders: spec.folders,\r\n                hoverClass: this._options.classes.buttonHover,\r\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\r\n                multiple: allowMultiple(),\r\n                name: this._options.request.inputName,\r\n                onChange: function(input) {\r\n                    self._onInputChange(input);\r\n                },\r\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\r\n            });\r\n\r\n            this._disposeSupport.addDisposer(function() {\r\n                button.dispose();\r\n            });\r\n\r\n            self._buttons.push(button);\r\n\r\n            return button;\r\n        },\r\n\r\n        _createUploadHandler: function(additionalOptions, namespace) {\r\n            var self = this,\r\n                lastOnProgress = {},\r\n                options = {\r\n                    debug: this._options.debug,\r\n                    maxConnections: this._options.maxConnections,\r\n                    cors: this._options.cors,\r\n                    paramsStore: this._paramsStore,\r\n                    endpointStore: this._endpointStore,\r\n                    chunking: this._options.chunking,\r\n                    resume: this._options.resume,\r\n                    blobs: this._options.blobs,\r\n                    log: qq.bind(self.log, self),\r\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\r\n                    onProgress: function(id, name, loaded, total) {\r\n                        if (loaded < 0 || total < 0) {\r\n                            return;\r\n                        }\r\n\r\n                        if (lastOnProgress[id]) {\r\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\r\n                                self._onProgress(id, name, loaded, total);\r\n                                self._options.callbacks.onProgress(id, name, loaded, total);\r\n                            }\r\n                        }\r\n                        else {\r\n                            self._onProgress(id, name, loaded, total);\r\n                            self._options.callbacks.onProgress(id, name, loaded, total);\r\n                        }\r\n\r\n                        lastOnProgress[id] = {loaded: loaded, total: total};\r\n\r\n                    },\r\n                    onComplete: function(id, name, result, xhr) {\r\n                        delete lastOnProgress[id];\r\n\r\n                        var status = self.getUploads({id: id}).status,\r\n                            retVal;\r\n\r\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\r\n                        // invoked by the browser multiple times for the same XHR instance with the same state\r\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\r\n                        // done this.\r\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\r\n                            return;\r\n                        }\r\n\r\n                        retVal = self._onComplete(id, name, result, xhr);\r\n\r\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\r\n                        // until the promise has been fulfilled.\r\n                        if (retVal instanceof  qq.Promise) {\r\n                            retVal.done(function() {\r\n                                self._options.callbacks.onComplete(id, name, result, xhr);\r\n                            });\r\n                        }\r\n                        else {\r\n                            self._options.callbacks.onComplete(id, name, result, xhr);\r\n                        }\r\n                    },\r\n                    onCancel: function(id, name, cancelFinalizationEffort) {\r\n                        var promise = new qq.Promise();\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onCancel\",\r\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\r\n                            onFailure: promise.failure,\r\n                            onSuccess: function() {\r\n                                cancelFinalizationEffort.then(function() {\r\n                                    self._onCancel(id, name);\r\n                                });\r\n\r\n                                promise.success();\r\n                            },\r\n                            identifier: id\r\n                        });\r\n\r\n                        return promise;\r\n                    },\r\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\r\n                    onUpload: function(id, name) {\r\n                        self._onUpload(id, name);\r\n                        self._options.callbacks.onUpload(id, name);\r\n                    },\r\n                    onUploadChunk: function(id, name, chunkData) {\r\n                        self._onUploadChunk(id, chunkData);\r\n                        self._options.callbacks.onUploadChunk(id, name, chunkData);\r\n                    },\r\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\r\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\r\n                    },\r\n                    onResume: function(id, name, chunkData) {\r\n                        return self._options.callbacks.onResume(id, name, chunkData);\r\n                    },\r\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\r\n                        return self._onAutoRetry.apply(self, arguments);\r\n                    },\r\n                    onUuidChanged: function(id, newUuid) {\r\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\r\n                        self.setUuid(id, newUuid);\r\n                    },\r\n                    getName: qq.bind(self.getName, self),\r\n                    getUuid: qq.bind(self.getUuid, self),\r\n                    getSize: qq.bind(self.getSize, self),\r\n                    setSize: qq.bind(self._setSize, self),\r\n                    getDataByUuid: function(uuid) {\r\n                        return self.getUploads({uuid: uuid});\r\n                    },\r\n                    isQueued: function(id) {\r\n                        var status = self.getUploads({id: id}).status;\r\n                        return status === qq.status.QUEUED ||\r\n                            status === qq.status.SUBMITTED ||\r\n                            status === qq.status.UPLOAD_RETRYING ||\r\n                            status === qq.status.PAUSED;\r\n                    },\r\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\r\n                    getIdsInBatch: self._uploadData.getIdsInBatch\r\n                };\r\n\r\n            qq.each(this._options.request, function(prop, val) {\r\n                options[prop] = val;\r\n            });\r\n\r\n            options.customHeaders = this._customHeadersStore;\r\n\r\n            if (additionalOptions) {\r\n                qq.each(additionalOptions, function(key, val) {\r\n                    options[key] = val;\r\n                });\r\n            }\r\n\r\n            return new qq.UploadHandlerController(options, namespace);\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id) {\r\n            this._netUploadedOrQueued--;\r\n            this._uploadData.setStatus(id, qq.status.REJECTED);\r\n        },\r\n\r\n        _formatSize: function(bytes) {\r\n            if (bytes === 0) {\r\n                return bytes + this._options.text.sizeSymbols[0];\r\n            }\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1000;\r\n                i++;\r\n            } while (bytes > 999);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\r\n        },\r\n\r\n        // Creates an internal object that tracks various properties of each extra button,\r\n        // and then actually creates the extra button.\r\n        _generateExtraButtonSpecs: function() {\r\n            var self = this;\r\n\r\n            this._extraButtonSpecs = {};\r\n\r\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\r\n                var multiple = extraButtonOptionEntry.multiple,\r\n                    validation = qq.extend({}, self._options.validation, true),\r\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\r\n\r\n                if (multiple === undefined) {\r\n                    multiple = self._options.multiple;\r\n                }\r\n\r\n                if (extraButtonSpec.validation) {\r\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\r\n                }\r\n\r\n                qq.extend(extraButtonSpec, {\r\n                    multiple: multiple,\r\n                    validation: validation\r\n                }, true);\r\n\r\n                self._initExtraButton(extraButtonSpec);\r\n            });\r\n        },\r\n\r\n        _getButton: function(buttonId) {\r\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            if (extraButtonsSpec) {\r\n                return extraButtonsSpec.element;\r\n            }\r\n            else if (buttonId === this._defaultButtonId) {\r\n                return this._options.button;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the internally used tracking ID for a button.\r\n         *\r\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\r\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\r\n         * @private\r\n         */\r\n        _getButtonId: function(buttonOrFileInputOrFile) {\r\n            var inputs, fileInput,\r\n                fileBlobOrInput = buttonOrFileInputOrFile;\r\n\r\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\r\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\r\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\r\n            }\r\n\r\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\r\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\r\n                if (qq.isFile(fileBlobOrInput)) {\r\n                    return fileBlobOrInput.qqButtonId;\r\n                }\r\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\r\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\r\n\r\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n\r\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\r\n\r\n                qq.each(inputs, function(idx, input) {\r\n                    if (input.getAttribute(\"type\") === \"file\") {\r\n                        fileInput = input;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                if (fileInput) {\r\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n            }\r\n        },\r\n\r\n        _getNotFinished: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED,\r\n                    qq.status.SUBMITTING,\r\n                    qq.status.SUBMITTED,\r\n                    qq.status.PAUSED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        // Get the validation options for this button.  Could be the default validation option\r\n        // or a specific one assigned to this particular button.\r\n        _getValidationBase: function(buttonId) {\r\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\r\n        },\r\n\r\n        _getValidationDescriptor: function(fileWrapper) {\r\n            if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                return {\r\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\r\n                    size: fileWrapper.file.referenceBlob.size\r\n                };\r\n            }\r\n\r\n            return {\r\n                name: this.getUploads({id: fileWrapper.id}).name,\r\n                size: this.getUploads({id: fileWrapper.id}).size\r\n            };\r\n        },\r\n\r\n        _getValidationDescriptors: function(fileWrappers) {\r\n            var self = this,\r\n                fileDescriptors = [];\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\r\n            });\r\n\r\n            return fileDescriptors;\r\n        },\r\n\r\n        // Allows camera access on either the default or an extra button for iOS devices.\r\n        _handleCameraAccess: function() {\r\n            if (this._options.camera.ios && qq.ios()) {\r\n                var acceptIosCamera = \"image/*;capture=camera\",\r\n                    button = this._options.camera.button,\r\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\r\n                    optionRoot = this._options;\r\n\r\n                // If we are not targeting the default button, it is an \"extra\" button\r\n                if (buttonId && buttonId !== this._defaultButtonId) {\r\n                    optionRoot = this._extraButtonSpecs[buttonId];\r\n                }\r\n\r\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\r\n                optionRoot.multiple = false;\r\n\r\n                // update the options\r\n                if (optionRoot.validation.acceptFiles === null) {\r\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\r\n                }\r\n                else {\r\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\r\n                }\r\n\r\n                // update the already-created button\r\n                qq.each(this._buttons, function(idx, button) {\r\n                    if (button.getButtonId() === buttonId) {\r\n                        button.setMultiple(optionRoot.multiple);\r\n                        button.setAcceptFiles(optionRoot.acceptFiles);\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        _handleCheckedCallback: function(details) {\r\n            var self = this,\r\n                callbackRetVal = details.callback();\r\n\r\n            if (qq.isGenericPromise(callbackRetVal)) {\r\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\r\n                return callbackRetVal.then(\r\n                    function(successParam) {\r\n                        self.log(details.name + \" promise success for \" + details.identifier);\r\n                        details.onSuccess(successParam);\r\n                    },\r\n                    function() {\r\n                        if (details.onFailure) {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                            details.onFailure();\r\n                        }\r\n                        else {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            if (callbackRetVal !== false) {\r\n                details.onSuccess(callbackRetVal);\r\n            }\r\n            else {\r\n                if (details.onFailure) {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\r\n                    details.onFailure();\r\n                }\r\n                else {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\r\n                }\r\n            }\r\n\r\n            return callbackRetVal;\r\n        },\r\n\r\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\r\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\r\n            var self = this,\r\n                uuid = qq.getUniqueId(),\r\n                size = -1,\r\n                name = qq.getFilename(file),\r\n                actualFile = file.blob || file,\r\n                handler = this._customNewFileHandler ?\r\n                    this._customNewFileHandler :\r\n                    qq.bind(self._handleNewFileGeneric, self);\r\n\r\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\r\n                size = actualFile.size;\r\n            }\r\n\r\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\r\n                uploadData: self._uploadData,\r\n                paramsStore: self._paramsStore,\r\n                addFileToHandler: function(id, file) {\r\n                    self._handler.add(id, file);\r\n                    self._netUploadedOrQueued++;\r\n                    self._trackButton(id);\r\n                }\r\n            });\r\n        },\r\n\r\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\r\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\r\n\r\n            this._handler.add(id, file);\r\n            this._trackButton(id);\r\n\r\n            this._netUploadedOrQueued++;\r\n\r\n            fileList.push({id: id, file: file});\r\n        },\r\n\r\n        _handlePasteSuccess: function(blob, extSuppliedName) {\r\n            var extension = blob.type.split(\"/\")[1],\r\n                name = extSuppliedName;\r\n\r\n            /*jshint eqeqeq: true, eqnull: true*/\r\n            if (name == null) {\r\n                name = this._options.paste.defaultName;\r\n            }\r\n\r\n            name += \".\" + extension;\r\n\r\n            this.addFiles({\r\n                name: name,\r\n                blob: blob\r\n            });\r\n        },\r\n\r\n        _handleDeleteSuccess: function(id) {\r\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\r\n                var name = this.getName(id);\r\n\r\n                this._netUploadedOrQueued--;\r\n                this._netUploaded--;\r\n                this._handler.expunge(id);\r\n                this._uploadData.setStatus(id, qq.status.DELETED);\r\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\r\n            }\r\n        },\r\n\r\n        _handleDeleteFailed: function(id, xhrOrXdr) {\r\n            var name = this.getName(id);\r\n\r\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\r\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\r\n\r\n            // Check first if xhrOrXdr is actually passed or valid\r\n            // For error reporting, we only have access to the response status if this is not\r\n            // an `XDomainRequest`.\r\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\r\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\r\n            }\r\n            else {\r\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\r\n            }\r\n        },\r\n\r\n        // Creates an extra button element\r\n        _initExtraButton: function(spec) {\r\n            var button = this._createUploadButton({\r\n                accept: spec.validation.acceptFiles,\r\n                allowedExtensions: spec.validation.allowedExtensions,\r\n                element: spec.element,\r\n                folders: spec.folders,\r\n                multiple: spec.multiple,\r\n                title: spec.fileInputTitle\r\n            });\r\n\r\n            this._extraButtonSpecs[button.getButtonId()] = spec;\r\n        },\r\n\r\n        _initFormSupportAndParams: function() {\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n            );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore = this._createStore(\r\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\r\n                );\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\r\n                }\r\n            }\r\n            else {\r\n                this._paramsStore = this._createStore(this._options.request.params);\r\n            }\r\n        },\r\n\r\n        _isDeletePossible: function() {\r\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (this._options.cors.expected) {\r\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\r\n                    return true;\r\n                }\r\n\r\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _isAllowedExtension: function(allowed, fileName) {\r\n            var valid = false;\r\n\r\n            if (!allowed.length) {\r\n                return true;\r\n            }\r\n\r\n            qq.each(allowed, function(idx, allowedExt) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExt)) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\r\n\r\n                    if (fileName.match(extRegex) != null) {\r\n                        valid = true;\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return valid;\r\n        },\r\n\r\n        /**\r\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\r\n         *\r\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\r\n         * @param maybeNameOrNames names of the items that have failed, if applicable\r\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\r\n         * @private\r\n         */\r\n        _itemError: function(code, maybeNameOrNames, item) {\r\n            var message = this._options.messages[code],\r\n                allowedExtensions = [],\r\n                names = [].concat(maybeNameOrNames),\r\n                name = names[0],\r\n                buttonId = this._getButtonId(item),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                extensionsForMessage, placeholderMatch;\r\n\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExtension)) {\r\n                    allowedExtensions.push(allowedExtension);\r\n                }\r\n            });\r\n\r\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\r\n\r\n            r(\"{file}\", this._options.formatFileName(name));\r\n            r(\"{extensions}\", extensionsForMessage);\r\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\r\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\r\n\r\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\r\n            if (placeholderMatch !== null) {\r\n                qq.each(placeholderMatch, function(idx, placeholder) {\r\n                    r(placeholder, names[idx]);\r\n                });\r\n            }\r\n\r\n            this._options.callbacks.onError(null, name, message, undefined);\r\n\r\n            return message;\r\n        },\r\n\r\n        /**\r\n         * Conditionally orders a manual retry of a failed upload.\r\n         *\r\n         * @param id File ID of the failed upload\r\n         * @param callback Optional callback to invoke if a retry is prudent.\r\n         * In lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if a manual retry will occur\r\n         * @private\r\n         */\r\n        _manualRetry: function(id, callback) {\r\n            if (this._onBeforeManualRetry(id)) {\r\n                this._netUploadedOrQueued++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n\r\n                if (callback) {\r\n                    callback(id);\r\n                }\r\n                else {\r\n                    this._handler.retry(id);\r\n                }\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _maybeAllComplete: function(id, status) {\r\n            var self = this,\r\n                notFinished = this._getNotFinished();\r\n\r\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\r\n                this._succeededSinceLastAllComplete.push(id);\r\n            }\r\n            else if (status === qq.status.UPLOAD_FAILED) {\r\n                this._failedSinceLastAllComplete.push(id);\r\n            }\r\n\r\n            if (notFinished === 0 &&\r\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\r\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\r\n                setTimeout(function() {\r\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _maybeHandleIos8SafariWorkaround: function() {\r\n            var self = this;\r\n\r\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\r\n                setTimeout(function() {\r\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\r\n                }, 0);\r\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\r\n            }\r\n        },\r\n\r\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\r\n            // Assuming no one will actually set the response code to something other than 200\r\n            // and still set 'success' to true...\r\n            if (!response.success) {\r\n                if (xhr && xhr.status !== 200 && !response.error) {\r\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\r\n                }\r\n                else {\r\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\r\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\r\n            var self = this;\r\n\r\n            if (items.length > index) {\r\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\r\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\r\n                    setTimeout(function() {\r\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\r\n                            buttonId = self._getButtonId(items[index].file),\r\n                            button = self._getButton(buttonId);\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onValidate\",\r\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\r\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\r\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\r\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\r\n                        });\r\n                    }, 0);\r\n                }\r\n                else if (!validItem) {\r\n                    for (; index < items.length; index++) {\r\n                        self._fileOrBlobRejected(items[index].id);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\r\n\r\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n        },\r\n\r\n        /**\r\n         * Attempt to automatically retry a failed upload.\r\n         *\r\n         * @param id The file ID of the failed upload\r\n         * @param name The name of the file associated with the failed upload\r\n         * @param responseJSON Response from the server, parsed into a javascript object\r\n         * @param xhr Ajax transport used to send the failed request\r\n         * @param callback Optional callback to be invoked if a retry is prudent.\r\n         * Invoked in lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if an auto-retry will occur\r\n         * @private\r\n         */\r\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\r\n            var self = this;\r\n\r\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\r\n\r\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\r\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\r\n\r\n                self._maybeParseAndSendUploadError.apply(self, arguments);\r\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\r\n                self._onBeforeAutoRetry(id, name);\r\n\r\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n                self._retryTimeouts[id] = setTimeout(function() {\r\n                    self.log(\"Starting retry for \" + name + \"...\");\r\n\r\n                    if (callback) {\r\n                        callback(id);\r\n                    }\r\n                    else {\r\n                        self._handler.retry(id);\r\n                    }\r\n                }, retryWaitPeriod);\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id, name) {\r\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            var itemLimit = this._currentItemLimit,\r\n                fileName;\r\n\r\n            if (this._preventRetries[id]) {\r\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\r\n                return false;\r\n            }\r\n            else if (this._handler.isValid(id)) {\r\n                fileName = this.getName(id);\r\n\r\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\r\n                    return false;\r\n                }\r\n\r\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\r\n                    this._itemError(\"retryFailTooManyItems\");\r\n                    return false;\r\n                }\r\n\r\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._netUploadedOrQueued--;\r\n\r\n            clearTimeout(this._retryTimeouts[id]);\r\n\r\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\r\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\r\n                this._storedIds.splice(storedItemIndex, 1);\r\n            }\r\n\r\n            this._uploadData.setStatus(id, qq.status.CANCELED);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            if (!result.success) {\r\n                this._netUploadedOrQueued--;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\r\n\r\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\r\n                    this._preventRetries[id] = true;\r\n                }\r\n            }\r\n            else {\r\n                if (result.thumbnailUrl) {\r\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\r\n                }\r\n\r\n                this._netUploaded++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\r\n            }\r\n\r\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\r\n\r\n            return result.success ? true : false;\r\n        },\r\n\r\n        _onDelete: function(id) {\r\n            this._uploadData.setStatus(id, qq.status.DELETING);\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n            var name = this.getName(id);\r\n\r\n            if (isError) {\r\n                this._handleDeleteFailed(id, xhrOrXdr);\r\n            }\r\n            else {\r\n                this._handleDeleteSuccess(id);\r\n            }\r\n        },\r\n\r\n        _onInputChange: function(input) {\r\n            var fileIndex;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\r\n                    this._annotateWithButtonId(input.files[fileIndex], input);\r\n                }\r\n\r\n                this.addFiles(input.files);\r\n            }\r\n            // Android 2.3.x will fire `onchange` even if no file has been selected\r\n            else if (input.value.length > 0) {\r\n                this.addFiles(input);\r\n            }\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n        },\r\n\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            //nothing to do yet in core uploader\r\n        },\r\n\r\n        _onSubmitCallbackSuccess: function(id, name) {\r\n            this._onSubmit.apply(this, arguments);\r\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\r\n            this._onSubmitted.apply(this, arguments);\r\n\r\n            if (this._options.autoUpload) {\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n                this._uploadFile(id);\r\n            }\r\n            else {\r\n                this._storeForLater(id);\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\r\n            var uuid = this.getUuid(id),\r\n                adjustedOnSuccessCallback;\r\n\r\n            if (onSuccessCallback) {\r\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\r\n            }\r\n\r\n            if (this._isDeletePossible()) {\r\n                this._handleCheckedCallback({\r\n                    name: \"onSubmitDelete\",\r\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\r\n                    onSuccess: adjustedOnSuccessCallback ||\r\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\r\n                    identifier: id\r\n                });\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\r\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitted: function(id) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._options.callbacks.onTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            // nothing to do in the core uploader for now\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\r\n            if (newStatus === qq.status.PAUSED) {\r\n                clearTimeout(this._retryTimeouts[id]);\r\n            }\r\n        },\r\n\r\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\r\n            var self = this;\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                self._fileOrBlobRejected(fileWrapper.id);\r\n            });\r\n        },\r\n\r\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\r\n            var errorMessage,\r\n                itemLimit = this._currentItemLimit,\r\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\r\n\r\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\r\n                if (items.length > 0) {\r\n                    this._handleCheckedCallback({\r\n                        name: \"onValidate\",\r\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\r\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\r\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\r\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\r\n                    });\r\n                }\r\n                else {\r\n                    this._itemError(\"noFilesError\");\r\n                }\r\n            }\r\n            else {\r\n                this._onValidateBatchCallbackFailure(items);\r\n                errorMessage = this._options.messages.tooManyItemsError\r\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\r\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\r\n                this._batchError(errorMessage);\r\n            }\r\n        },\r\n\r\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\r\n            var nextIndex = index + 1;\r\n\r\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\r\n\r\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n        },\r\n\r\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\r\n            var self = this,\r\n                nextIndex = index + 1,\r\n                validationDescriptor = this._getValidationDescriptor(items[index]);\r\n\r\n            this._validateFileOrBlobData(items[index], validationDescriptor)\r\n                .then(\r\n                function() {\r\n                    self._upload(items[index].id, params, endpoint);\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\r\n                },\r\n                function() {\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n                }\r\n            );\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            if (items.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n                return;\r\n            }\r\n\r\n            var validationDescriptors = this._getValidationDescriptors(items),\r\n                buttonId = this._getButtonId(items[0].file),\r\n                button = this._getButton(buttonId);\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onValidateBatch\",\r\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\r\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\r\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\r\n                identifier: \"batch validation\"\r\n            });\r\n        },\r\n\r\n        _preventLeaveInProgress: function() {\r\n            var self = this;\r\n\r\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\r\n                if (self.getInProgress()) {\r\n                    e = e || window.event;\r\n                    // for ie, ff\r\n                    e.returnValue = self._options.messages.onLeave;\r\n                    // for webkit\r\n                    return self._options.messages.onLeave;\r\n                }\r\n            });\r\n        },\r\n\r\n        // Attempts to refresh session data only if the `qq.Session` module exists\r\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\r\n        // callback will be invoked once the refresh is complete.\r\n        _refreshSessionData: function() {\r\n            var self = this,\r\n                options = this._options.session;\r\n\r\n            /* jshint eqnull:true */\r\n            if (qq.Session && this._options.session.endpoint != null) {\r\n                if (!this._session) {\r\n                    qq.extend(options, {cors: this._options.cors});\r\n\r\n                    options.log = qq.bind(this.log, this);\r\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\r\n\r\n                    this._session = new qq.Session(options);\r\n                }\r\n\r\n                setTimeout(function() {\r\n                    self._session.refresh().then(function(response, xhrOrXdr) {\r\n                        self._sessionRequestComplete();\r\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\r\n\r\n                    }, function(response, xhrOrXdr) {\r\n\r\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\r\n                    });\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _sessionRequestComplete: function() {},\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._uploadData.updateSize(id, newSize);\r\n            this._totalProgress && this._totalProgress.onNewSize(id);\r\n        },\r\n\r\n        _shouldAutoRetry: function(id, name, responseJSON) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            /*jshint laxbreak: true */\r\n            if (!this._preventRetries[id]\r\n                && this._options.retry.enableAuto\r\n                && uploadData.status !== qq.status.PAUSED) {\r\n\r\n                if (this._autoRetries[id] === undefined) {\r\n                    this._autoRetries[id] = 0;\r\n                }\r\n\r\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\r\n                    this._autoRetries[id] += 1;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._storedIds.push(id);\r\n        },\r\n\r\n        // Maps a file with the button that was used to select it.\r\n        _trackButton: function(id) {\r\n            var buttonId;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                buttonId = this._handler.getFile(id).qqButtonId;\r\n            }\r\n            else {\r\n                buttonId = this._getButtonId(this._handler.getInput(id));\r\n            }\r\n\r\n            if (buttonId) {\r\n                this._buttonIdsForFileIds[id] = buttonId;\r\n            }\r\n        },\r\n\r\n        _updateFormSupportAndParams: function(formElementOrId) {\r\n            this._options.form.element = formElementOrId;\r\n\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n                );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this.setEndpoint(this._formSupport.newEndpoint);\r\n                }\r\n            }\r\n        },\r\n\r\n        _upload: function(id, params, endpoint) {\r\n            var name = this.getName(id);\r\n\r\n            if (params) {\r\n                this.setParams(params, id);\r\n            }\r\n\r\n            if (endpoint) {\r\n                this.setEndpoint(endpoint, id);\r\n            }\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onSubmit\",\r\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\r\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\r\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\r\n                identifier: id\r\n            });\r\n        },\r\n\r\n        _uploadFile: function(id) {\r\n            if (!this._handler.upload(id)) {\r\n                this._uploadData.setStatus(id, qq.status.QUEUED);\r\n            }\r\n        },\r\n\r\n        _uploadStoredFiles: function() {\r\n            var idToUpload, stillSubmitting,\r\n                self = this;\r\n\r\n            while (this._storedIds.length) {\r\n                idToUpload = this._storedIds.shift();\r\n                this._uploadFile(idToUpload);\r\n            }\r\n\r\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\r\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\r\n            if (stillSubmitting) {\r\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\r\n                setTimeout(function() {\r\n                    self._uploadStoredFiles();\r\n                }, 1000);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs some internal validation checks on an item, defined in the `validation` option.\r\n         *\r\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\r\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\r\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\r\n         * @private\r\n         */\r\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\r\n            var self = this,\r\n                file = (function() {\r\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                        return fileWrapper.file.referenceBlob;\r\n                    }\r\n                    return fileWrapper.file;\r\n                }()),\r\n                name = validationDescriptor.name,\r\n                size = validationDescriptor.size,\r\n                buttonId = this._getButtonId(fileWrapper.file),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                validityChecker = new qq.Promise();\r\n\r\n            validityChecker.then(\r\n                function() {},\r\n                function() {\r\n                    self._fileOrBlobRejected(fileWrapper.id, name);\r\n                });\r\n\r\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\r\n                this._itemError(\"typeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (!this._options.validation.allowEmpty && size === 0) {\r\n                this._itemError(\"emptyError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\r\n                this._itemError(\"sizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && size < validationBase.minSizeLimit) {\r\n                this._itemError(\"minSizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\r\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\r\n                    validityChecker.success,\r\n                    function(errorCode) {\r\n                        self._itemError(errorCode + \"ImageError\", name, file);\r\n                        validityChecker.failure();\r\n                    }\r\n                );\r\n            }\r\n            else {\r\n                validityChecker.success();\r\n            }\r\n\r\n            return validityChecker;\r\n        },\r\n\r\n        _wrapCallbacks: function() {\r\n            var self, safeCallback, prop;\r\n\r\n            self = this;\r\n\r\n            safeCallback = function(name, callback, args) {\r\n                var errorMsg;\r\n\r\n                try {\r\n                    return callback.apply(self, args);\r\n                }\r\n                catch (exception) {\r\n                    errorMsg = exception.message || exception.toString();\r\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\r\n                }\r\n            };\r\n\r\n            /* jshint forin: false, loopfunc: true */\r\n            for (prop in this._options.callbacks) {\r\n                (function() {\r\n                    var callbackName, callbackFunc;\r\n                    callbackName = prop;\r\n                    callbackFunc = self._options.callbacks[callbackName];\r\n                    self._options.callbacks[callbackName] = function() {\r\n                        return safeCallback(callbackName, callbackFunc, arguments);\r\n                    };\r\n                }());\r\n            }\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.FineUploaderBasic = function(o) {\r\n        var self = this;\r\n\r\n        // These options define FineUploaderBasic mode.\r\n        this._options = {\r\n            debug: false,\r\n            button: null,\r\n            multiple: true,\r\n            maxConnections: 3,\r\n            disableCancelForFormUploads: false,\r\n            autoUpload: true,\r\n\r\n            request: {\r\n                customHeaders: {},\r\n                endpoint: \"/server/upload\",\r\n                filenameParam: \"qqfilename\",\r\n                forceMultipart: true,\r\n                inputName: \"qqfile\",\r\n                method: \"POST\",\r\n                params: {},\r\n                paramsInBody: true,\r\n                totalFileSizeName: \"qqtotalfilesize\",\r\n                uuidName: \"qquuid\"\r\n            },\r\n\r\n            validation: {\r\n                allowedExtensions: [],\r\n                sizeLimit: 0,\r\n                minSizeLimit: 0,\r\n                itemLimit: 0,\r\n                stopOnFirstInvalidFile: true,\r\n                acceptFiles: null,\r\n                image: {\r\n                    maxHeight: 0,\r\n                    maxWidth: 0,\r\n                    minHeight: 0,\r\n                    minWidth: 0\r\n                },\r\n                allowEmpty: false\r\n            },\r\n\r\n            callbacks: {\r\n                onSubmit: function(id, name) {},\r\n                onSubmitted: function(id, name) {},\r\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\r\n                onAllComplete: function(successful, failed) {},\r\n                onCancel: function(id, name) {},\r\n                onUpload: function(id, name) {},\r\n                onUploadChunk: function(id, name, chunkData) {},\r\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\r\n                onResume: function(id, fileName, chunkData) {},\r\n                onProgress: function(id, name, loaded, total) {},\r\n                onTotalProgress: function(loaded, total) {},\r\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\r\n                onAutoRetry: function(id, name, attemptNumber) {},\r\n                onManualRetry: function(id, name) {},\r\n                onValidateBatch: function(fileOrBlobData) {},\r\n                onValidate: function(fileOrBlobData) {},\r\n                onSubmitDelete: function(id) {},\r\n                onDelete: function(id) {},\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\r\n                onPasteReceived: function(blob) {},\r\n                onStatusChange: function(id, oldStatus, newStatus) {},\r\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\r\n            },\r\n\r\n            messages: {\r\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\r\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\r\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\r\n                emptyError: \"{file} is empty, please select files again without it.\",\r\n                noFilesError: \"No files to upload.\",\r\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\r\n                maxHeightImageError: \"Image is too tall.\",\r\n                maxWidthImageError: \"Image is too wide.\",\r\n                minHeightImageError: \"Image is not tall enough.\",\r\n                minWidthImageError: \"Image is not wide enough.\",\r\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\r\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\r\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\r\n            },\r\n\r\n            retry: {\r\n                enableAuto: false,\r\n                maxAutoAttempts: 3,\r\n                autoAttemptDelay: 5,\r\n                preventRetryResponseProperty: \"preventRetry\"\r\n            },\r\n\r\n            classes: {\r\n                buttonHover: \"qq-upload-button-hover\",\r\n                buttonFocus: \"qq-upload-button-focus\"\r\n            },\r\n\r\n            chunking: {\r\n                enabled: false,\r\n                concurrent: {\r\n                    enabled: false\r\n                },\r\n                mandatory: false,\r\n                paramNames: {\r\n                    partIndex: \"qqpartindex\",\r\n                    partByteOffset: \"qqpartbyteoffset\",\r\n                    chunkSize: \"qqchunksize\",\r\n                    totalFileSize: \"qqtotalfilesize\",\r\n                    totalParts: \"qqtotalparts\"\r\n                },\r\n                partSize: 2000000,\r\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\r\n                success: {\r\n                    endpoint: null\r\n                }\r\n            },\r\n\r\n            resume: {\r\n                enabled: false,\r\n                recordsExpireIn: 7, //days\r\n                paramNames: {\r\n                    resuming: \"qqresume\"\r\n                }\r\n            },\r\n\r\n            formatFileName: function(fileOrBlobName) {\r\n                return fileOrBlobName;\r\n            },\r\n\r\n            text: {\r\n                defaultResponseError: \"Upload failure reason unknown\",\r\n                fileInputTitle: \"file input\",\r\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\r\n            },\r\n\r\n            deleteFile: {\r\n                enabled: false,\r\n                method: \"DELETE\",\r\n                endpoint: \"/server/upload\",\r\n                customHeaders: {},\r\n                params: {}\r\n            },\r\n\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false,\r\n                allowXdr: false\r\n            },\r\n\r\n            blobs: {\r\n                defaultName: \"misc_data\"\r\n            },\r\n\r\n            paste: {\r\n                targetElement: null,\r\n                defaultName: \"pasted_image\"\r\n            },\r\n\r\n            camera: {\r\n                ios: false,\r\n\r\n                // if ios is true: button is null means target the default button, otherwise target the button specified\r\n                button: null\r\n            },\r\n\r\n            // This refers to additional upload buttons to be handled by Fine Uploader.\r\n            // Each element is an object, containing `element` as the only required\r\n            // property.  The `element` must be a container that will ultimately\r\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\r\n            // Optional properties of each object include `multiple`, `validation`,\r\n            // and `folders`.\r\n            extraButtons: [],\r\n\r\n            // Depends on the session module.  Used to query the server for an initial file list\r\n            // during initialization and optionally after a `reset`.\r\n            session: {\r\n                endpoint: null,\r\n                params: {},\r\n                customHeaders: {},\r\n                refreshOnReset: true\r\n            },\r\n\r\n            // Send parameters associated with an existing form along with the files\r\n            form: {\r\n                // Element ID, HTMLElement, or null\r\n                element: \"qq-form\",\r\n\r\n                // Overrides the base `autoUpload`, unless `element` is null.\r\n                autoUpload: false,\r\n\r\n                // true = upload files on form submission (and squelch submit event)\r\n                interceptSubmit: true\r\n            },\r\n\r\n            // scale images client side, upload a new file for each scaled version\r\n            scaling: {\r\n                customResizer: null,\r\n\r\n                // send the original file as well\r\n                sendOriginal: true,\r\n\r\n                // fox orientation for scaled images\r\n                orient: true,\r\n\r\n                // If null, scaled image type will match reference image type.  This value will be referred to\r\n                // for any size record that does not specific a type.\r\n                defaultType: null,\r\n\r\n                defaultQuality: 80,\r\n\r\n                failureText: \"Failed to scale\",\r\n\r\n                includeExif: false,\r\n\r\n                // metadata about each requested scaled version\r\n                sizes: []\r\n            },\r\n\r\n            workarounds: {\r\n                iosEmptyVideos: true,\r\n                ios8SafariUploads: true,\r\n                ios8BrowserCrash: false\r\n            }\r\n        };\r\n\r\n        // Replace any default options with user defined ones\r\n        qq.extend(this._options, o, true);\r\n\r\n        this._buttons = [];\r\n        this._extraButtonSpecs = {};\r\n        this._buttonIdsForFileIds = [];\r\n\r\n        this._wrapCallbacks();\r\n        this._disposeSupport =  new qq.DisposeSupport();\r\n\r\n        this._storedIds = [];\r\n        this._autoRetries = [];\r\n        this._retryTimeouts = [];\r\n        this._preventRetries = [];\r\n        this._thumbnailUrls = [];\r\n\r\n        this._netUploadedOrQueued = 0;\r\n        this._netUploaded = 0;\r\n        this._uploadData = this._createUploadDataTracker();\r\n\r\n        this._initFormSupportAndParams();\r\n\r\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\r\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\r\n\r\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\r\n\r\n        this._endpointStore = this._createStore(this._options.request.endpoint);\r\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\r\n\r\n        this._handler = this._createUploadHandler();\r\n\r\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\r\n\r\n        if (this._options.button) {\r\n            this._defaultButtonId = this._createUploadButton({\r\n                element: this._options.button,\r\n                title: this._options.text.fileInputTitle\r\n            }).getButtonId();\r\n        }\r\n\r\n        this._generateExtraButtonSpecs();\r\n\r\n        this._handleCameraAccess();\r\n\r\n        if (this._options.paste.targetElement) {\r\n            if (qq.PasteSupport) {\r\n                this._pasteHandler = this._createPasteHandler();\r\n            }\r\n            else {\r\n                this.log(\"Paste support module not found\", \"error\");\r\n            }\r\n        }\r\n\r\n        this._preventLeaveInProgress();\r\n\r\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\r\n        this._refreshSessionData();\r\n\r\n        this._succeededSinceLastAllComplete = [];\r\n        this._failedSinceLastAllComplete = [];\r\n\r\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\r\n        if (this._scaler.enabled) {\r\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\r\n        }\r\n\r\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\r\n            this._totalProgress = new qq.TotalProgress(\r\n                qq.bind(this._onTotalProgress, this),\r\n\r\n                function(id) {\r\n                    var entry = self._uploadData.retrieve({id: id});\r\n                    return (entry && entry.size) || 0;\r\n                }\r\n            );\r\n        }\r\n\r\n        this._currentItemLimit = this._options.validation.itemLimit;\r\n    };\r\n\r\n    // Define the private & public API methods.\r\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\r\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\r\n}());\r\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\r\n/**\r\n * Base upload handler module.  Controls more specific handlers.\r\n *\r\n * @param o Options.  Passed along to the specific handler submodule as well.\r\n * @param namespace [optional] Namespace for the specific handler.\r\n */\r\nqq.UploadHandlerController = function(o, namespace) {\r\n    \"use strict\";\r\n\r\n    var controller = this,\r\n        chunkingPossible = false,\r\n        concurrentChunkingPossible = false,\r\n        chunking, preventRetryResponse, log, handler,\r\n\r\n    options = {\r\n        paramsStore: {},\r\n        maxConnections: 3, // maximum number of concurrent uploads\r\n        chunking: {\r\n            enabled: false,\r\n            multiple: {\r\n                enabled: false\r\n            }\r\n        },\r\n        log: function(str, level) {},\r\n        onProgress: function(id, fileName, loaded, total) {},\r\n        onComplete: function(id, fileName, response, xhr) {},\r\n        onCancel: function(id, fileName) {},\r\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\r\n        onUpload: function(id, fileName) {},\r\n        onUploadChunk: function(id, fileName, chunkData) {},\r\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\r\n        onAutoRetry: function(id, fileName, response, xhr) {},\r\n        onResume: function(id, fileName, chunkData) {},\r\n        onUuidChanged: function(id, newUuid) {},\r\n        getName: function(id) {},\r\n        setSize: function(id, newSize) {},\r\n        isQueued: function(id) {},\r\n        getIdsInProxyGroup: function(id) {},\r\n        getIdsInBatch: function(id) {}\r\n    },\r\n\r\n    chunked = {\r\n        // Called when each chunk has uploaded successfully\r\n        done: function(id, chunkIdx, response, xhr) {\r\n            var chunkData = handler._getChunkData(id, chunkIdx);\r\n\r\n            handler._getFileState(id).attemptingResume = false;\r\n\r\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\r\n            handler._getFileState(id).loaded += chunkData.size;\r\n\r\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\r\n        },\r\n\r\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\r\n        // logic associated with closing out the file, such as combining the chunks.\r\n        finalize: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id);\r\n\r\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\r\n            handler.finalizeChunks(id).then(\r\n                function(response, xhr) {\r\n                    log(\"Finalize successful for \" + id);\r\n\r\n                    var normaizedResponse = upload.normalizeResponse(response, true);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    handler._maybeDeletePersistedChunkData(id);\r\n                    upload.cleanup(id, normaizedResponse, xhr);\r\n                },\r\n                function(response, xhr) {\r\n                    var normaizedResponse = upload.normalizeResponse(response, false);\r\n\r\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\r\n\r\n                    if (normaizedResponse.reset) {\r\n                        chunked.reset(id);\r\n                    }\r\n\r\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\r\n                        upload.cleanup(id, normaizedResponse, xhr);\r\n                    }\r\n                }\r\n            );\r\n        },\r\n\r\n        handleFailure: function(chunkIdx, id, response, xhr) {\r\n            var name = options.getName(id);\r\n\r\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\r\n\r\n            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n            var responseToReport = upload.normalizeResponse(response, false),\r\n                inProgressIdx;\r\n\r\n            if (responseToReport.reset) {\r\n                chunked.reset(id);\r\n            }\r\n            else {\r\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\r\n                if (inProgressIdx >= 0) {\r\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\r\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\r\n                }\r\n            }\r\n\r\n            // We may have aborted all other in-progress chunks for this file due to a failure.\r\n            // If so, ignore the failures associated with those aborts.\r\n            if (!handler._getFileState(id).temp.ignoreFailure) {\r\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\r\n                // chunks since they will be explicitly aborted\r\n                if (concurrentChunkingPossible) {\r\n                    handler._getFileState(id).temp.ignoreFailure = true;\r\n\r\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\r\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\r\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\r\n                        ckXhr.abort();\r\n                        // Flag the transport, in case we are waiting for some other async operation\r\n                        // to complete before attempting to upload the chunk\r\n                        ckXhr._cancelled = true;\r\n                    });\r\n\r\n                    // We must indicate that all aborted chunks are no longer in progress\r\n                    handler.moveInProgressToRemaining(id);\r\n\r\n                    // Free up any connections used by these chunks, but don't allow any\r\n                    // other files to take up the connections (until we have exhausted all auto-retries)\r\n                    connectionManager.free(id, true);\r\n                }\r\n\r\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\r\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\r\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\r\n                    // is a failure or not.\r\n                    upload.cleanup(id, responseToReport, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        hasMoreParts: function(id) {\r\n            return !!handler._getFileState(id).chunking.remaining.length;\r\n        },\r\n\r\n        nextPart: function(id) {\r\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\r\n\r\n            if (nextIdx >= handler._getTotalChunks(id)) {\r\n                nextIdx = null;\r\n            }\r\n\r\n            return nextIdx;\r\n        },\r\n\r\n        reset: function(id) {\r\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\r\n\r\n            handler._maybeDeletePersistedChunkData(id);\r\n            handler.reevaluateChunking(id);\r\n            handler._getFileState(id).loaded = 0;\r\n        },\r\n\r\n        sendNext: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id),\r\n                chunkIdx = chunked.nextPart(id),\r\n                chunkData = handler._getChunkData(id, chunkIdx),\r\n                resuming = handler._getFileState(id).attemptingResume,\r\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\r\n\r\n            if (handler._getFileState(id).loaded == null) {\r\n                handler._getFileState(id).loaded = 0;\r\n            }\r\n\r\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\r\n            if (resuming && options.onResume(id, name, chunkData) === false) {\r\n                chunked.reset(id);\r\n                chunkIdx = chunked.nextPart(id);\r\n                chunkData = handler._getChunkData(id, chunkIdx);\r\n                resuming = false;\r\n            }\r\n\r\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\r\n            if (chunkIdx == null && inProgressChunks.length === 0) {\r\n                chunked.finalize(id);\r\n            }\r\n\r\n            // Send the next chunk\r\n            else {\r\n                log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\r\n                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\r\n                inProgressChunks.push(chunkIdx);\r\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\r\n\r\n                if (concurrentChunkingPossible) {\r\n                    connectionManager.open(id, chunkIdx);\r\n                }\r\n\r\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\r\n                    chunked.sendNext(id);\r\n                }\r\n\r\n                if (chunkData.blob.size === 0) {\r\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\r\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\r\n                }\r\n                else {\r\n                    handler.uploadChunk(id, chunkIdx, resuming).then(\r\n                        // upload chunk success\r\n                        function success(response, xhr) {\r\n                            log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\r\n\r\n                            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n                            var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\r\n                                responseToReport = upload.normalizeResponse(response, true),\r\n                                inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\r\n\r\n                            log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\r\n\r\n                            chunked.done(id, chunkIdx, responseToReport, xhr);\r\n\r\n                            if (inProgressChunkIdx >= 0) {\r\n                                inProgressChunks.splice(inProgressChunkIdx, 1);\r\n                            }\r\n\r\n                            handler._maybePersistChunkedState(id);\r\n\r\n                            if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\r\n                                chunked.finalize(id);\r\n                            }\r\n                            else if (chunked.hasMoreParts(id)) {\r\n                                chunked.sendNext(id);\r\n                            }\r\n                            else {\r\n                                log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\r\n                            }\r\n                        },\r\n\r\n                        // upload chunk failure\r\n                        function failure(response, xhr) {\r\n                            chunked.handleFailure(chunkIdx, id, response, xhr);\r\n                        }\r\n                        )\r\n                        .done(function() {\r\n                            handler.clearXhr(id, chunkIdx);\r\n                        });\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    connectionManager = {\r\n        _open: [],\r\n        _openChunks: {},\r\n        _waiting: [],\r\n\r\n        available: function() {\r\n            var max = options.maxConnections,\r\n                openChunkEntriesCount = 0,\r\n                openChunksCount = 0;\r\n\r\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\r\n                openChunkEntriesCount++;\r\n                openChunksCount += openChunkIndexes.length;\r\n            });\r\n\r\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\r\n        },\r\n\r\n        /**\r\n         * Removes element from queue, starts upload of next\r\n         */\r\n        free: function(id, dontAllowNext) {\r\n            var allowNext = !dontAllowNext,\r\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\r\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\r\n                nextId;\r\n\r\n            delete connectionManager._openChunks[id];\r\n\r\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\r\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\r\n                delete handler._getFileState(id).file;\r\n            }\r\n\r\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\r\n            if (waitingIndex >= 0) {\r\n                connectionManager._waiting.splice(waitingIndex, 1);\r\n            }\r\n            // If this file was consuming a connection, allow the next file to be uploaded\r\n            else if (allowNext && connectionsIndex >= 0) {\r\n                connectionManager._open.splice(connectionsIndex, 1);\r\n\r\n                nextId = connectionManager._waiting.shift();\r\n                if (nextId >= 0) {\r\n                    connectionManager._open.push(nextId);\r\n                    upload.start(nextId);\r\n                }\r\n            }\r\n        },\r\n\r\n        getWaitingOrConnected: function() {\r\n            var waitingOrConnected = [];\r\n\r\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\r\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\r\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\r\n                if (chunks && chunks.length) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // For non-chunked files, only one connection will be consumed per file.\r\n            // This is where we aggregate those file IDs.\r\n            qq.each(connectionManager._open, function(idx, fileId) {\r\n                if (!connectionManager._openChunks[fileId]) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // There may be files waiting for a connection.\r\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\r\n\r\n            return waitingOrConnected;\r\n        },\r\n\r\n        isUsingConnection: function(id) {\r\n            return qq.indexOf(connectionManager._open, id) >= 0;\r\n        },\r\n\r\n        open: function(id, chunkIdx) {\r\n            if (chunkIdx == null) {\r\n                var alreadyInWaiting = qq.indexOf(connectionManager._waiting, id);\r\n                var alreadyInOpen = qq.indexOf(connectionManager._open, id);\r\n                if (alreadyInWaiting === -1 && alreadyInOpen === -1) {\r\n                    connectionManager._waiting.push(id);\r\n                }\r\n            }\r\n\r\n            if (connectionManager.available()) {\r\n                if (chunkIdx == null) {\r\n                    connectionManager._waiting.pop();\r\n                    connectionManager._open.push(id);\r\n                }\r\n                else {\r\n                    (function() {\r\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\r\n                        openChunksEntry.push(chunkIdx);\r\n                        connectionManager._openChunks[id] = openChunksEntry;\r\n                    }());\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        reset: function() {\r\n            connectionManager._waiting = [];\r\n            connectionManager._open = [];\r\n        }\r\n    },\r\n\r\n    simple = {\r\n        send: function(id, name) {\r\n            handler._getFileState(id).loaded = 0;\r\n\r\n            log(\"Sending simple upload request for \" + id);\r\n            handler.uploadFile(id).then(\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request succeeded for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, true),\r\n                        size = options.getSize(id);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    upload.maybeNewUuid(id, responseToReport);\r\n                    upload.cleanup(id, responseToReport, optXhr);\r\n                },\r\n\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request failed for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, false);\r\n\r\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\r\n                        upload.cleanup(id, responseToReport, optXhr);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    },\r\n\r\n    upload = {\r\n        cancel: function(id) {\r\n            log(\"Cancelling \" + id);\r\n            options.paramsStore.remove(id);\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        cleanup: function(id, response, optXhr) {\r\n            var name = options.getName(id);\r\n\r\n            options.onComplete(id, name, response, optXhr);\r\n\r\n            if (handler._getFileState(id)) {\r\n                handler._clearXhrs && handler._clearXhrs(id);\r\n            }\r\n\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\r\n        // if none of these are available for the ID\r\n        getProxyOrBlob: function(id) {\r\n            return (handler.getProxy && handler.getProxy(id)) ||\r\n                (handler.getFile && handler.getFile(id));\r\n        },\r\n\r\n        initHandler: function() {\r\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\r\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\r\n\r\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\r\n                options,\r\n                {\r\n                    getDataByUuid: options.getDataByUuid,\r\n                    getName: options.getName,\r\n                    getSize: options.getSize,\r\n                    getUuid: options.getUuid,\r\n                    log: log,\r\n                    onCancel: options.onCancel,\r\n                    onProgress: options.onProgress,\r\n                    onUuidChanged: options.onUuidChanged\r\n                }\r\n            );\r\n\r\n            if (handler._removeExpiredChunkingRecords) {\r\n                handler._removeExpiredChunkingRecords();\r\n            }\r\n        },\r\n\r\n        isDeferredEligibleForUpload: function(id) {\r\n            return options.isQueued(id);\r\n        },\r\n\r\n        // For Blobs that are part of a group of generated images, along with a reference image,\r\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\r\n        // even if some async processing must be completed on one or more Blobs first.\r\n        maybeDefer: function(id, blob) {\r\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\r\n            // and then submit the upload to the specific handler once the blob is available.\r\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\r\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\r\n\r\n                // Blob creation may take some time, so the caller may want to update the\r\n                // UI to indicate that an operation is in progress, even before the actual\r\n                // upload begins and an onUpload callback is invoked.\r\n                options.onUploadPrep(id);\r\n\r\n                log(\"Attempting to generate a blob on-demand for \" + id);\r\n                blob.create().then(function(generatedBlob) {\r\n                    log(\"Generated an on-demand blob for \" + id);\r\n\r\n                    // Update record associated with this file by providing the generated Blob\r\n                    handler.updateBlob(id, generatedBlob);\r\n\r\n                    // Propagate the size for this generated Blob\r\n                    options.setSize(id, generatedBlob.size);\r\n\r\n                    // Order handler to recalculate chunking possibility, if applicable\r\n                    handler.reevaluateChunking(id);\r\n\r\n                    upload.maybeSendDeferredFiles(id);\r\n                },\r\n\r\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\r\n                function(errorMessage) {\r\n                    var errorResponse = {};\r\n\r\n                    if (errorMessage) {\r\n                        errorResponse.error = errorMessage;\r\n                    }\r\n\r\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\r\n\r\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\r\n                    upload.maybeSendDeferredFiles(id);\r\n                    connectionManager.free(id);\r\n                });\r\n            }\r\n            else {\r\n                return upload.maybeSendDeferredFiles(id);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\r\n        maybeSendDeferredFiles: function(id) {\r\n            var idsInGroup = options.getIdsInProxyGroup(id),\r\n                uploadedThisId = false;\r\n\r\n            if (idsInGroup && idsInGroup.length) {\r\n                log(\"Maybe ready to upload proxy group file \" + id);\r\n\r\n                qq.each(idsInGroup, function(idx, idInGroup) {\r\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\r\n                        uploadedThisId = idInGroup === id;\r\n                        upload.now(idInGroup);\r\n                    }\r\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                uploadedThisId = true;\r\n                upload.now(id);\r\n            }\r\n\r\n            return uploadedThisId;\r\n        },\r\n\r\n        maybeNewUuid: function(id, response) {\r\n            if (response.newUuid !== undefined) {\r\n                options.onUuidChanged(id, response.newUuid);\r\n            }\r\n        },\r\n\r\n        // The response coming from handler implementations may be in various formats.\r\n        // Instead of hoping a promise nested 5 levels deep will always return an object\r\n        // as its first param, let's just normalize the response here.\r\n        normalizeResponse: function(originalResponse, successful) {\r\n            var response = originalResponse;\r\n\r\n            // The passed \"response\" param may not be a response at all.\r\n            // It could be a string, detailing the error, for example.\r\n            if (!qq.isObject(originalResponse)) {\r\n                response = {};\r\n\r\n                if (qq.isString(originalResponse) && !successful) {\r\n                    response.error = originalResponse;\r\n                }\r\n            }\r\n\r\n            response.success = successful;\r\n\r\n            return response;\r\n        },\r\n\r\n        now: function(id) {\r\n            var name = options.getName(id);\r\n\r\n            if (!controller.isValid(id)) {\r\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\r\n            }\r\n\r\n            options.onUpload(id, name);\r\n\r\n            if (chunkingPossible && handler._shouldChunkThisFile(id)) {\r\n                chunked.sendNext(id);\r\n            }\r\n            else {\r\n                simple.send(id, name);\r\n            }\r\n        },\r\n\r\n        start: function(id) {\r\n            var blobToUpload = upload.getProxyOrBlob(id);\r\n\r\n            if (blobToUpload) {\r\n                return upload.maybeDefer(id, blobToUpload);\r\n            }\r\n            else {\r\n                upload.now(id);\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Adds file or file input to the queue\r\n         **/\r\n        add: function(id, file) {\r\n            handler.add.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Sends the file identified by id\r\n         */\r\n        upload: function(id) {\r\n            if (connectionManager.open(id)) {\r\n                return upload.start(id);\r\n            }\r\n            return false;\r\n        },\r\n\r\n        retry: function(id) {\r\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\r\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\r\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\r\n            // any more failures at this point.\r\n            if (concurrentChunkingPossible) {\r\n                handler._getFileState(id).temp.ignoreFailure = false;\r\n            }\r\n\r\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\r\n            // Just go ahead and ask the handler to upload again.\r\n            if (connectionManager.isUsingConnection(id)) {\r\n                return upload.start(id);\r\n            }\r\n\r\n            // If we are attempting to retry a file that is not currently consuming a connection,\r\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\r\n            // before the retry commences.\r\n            else {\r\n                return controller.upload(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels file upload by id\r\n         */\r\n        cancel: function(id) {\r\n            var cancelRetVal = handler.cancel(id);\r\n\r\n            if (qq.isGenericPromise(cancelRetVal)) {\r\n                cancelRetVal.then(function() {\r\n                    upload.cancel(id);\r\n                });\r\n            }\r\n            else if (cancelRetVal !== false) {\r\n                upload.cancel(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels all queued or in-progress uploads\r\n         */\r\n        cancelAll: function() {\r\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\r\n                i;\r\n\r\n            // ensure files are cancelled in reverse order which they were added\r\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\r\n            if (waitingOrConnected.length) {\r\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\r\n                    controller.cancel(waitingOrConnected[i]);\r\n                }\r\n            }\r\n\r\n            connectionManager.reset();\r\n        },\r\n\r\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\r\n        // Undefined if no file record is available.\r\n        getFile: function(id) {\r\n            if (handler.getProxy && handler.getProxy(id)) {\r\n                return handler.getProxy(id).referenceBlob;\r\n            }\r\n\r\n            return handler.getFile && handler.getFile(id);\r\n        },\r\n\r\n        // Returns true if the Blob associated with the ID is related to a proxy s\r\n        isProxied: function(id) {\r\n            return !!(handler.getProxy && handler.getProxy(id));\r\n        },\r\n\r\n        getInput: function(id) {\r\n            if (handler.getInput) {\r\n                return handler.getInput(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            log(\"Resetting upload handler\");\r\n            controller.cancelAll();\r\n            connectionManager.reset();\r\n            handler.reset();\r\n        },\r\n\r\n        expunge: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.expunge(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Determine if the file exists.\r\n         */\r\n        isValid: function(id) {\r\n            return handler.isValid(id);\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            if (handler.getResumableFilesData) {\r\n                return handler.getResumableFilesData();\r\n            }\r\n            return [];\r\n        },\r\n\r\n        /**\r\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\r\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\r\n         * will be undefined.\r\n         *\r\n         * @param id Internal file ID\r\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\r\n         */\r\n        getThirdPartyFileId: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.getThirdPartyFileId(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\r\n         * @param id ID of the upload/file to pause\r\n         * @returns {boolean} true if the upload was paused\r\n         */\r\n        pause: function(id) {\r\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\r\n                connectionManager.free(id);\r\n                handler.moveInProgressToRemaining(id);\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        // True if the file is eligible for pause/resume.\r\n        isResumable: function(id) {\r\n            return !!handler.isResumable && handler.isResumable(id);\r\n        }\r\n    });\r\n\r\n    qq.extend(options, o);\r\n    log = options.log;\r\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\r\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\r\n\r\n    preventRetryResponse = (function() {\r\n        var response = {};\r\n\r\n        response[options.preventRetryParam] = true;\r\n\r\n        return response;\r\n    }());\r\n\r\n    upload.initHandler();\r\n};\r\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id);\n\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now()\n                };\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*globals qq */\nqq.azure = qq.azure || {};\nqq.azure.util = qq.azure.util || (function() {\n    \"use strict\";\n\n    return {\n        AZURE_PARAM_PREFIX: \"x-ms-meta-\",\n\n        /** Test if a request header is actually a known Azure parameter. See: https://msdn.microsoft.com/en-us/library/azure/dd179451.aspx\n         *\n         * @param name Name of the Request Header parameter.\n         * @returns {Boolean} Test result.\n         */\n        _paramNameMatchesAzureParameter: function(name) {\n            switch (name) {\n                case \"Cache-Control\":\n                case \"Content-Disposition\":\n                case \"Content-Encoding\":\n                case \"Content-MD5\":\n                case \"x-ms-blob-content-encoding\":\n                case \"x-ms-blob-content-disposition\":\n                case \"x-ms-blob-content-md5\":\n                case \"x-ms-blob-cache-control\":\n                    return true;\n                default:\n                    return false;\n            }\n        },\n\n        /** Create Prefixed request headers which are appropriate for Azure.\n         *\n         * If the request header is appropriate for Azure (e.g. Cache-Control) then it should be\n         * passed along without a metadata prefix. For all other request header parameter names,\n         * qq.azure.util.AZURE_PARAM_PREFIX should be prepended.\n         *\n         * @param name Name of the Request Header parameter to construct a (possibly) prefixed name.\n         * @returns {String} A valid Request Header parameter name.\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                return name;\n            }\n            else {\n                return qq.azure.util.AZURE_PARAM_PREFIX + name;\n            }\n        },\n\n        getParamsAsHeaders: function(params) {\n            var headers = {};\n\n            qq.each(params, function(name, val) {\n                var headerName = qq.azure.util._getPrefixedParamName(name),\n                    value = null;\n\n                if (qq.isFunction(val)) {\n                    value = String(val());\n                }\n                else if (qq.isObject(val)) {\n                    qq.extend(headers, qq.azure.util.getParamsAsHeaders(val));\n                }\n                else {\n                    value = String(val);\n                }\n\n                if (value !== null) {\n                    if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                        headers[headerName] = value;\n                    } else {\n                        headers[headerName] = encodeURIComponent(value);\n                    }\n                }\n            });\n\n            return headers;\n        },\n\n        parseAzureError: function(responseText, log) {\n            var domParser = new DOMParser(),\n                responseDoc = domParser.parseFromString(responseText, \"application/xml\"),\n                errorTag = responseDoc.getElementsByTagName(\"Error\")[0],\n                errorDetails = {},\n                codeTag, messageTag;\n\n            log(\"Received error response: \" + responseText, \"error\");\n\n            if (errorTag) {\n                messageTag = errorTag.getElementsByTagName(\"Message\")[0];\n                if (messageTag) {\n                    errorDetails.message = messageTag.textContent;\n                }\n\n                codeTag = errorTag.getElementsByTagName(\"Code\")[0];\n                if (codeTag) {\n                    errorDetails.code = codeTag.textContent;\n                }\n\n                log(\"Parsed Azure error: \" + JSON.stringify(errorDetails), \"error\");\n\n                return errorDetails;\n            }\n        }\n    };\n}());\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to Azure.\n * Some inherited options and API methods have a special meaning in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploaderBasic = function(o) {\n        if (!qq.supportedFeatures.ajaxUploading) {\n            throw new qq.Error(\"Uploading directly to Azure is not possible in this browser.\");\n        }\n\n        var options = {\n            signature: {\n                endpoint: null,\n\n                customHeaders: {}\n            },\n\n            // 'uuid', 'filename', or a function which may be promissory\n            blobProperties: {\n                name: \"uuid\"\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            chunking: {\n                // If this is increased, Azure may respond with a 413\n                partSize: 4000000,\n                // Don't chunk files less than this size\n                minFileSize: 4000001\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds blob names for file representations constructed from a session request.\n        this._cannedBlobNames = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, {\n        getBlobName: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedBlobNames[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n            return this._cannedBlobNames[id];\n        },\n\n        _getEndpointSpecificParams: function(id) {\n            return {\n                blob: this.getBlobName(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                container: this._endpointStore.get(id)\n            };\n        },\n\n        _createUploadHandler: function() {\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this,\n                {\n                    signature: this._options.signature,\n                    onGetBlobName: qq.bind(this._determineBlobName, this),\n                    deleteBlob: qq.bind(this._deleteBlob, this, true)\n                },\n                \"azure\");\n        },\n\n        _determineBlobName: function(id) {\n            var self = this,\n                blobNameOptionValue = this._options.blobProperties.name,\n                uuid = this.getUuid(id),\n                filename = this.getName(id),\n                fileExtension = qq.getExtension(filename),\n                blobNameToUse = uuid;\n\n            if (qq.isString(blobNameOptionValue)) {\n                switch (blobNameOptionValue) {\n                    case \"uuid\":\n                        if (fileExtension !== undefined) {\n                            blobNameToUse += \".\" + fileExtension;\n                        }\n                        return new qq.Promise().success(blobNameToUse);\n                    case \"filename\":\n                        return new qq.Promise().success(filename);\n                    default:\n                        return new qq.Promise.failure(\"Invalid blobName option value - \" + blobNameOptionValue);\n                }\n            }\n            else {\n                return blobNameOptionValue.call(this, id);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.blobName == null) {\n                throw new qq.Error(\"Did not find blob name property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedBlobNames[id] = sessionData.blobName;\n            }\n\n            return id;\n        },\n\n        _deleteBlob: function(relatedToCancel, id) {\n            var self = this,\n                deleteBlobSasUri = {},\n                blobUriStore = {\n                    get: function(id) {\n                        return self._endpointStore.get(id) + \"/\" + self.getBlobName(id);\n                    }\n                },\n                deleteFileEndpointStore = {\n                    get: function(id) {\n                        return deleteBlobSasUri[id];\n                    }\n                },\n                getSasSuccess = function(id, sasUri) {\n                    deleteBlobSasUri[id] = sasUri;\n                    deleteBlob.send(id);\n                },\n                getSasFailure = function(id, reason, xhr) {\n                    if (relatedToCancel) {\n                        self.log(\"Will cancel upload, but cannot remove uncommitted parts from Azure due to issue retrieving SAS\", \"error\");\n                        qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                    }\n                    else {\n                        self._onDeleteComplete(id, xhr, true);\n                        self._options.callbacks.onDeleteComplete(id, xhr, true);\n                    }\n                },\n                deleteBlob = new qq.azure.DeleteBlob({\n                    endpointStore: deleteFileEndpointStore,\n                    log: qq.bind(self.log, self),\n                    onDelete: function(id) {\n                        self._onDelete(id);\n                        self._options.callbacks.onDelete(id);\n                    },\n                    onDeleteComplete: function(id, xhrOrXdr, isError) {\n                        delete deleteBlobSasUri[id];\n\n                        if (isError) {\n                            if (relatedToCancel) {\n                                self.log(\"Will cancel upload, but failed to remove uncommitted parts from Azure.\", \"error\");\n                            }\n                            else {\n                                qq.azure.util.parseAzureError(xhrOrXdr.responseText, qq.bind(self.log, self));\n                            }\n                        }\n\n                        if (relatedToCancel) {\n                            qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                            self.log(\"Deleted uncommitted blob chunks for \" + id);\n                        }\n                        else {\n                            self._onDeleteComplete(id, xhrOrXdr, isError);\n                            self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                        }\n                    }\n                }),\n                getSas = new qq.azure.GetSas({\n                    cors: this._options.cors,\n                    customHeaders: this._options.signature.customHeaders,\n                    endpointStore: {\n                        get: function() {\n                            return self._options.signature.endpoint;\n                        }\n                    },\n                    restRequestVerb: deleteBlob.method,\n                    log: qq.bind(self.log, self)\n                });\n\n            getSas.request(id, blobUriStore.get(id)).then(\n                qq.bind(getSasSuccess, self, id),\n                qq.bind(getSasFailure, self, id));\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return {\n                sendDelete: function(id, uuid) {\n                    self._deleteBlob(false, id);\n                }\n            };\n        }\n    });\n}());\n","/*globals qq */\n/**\n * Upload handler used by the upload to Azure module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to Azure Blob Storage containers via the\n * associated Azure API.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\n// TODO l18n for error messages returned to UI\nqq.azure.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        log = proxy.log,\n        cors = spec.cors,\n        endpointStore = spec.endpointStore,\n        paramsStore = spec.paramsStore,\n        signature = spec.signature,\n        filenameParam = spec.filenameParam,\n        minFileSizeForChunking = spec.chunking.minFileSize,\n        deleteBlob = spec.deleteBlob,\n        onGetBlobName = spec.onGetBlobName,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n\n        getBlobMetadata = function(id) {\n            var params = paramsStore.get(id);\n            params[filenameParam] = getName(id);\n            return params;\n        },\n\n        api = {\n            putBlob: new qq.azure.PutBlob({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            putBlock: new qq.azure.PutBlock({\n                log: log\n            }),\n\n            putBlockList: new qq.azure.PutBlockList({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            getSasForPutBlobOrBlock: new qq.azure.GetSas({\n                cors: cors,\n                customHeaders: signature.customHeaders,\n                endpointStore: {\n                    get: function() {\n                        return signature.endpoint;\n                    }\n                },\n                log: log,\n                restRequestVerb: \"PUT\"\n            })\n        };\n\n    function combineChunks(id) {\n        var promise = new qq.Promise();\n\n        getSignedUrl(id).then(function(sasUri) {\n            var mimeType = handler._getMimeType(id),\n                blockIdEntries = handler._getPersistableData(id).blockIdEntries;\n\n            api.putBlockList.send(id, sasUri, blockIdEntries, mimeType, function(xhr) {\n                handler._registerXhr(id, null, xhr, api.putBlockList);\n            })\n                .then(function(xhr) {\n                    log(\"Success combining chunks for id \" + id);\n                    promise.success({}, xhr);\n                }, function(xhr) {\n                    log(\"Attempt to combine chunks failed for id \" + id, \"error\");\n                    handleFailure(xhr, promise);\n                });\n\n        },\n        promise.failure);\n\n        return promise;\n    }\n\n    function determineBlobUrl(id) {\n        var containerUrl = endpointStore.get(id),\n            promise = new qq.Promise(),\n            getBlobNameSuccess = function(blobName) {\n                handler._setThirdPartyFileId(id, blobName);\n                promise.success(containerUrl + \"/\" + blobName);\n            },\n            getBlobNameFailure = function(reason) {\n                promise.failure(reason);\n            };\n\n        onGetBlobName(id).then(getBlobNameSuccess, getBlobNameFailure);\n\n        return promise;\n    }\n\n    function getSignedUrl(id, optChunkIdx) {\n        // We may have multiple SAS requests in progress for the same file, so we must include the chunk idx\n        // as part of the ID when communicating with the SAS ajax requester to avoid collisions.\n        var getSasId = optChunkIdx == null ? id : id + \".\" + optChunkIdx,\n\n            promise = new qq.Promise(),\n            getSasSuccess = function(sasUri) {\n                log(\"GET SAS request succeeded.\");\n                promise.success(sasUri);\n            },\n            getSasFailure = function(reason, getSasXhr) {\n                log(\"GET SAS request failed: \" + reason, \"error\");\n                promise.failure({error: \"Problem communicating with local server\"}, getSasXhr);\n            },\n            determineBlobUrlSuccess = function(blobUrl) {\n                api.getSasForPutBlobOrBlock.request(getSasId, blobUrl).then(\n                    getSasSuccess,\n                    getSasFailure\n                );\n            },\n            determineBlobUrlFailure = function(reason) {\n                log(qq.format(\"Failed to determine blob name for ID {} - {}\", id, reason), \"error\");\n                promise.failure({error: reason});\n            };\n\n        determineBlobUrl(id).then(determineBlobUrlSuccess, determineBlobUrlFailure);\n\n        return promise;\n    }\n\n    function handleFailure(xhr, promise) {\n        var azureError = qq.azure.util.parseAzureError(xhr.responseText, log),\n            errorMsg = \"Problem sending file to Azure\";\n\n        promise.failure({error: errorMsg,\n            azureError: azureError && azureError.message,\n            reset: xhr.status === 403\n        });\n    }\n\n    qq.extend(this, {\n        uploadChunk: function(id, chunkIdx) {\n            var promise = new qq.Promise();\n\n            getSignedUrl(id, chunkIdx).then(\n                function(sasUri) {\n                    var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx);\n\n                    handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                    handler._registerXhr(id, chunkIdx, xhr, api.putBlock);\n\n                    // We may have multiple put block requests in progress for the same file, so we must include the chunk idx\n                    // as part of the ID when communicating with the put block ajax requester to avoid collisions.\n                    api.putBlock.upload(id + \".\" + chunkIdx, xhr, sasUri, chunkIdx, chunkData.blob).then(\n                        function(blockIdEntry) {\n                            if (!handler._getPersistableData(id).blockIdEntries) {\n                                handler._getPersistableData(id).blockIdEntries = [];\n                            }\n\n                            handler._getPersistableData(id).blockIdEntries.push(blockIdEntry);\n                            log(\"Put Block call succeeded for \" + id);\n                            promise.success({}, xhr);\n                        },\n                        function() {\n                            log(qq.format(\"Put Block call failed for ID {} on part {}\", id, chunkIdx), \"error\");\n                            handleFailure(xhr, promise);\n                        }\n                    );\n                },\n                promise.failure\n            );\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var promise = new qq.Promise(),\n                fileOrBlob = handler.getFile(id);\n\n            getSignedUrl(id).then(function(sasUri) {\n                var xhr = handler._createXhr(id);\n\n                handler._registerProgressHandler(id);\n\n                api.putBlob.upload(id, xhr, sasUri, fileOrBlob).then(\n                    function() {\n                        log(\"Put Blob call succeeded for \" + id);\n                        promise.success({}, xhr);\n                    },\n                    function() {\n                        log(\"Put Blob call failed for \" + id, \"error\");\n                        handleFailure(xhr, promise);\n                    }\n                );\n            },\n            promise.failure);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this,\n        new qq.XhrUploadHandler({\n            options: qq.extend({namespace: \"azure\"}, spec),\n            proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n        }\n    ));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var relatedToCancel = handler._wasCanceled(id),\n                    chunkingData = handler._getPersistableData(id),\n                    blockIdEntries = (chunkingData && chunkingData.blockIdEntries) || [];\n\n                if (relatedToCancel && blockIdEntries.length > 0) {\n                    deleteBlob(id);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return combineChunks(id);\n            },\n\n            _shouldChunkThisFile: function(id) {\n                var maybePossible = super_._shouldChunkThisFile(id);\n                return maybePossible && getSize(id) >= minFileSizeForChunking;\n            }\n        };\n    });\n};\n","/* globals qq */\n/**\n * Sends a GET request to the integrator's server, which should return a Shared Access Signature URI used to\n * make a specific request on a Blob via the Azure REST API.\n */\nqq.azure.GetSas = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            customHeaders: {},\n            restRequestVerb: \"PUT\",\n            endpointStore: null,\n            log: function(str, level) {}\n        },\n        requestPromises = {};\n\n    qq.extend(options, o);\n\n    function sasResponseReceived(id, xhr, isError) {\n        var promise = requestPromises[id];\n\n        if (isError) {\n            promise.failure(\"Received response code \" + xhr.status, xhr);\n        }\n        else {\n            if (xhr.responseText.length) {\n                promise.success(xhr.responseText);\n            }\n            else {\n                promise.failure(\"Empty response.\", xhr);\n            }\n        }\n\n        delete requestPromises[id];\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        successfulResponseCodes: {\n            GET: [200]\n        },\n        contentType: null,\n        customHeaders: options.customHeaders,\n        endpointStore: options.endpointStore,\n        cors: options.cors,\n        log: options.log,\n        onComplete: sasResponseReceived\n    }));\n\n    qq.extend(this, {\n        request: function(id, blobUri) {\n            var requestPromise = new qq.Promise(),\n                restVerb = options.restRequestVerb;\n\n            options.log(qq.format(\"Submitting GET SAS request for a {} REST request related to file ID {}.\", restVerb, id));\n\n            requestPromises[id] = requestPromise;\n\n            requester.initTransport(id)\n                .withParams({\n                    bloburi: blobUri,\n                    _method: restVerb\n                })\n                .withCacheBuster()\n                .send();\n\n            return requestPromise;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Delete Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179413.aspx.\n */\nqq.azure.DeleteBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"DELETE\",\n        options = {\n            endpointStore: {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhr, isError) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [202];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: options.endpointStore,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete\n    }));\n\n    qq.extend(this, {\n        method: method,\n        send: function(id) {\n            options.log(\"Submitting Delete Blob request for \" + id);\n\n            return requester.initTransport(id)\n                .send();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179451.aspx.\n */\nqq.azure.PutBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id),\n                headers = qq.azure.util.getParamsAsHeaders(params);\n\n            headers[\"x-ms-blob-type\"] = \"BlockBlob\";\n\n            return headers;\n        },\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success();\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, url, file) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting Put Blob request for \" + id);\n\n            promises[id] = promise;\n            endpoints[id] = url;\n\n            requester.initTransport(id)\n                .withPayload(file)\n                .withHeaders({\"Content-Type\": file.type})\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd135726.aspx.\n */\nqq.azure.PutBlock = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        blockIdEntries = {},\n        promises = {},\n        options = {\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id],\n                blockIdEntry = blockIdEntries[id];\n\n            delete endpoints[id];\n            delete promises[id];\n            delete blockIdEntries[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success(blockIdEntry);\n            }\n        }\n    }));\n\n    function createBlockId(partNum) {\n        var digits = 5,\n            zeros = new Array(digits + 1).join(\"0\"),\n            paddedPartNum = (zeros + partNum).slice(-digits);\n\n        return btoa(paddedPartNum);\n    }\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, sasUri, partNum, blob) {\n            var promise = new qq.Promise(),\n                blockId = createBlockId(partNum);\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block request for {} = part {}\", id, partNum));\n\n            endpoints[id] = qq.format(\"{}&comp=block&blockid={}\", sasUri, encodeURIComponent(blockId));\n            blockIdEntries[id] = {part: partNum, id: blockId};\n\n            requester.initTransport(id)\n                .withPayload(blob)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block List Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179467.aspx.\n */\nqq.azure.PutBlockList = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        promises = {},\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id);\n\n            return qq.azure.util.getParamsAsHeaders(params);\n        },\n        contentType: \"text/plain\",\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: function() {},\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n\n        }\n    }));\n\n    function createRequestBody(blockIdEntries) {\n        var doc = document.implementation.createDocument(null, \"BlockList\", null);\n\n        // If we don't sort the block ID entries by part number, the file will be combined incorrectly by Azure\n        blockIdEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(blockIdEntries, function(idx, blockIdEntry) {\n            var latestEl = doc.createElement(\"Latest\"),\n                latestTextEl = doc.createTextNode(blockIdEntry.id);\n\n            latestEl.appendChild(latestTextEl);\n            qq(doc).children()[0].appendChild(latestEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    qq.extend(this, {\n        method: method,\n        send: function(id, sasUri, blockIdEntries, fileMimeType, registerXhrCallback) {\n            var promise = new qq.Promise(),\n                blockIdsXml = createRequestBody(blockIdEntries),\n                xhr;\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block List request for {}\", id));\n\n            endpoints[id] = qq.format(\"{}&comp=blocklist\", sasUri);\n\n            xhr = requester.initTransport(id)\n                .withPayload(blockIdsXml)\n                .withHeaders({\"x-ms-blob-content-type\": fileMimeType})\n                .send();\n            registerXhrCallback(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\r\n/**\r\n * Defines the public API for FineUploader mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.uiPublicApi = {\r\n        addInitialFiles: function(cannedFileList) {\r\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\r\n            this._templating.addCacheToDom();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\r\n            this._templating.clearFiles();\r\n        },\r\n\r\n        addExtraDropzone: function(element) {\r\n            this._dnd && this._dnd.setupExtraDropzone(element);\r\n        },\r\n\r\n        removeExtraDropzone: function(element) {\r\n            if (this._dnd) {\r\n                return this._dnd.removeDropzone(element);\r\n            }\r\n        },\r\n\r\n        getItemByFileId: function(id) {\r\n            if (!this._templating.isHiddenForever(id)) {\r\n                return this._templating.getFileContainer(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            this._parent.prototype.reset.apply(this, arguments);\r\n            this._templating.reset();\r\n\r\n            if (!this._options.button && this._templating.getButton()) {\r\n                this._defaultButtonId = this._createUploadButton({\r\n                    element: this._templating.getButton(),\r\n                    title: this._options.text.fileInputTitle\r\n                }).getButtonId();\r\n            }\r\n\r\n            if (this._dnd) {\r\n                this._dnd.dispose();\r\n                this._dnd = this._setupDragAndDrop();\r\n            }\r\n\r\n            this._totalFilesInBatch = 0;\r\n            this._filesInBatchAddedToUi = 0;\r\n\r\n            this._setupClickAndEditEventHandlers();\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            var formattedFilename = this._options.formatFileName(newName);\r\n\r\n            this._parent.prototype.setName.apply(this, arguments);\r\n            this._templating.updateFilename(id, formattedFilename);\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\r\n\r\n            paused && this._templating.uploadPaused(id);\r\n            return paused;\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\r\n\r\n            continued && this._templating.uploadContinued(id);\r\n            return continued;\r\n        },\r\n\r\n        getId: function(fileContainerOrChildEl) {\r\n            return this._templating.getFileId(fileContainerOrChildEl);\r\n        },\r\n\r\n        getDropTarget: function(fileId) {\r\n            var file = this.getFile(fileId);\r\n\r\n            return file.qqDropTarget;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploader mode.\r\n     */\r\n    qq.uiPrivateApi = {\r\n        _getButton: function(buttonId) {\r\n            var button = this._parent.prototype._getButton.apply(this, arguments);\r\n\r\n            if (!button) {\r\n                if (buttonId === this._defaultButtonId) {\r\n                    button = this._templating.getButton();\r\n                }\r\n            }\r\n\r\n            return button;\r\n        },\r\n\r\n        _removeFileItem: function(fileId) {\r\n            this._templating.removeFile(fileId);\r\n        },\r\n\r\n        _setupClickAndEditEventHandlers: function() {\r\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\r\n\r\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\r\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\r\n            this._focusinEventSupported = !qq.firefox();\r\n\r\n            if (this._isEditFilenameEnabled())\r\n            {\r\n                this._filenameClickHandler = this._bindFilenameClickEvent();\r\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\r\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\r\n            }\r\n        },\r\n\r\n        _setupDragAndDrop: function() {\r\n            var self = this,\r\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\r\n                templating = this._templating,\r\n                defaultDropZone = templating.getDropZone();\r\n\r\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\r\n\r\n            return new qq.DragAndDrop({\r\n                dropZoneElements: dropZoneElements,\r\n                allowMultipleItems: this._options.multiple,\r\n                classes: {\r\n                    dropActive: this._options.classes.dropActive\r\n                },\r\n                callbacks: {\r\n                    processingDroppedFiles: function() {\r\n                        templating.showDropProcessing();\r\n                    },\r\n                    processingDroppedFilesComplete: function(files, targetEl) {\r\n                        templating.hideDropProcessing();\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            file.qqDropTarget = targetEl;\r\n                        });\r\n\r\n                        if (files.length) {\r\n                            self.addFiles(files, null, null);\r\n                        }\r\n                    },\r\n                    dropError: function(code, errorData) {\r\n                        self._itemError(code, errorData);\r\n                    },\r\n                    dropLog: function(message, level) {\r\n                        self.log(message, level);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _bindFileButtonsClickEvent: function() {\r\n            var self = this;\r\n\r\n            return new qq.FileButtonsClickHandler({\r\n                templating: this._templating,\r\n\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n\r\n                onDeleteFile: function(fileId) {\r\n                    self.deleteFile(fileId);\r\n                },\r\n\r\n                onCancel: function(fileId) {\r\n                    self.cancel(fileId);\r\n                },\r\n\r\n                onRetry: function(fileId) {\r\n                    self.retry(fileId);\r\n                },\r\n\r\n                onPause: function(fileId) {\r\n                    self.pauseUpload(fileId);\r\n                },\r\n\r\n                onContinue: function(fileId) {\r\n                    self.continueUpload(fileId);\r\n                },\r\n\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                }\r\n            });\r\n        },\r\n\r\n        _isEditFilenameEnabled: function() {\r\n            /*jshint -W014 */\r\n            return this._templating.isEditFilenamePossible()\r\n                && !this._options.autoUpload\r\n                && qq.FilenameClickHandler\r\n                && qq.FilenameInputFocusHandler\r\n                && qq.FilenameInputFocusHandler;\r\n        },\r\n\r\n        _filenameEditHandler: function() {\r\n            var self = this,\r\n                templating = this._templating;\r\n\r\n            return {\r\n                templating: templating,\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n                onGetUploadStatus: function(fileId) {\r\n                    return self.getUploads({id: fileId}).status;\r\n                },\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                },\r\n                onSetName: function(id, newName) {\r\n                    self.setName(id, newName);\r\n                },\r\n                onEditingStatusChange: function(id, isEditing) {\r\n                    var qqInput = qq(templating.getEditInput(id)),\r\n                        qqFileContainer = qq(templating.getFileContainer(id));\r\n\r\n                    if (isEditing) {\r\n                        qqInput.addClass(\"qq-editing\");\r\n                        templating.hideFilename(id);\r\n                        templating.hideEditIcon(id);\r\n                    }\r\n                    else {\r\n                        qqInput.removeClass(\"qq-editing\");\r\n                        templating.showFilename(id);\r\n                        templating.showEditIcon(id);\r\n                    }\r\n\r\n                    // Force IE8 and older to repaint\r\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\r\n                }\r\n            };\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\r\n\r\n            if (this._isEditFilenameEnabled()) {\r\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\r\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\r\n                    this._templating.markFilenameEditable(id);\r\n                    this._templating.hideEditIcon(id);\r\n                }\r\n            }\r\n\r\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\r\n                this._templating.hideRetry(id);\r\n                this._templating.setStatusText(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\r\n            }\r\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\r\n                this._templating.hidePause(id);\r\n            }\r\n        },\r\n\r\n        _bindFilenameInputFocusInEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusInHandler(spec);\r\n        },\r\n\r\n        _bindFilenameInputFocusEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusHandler(spec);\r\n        },\r\n\r\n        _bindFilenameClickEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameClickHandler(spec);\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._parent.prototype._storeForLater.apply(this, arguments);\r\n            this._templating.hideSpinner(id);\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._parent.prototype._onAllComplete.apply(this, arguments);\r\n            this._templating.resetTotalProgress();\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            var file = this.getFile(id);\r\n\r\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\r\n                this._paramsStore.addReadOnly(id, {\r\n                    qqpath: file.qqPath\r\n                });\r\n            }\r\n\r\n            this._parent.prototype._onSubmit.apply(this, arguments);\r\n            this._addToList(id, name);\r\n        },\r\n\r\n        // The file item has been added to the DOM.\r\n        _onSubmitted: function(id) {\r\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\r\n            if (this._isEditFilenameEnabled()) {\r\n                this._templating.markFilenameEditable(id);\r\n                this._templating.showEditIcon(id);\r\n\r\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\r\n                if (!this._focusinEventSupported) {\r\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\r\n                }\r\n            }\r\n        },\r\n\r\n        // Update the progress bar & percentage as the file is uploaded\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._parent.prototype._onProgress.apply(this, arguments);\r\n\r\n            this._templating.updateProgress(id, loaded, total);\r\n\r\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\r\n                this._templating.hideCancel(id);\r\n                this._templating.hidePause(id);\r\n                this._templating.hideProgress(id);\r\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\r\n\r\n                // If ~last byte was sent, display total file size\r\n                this._displayFileSize(id);\r\n            }\r\n            else {\r\n                // If still uploading, display percentage - total size is actually the total request(s) size\r\n                this._displayFileSize(id, loaded, total);\r\n            }\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\r\n            this._templating.updateTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\r\n                templating = this._templating,\r\n                fileContainer = templating.getFileContainer(id),\r\n                self = this;\r\n\r\n            function completeUpload(result) {\r\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\r\n                // If so, don't perform any UI-related tasks related to this file.\r\n                if (!fileContainer) {\r\n                    return;\r\n                }\r\n\r\n                templating.setStatusText(id);\r\n\r\n                qq(fileContainer).removeClass(self._classes.retrying);\r\n                templating.hideProgress(id);\r\n\r\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\r\n                    templating.hideCancel(id);\r\n                }\r\n                templating.hideSpinner(id);\r\n\r\n                if (result.success) {\r\n                    self._markFileAsSuccessful(id);\r\n                }\r\n                else {\r\n                    qq(fileContainer).addClass(self._classes.fail);\r\n                    templating.showCancel(id);\r\n\r\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\r\n                        qq(fileContainer).addClass(self._classes.retryable);\r\n                        templating.showRetry(id);\r\n                    }\r\n                    self._controlFailureTextDisplay(id, result);\r\n                }\r\n            }\r\n\r\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\r\n            if (parentRetVal instanceof qq.Promise) {\r\n                parentRetVal.done(function(newResult) {\r\n                    completeUpload(newResult);\r\n                });\r\n\r\n            }\r\n            else {\r\n                completeUpload(result);\r\n            }\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _markFileAsSuccessful: function(id) {\r\n            var templating = this._templating;\r\n\r\n            if (this._isDeletePossible()) {\r\n                templating.showDeleteButton(id);\r\n            }\r\n\r\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\r\n\r\n            this._maybeUpdateThumbnail(id);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\r\n            this._templating.showSpinner(id);\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\r\n\r\n            this._templating.showSpinner(id);\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\r\n\r\n            // Only display the pause button if we have finished uploading at least one chunk\r\n            // & this file can be resumed\r\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\r\n                this._templating.allowPause(id);\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._parent.prototype._onCancel.apply(this, arguments);\r\n            this._removeFileItem(id);\r\n\r\n            if (this._getNotFinished() === 0) {\r\n                this._templating.resetTotalProgress();\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id) {\r\n            var retryNumForDisplay, maxAuto, retryNote;\r\n\r\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\r\n\r\n            this._showCancelLink(id);\r\n\r\n            if (this._options.retry.showAutoRetryNote) {\r\n                retryNumForDisplay = this._autoRetries[id];\r\n                maxAuto = this._options.retry.maxAutoAttempts;\r\n\r\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\r\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\r\n\r\n                this._templating.setStatusText(id, retryNote);\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\r\n            }\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\r\n                this._templating.resetProgress(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\r\n                this._templating.setStatusText(id);\r\n                this._templating.showSpinner(id);\r\n                this._showCancelLink(id);\r\n                return true;\r\n            }\r\n            else {\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\r\n                this._templating.showRetry(id);\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id) {\r\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\r\n\r\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\r\n        },\r\n\r\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\r\n            if (this._options.deleteFile.forceConfirm) {\r\n                this._showDeleteConfirm.apply(this, arguments);\r\n            }\r\n            else {\r\n                this._sendDeleteRequest.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhr, isError) {\r\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\r\n\r\n            this._templating.hideSpinner(id);\r\n\r\n            if (isError) {\r\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\r\n                this._templating.showDeleteButton(id);\r\n            }\r\n            else {\r\n                this._removeFileItem(id);\r\n            }\r\n        },\r\n\r\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\r\n            this._templating.hideDeleteButton(id);\r\n            this._templating.showSpinner(id);\r\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\r\n            this._deleteHandler.sendDelete.apply(this, arguments);\r\n        },\r\n\r\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\r\n            /*jshint -W004 */\r\n            var fileName = this.getName(id),\r\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\r\n                uuid = this.getUuid(id),\r\n                deleteRequestArgs = arguments,\r\n                self = this,\r\n                retVal;\r\n\r\n            retVal = this._options.showConfirm(confirmMessage);\r\n\r\n            if (qq.isGenericPromise(retVal)) {\r\n                retVal.then(function() {\r\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n                });\r\n            }\r\n            else if (retVal !== false) {\r\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n            }\r\n        },\r\n\r\n        _addToList: function(id, name, canned) {\r\n            var prependData,\r\n                prependIndex = 0,\r\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\r\n                record;\r\n\r\n            if (this._options.display.prependFiles) {\r\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\r\n                    prependIndex = this._filesInBatchAddedToUi - 1;\r\n                }\r\n\r\n                prependData = {\r\n                    index: prependIndex\r\n                };\r\n            }\r\n\r\n            if (!canned) {\r\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\r\n                    this._templating.disableCancel();\r\n                }\r\n\r\n                // Cancel all existing (previous) files and clear the list if this file is not part of\r\n                // a scaled file group that has already been accepted, or if this file is not part of\r\n                // a scaled file group at all.\r\n                if (!this._options.multiple) {\r\n                    record = this.getUploads({id: id});\r\n\r\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\r\n\r\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\r\n                        this._handler.cancelAll();\r\n                        this._clearList();\r\n                        this._handledProxyGroup = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (canned) {\r\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\r\n            }\r\n            else {\r\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\r\n            }\r\n\r\n            this._filesInBatchAddedToUi += 1;\r\n\r\n            if (canned ||\r\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\r\n\r\n                this._displayFileSize(id);\r\n            }\r\n        },\r\n\r\n        _clearList: function() {\r\n            this._templating.clearFiles();\r\n            this.clearStoredFiles();\r\n        },\r\n\r\n        _displayFileSize: function(id, loadedSize, totalSize) {\r\n            var size = this.getSize(id),\r\n                sizeForDisplay = this._formatSize(size);\r\n\r\n            if (size >= 0) {\r\n                if (loadedSize !== undefined && totalSize !== undefined) {\r\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\r\n                }\r\n\r\n                this._templating.updateSize(id, sizeForDisplay);\r\n            }\r\n        },\r\n\r\n        _formatProgress: function(uploadedSize, totalSize) {\r\n            var message = this._options.text.formatProgress;\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\r\n            r(\"{total_size}\", this._formatSize(totalSize));\r\n            return message;\r\n        },\r\n\r\n        _controlFailureTextDisplay: function(id, response) {\r\n            var mode, responseProperty, failureReason;\r\n\r\n            mode = this._options.failedUploadTextDisplay.mode;\r\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\r\n\r\n            if (mode === \"custom\") {\r\n                failureReason = response[responseProperty];\r\n                if (!failureReason) {\r\n                    failureReason = this._options.text.failUpload;\r\n                }\r\n\r\n                this._templating.setStatusText(id, failureReason);\r\n\r\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\r\n                    this._showTooltip(id, failureReason);\r\n                }\r\n            }\r\n            else if (mode === \"default\") {\r\n                this._templating.setStatusText(id, this._options.text.failUpload);\r\n            }\r\n            else if (mode !== \"none\") {\r\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\r\n            }\r\n        },\r\n\r\n        _showTooltip: function(id, text) {\r\n            this._templating.getFileContainer(id).title = text;\r\n        },\r\n\r\n        _showCancelLink: function(id) {\r\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\r\n                this._templating.showCancel(id);\r\n            }\r\n        },\r\n\r\n        _itemError: function(code, name, item) {\r\n            var message = this._parent.prototype._itemError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._parent.prototype._batchError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _setupPastePrompt: function() {\r\n            var self = this;\r\n\r\n            this._options.callbacks.onPasteReceived = function() {\r\n                var message = self._options.paste.namePromptMessage,\r\n                    defaultVal = self._options.paste.defaultName;\r\n\r\n                return self._options.showPrompt(message, defaultVal);\r\n            };\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id, name) {\r\n            this._totalFilesInBatch -= 1;\r\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            this._totalFilesInBatch = items.length;\r\n            this._filesInBatchAddedToUi = 0;\r\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\r\n        },\r\n\r\n        _maybeUpdateThumbnail: function(fileId) {\r\n            var thumbnailUrl = this._thumbnailUrls[fileId],\r\n                fileStatus = this.getUploads({id: fileId}).status;\r\n\r\n            if (fileStatus !== qq.status.DELETED &&\r\n                (thumbnailUrl ||\r\n                this._options.thumbnails.placeholders.waitUntilResponse ||\r\n                !qq.supportedFeatures.imagePreviews)) {\r\n\r\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\r\n                // if called with a null thumbnailUrl.\r\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\r\n            }\r\n        },\r\n\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\r\n\r\n            this._addToList(id, this.getName(id), true);\r\n            this._templating.hideSpinner(id);\r\n            this._templating.hideCancel(id);\r\n            this._markFileAsSuccessful(id);\r\n\r\n            return id;\r\n        },\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._parent.prototype._setSize.apply(this, arguments);\r\n\r\n            this._templating.updateSize(id, this._formatSize(newSize));\r\n        },\r\n\r\n        _sessionRequestComplete: function() {\r\n            this._templating.addCacheToDom();\r\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\r\n        }\r\n    };\r\n}());\r\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to Azure.\n * This module inherits all logic from UI & core mode and adds some UI-related logic\n * specific to the upload-to-Azure workflow.  Some inherited options and API methods have a special meaning\n * in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from azure.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"azure\");\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.azure.FineUploader.prototype, qq.azure.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploader.prototype, {\n    });\n}());\n"]}