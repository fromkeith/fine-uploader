{"version":3,"sources":["?","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/traditional/traditional.form.upload.handler.js","../client/js/traditional/traditional.xhr.upload.handler.js","../client/js/traditional/all-chunks-done.ajax.requester.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/third-party/crypto-js/core.js","../client/js/third-party/crypto-js/enc-base64.js","../client/js/third-party/crypto-js/hmac.js","../client/js/third-party/crypto-js/sha1.js","../client/js/third-party/crypto-js/sha256.js","../client/js/third-party/crypto-js/lib-typedarrays.js","../client/js/s3/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/s3/uploader.basic.js","../client/js/s3/request-signer.worker-manager.js","../client/js/s3/request-signer.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/s3/multipart.initiate.ajax.requester.js","../client/js/s3/multipart.complete.ajax.requester.js","../client/js/s3/multipart.abort.ajax.requester.js","../client/js/s3/s3.xhr.upload.handler.js","../client/js/s3/s3.form.upload.handler.js","s3.fine-uploader.worker-inline.js","../client/js/s3/uploader.js","../client/js/azure/util.js","../client/js/azure/uploader.basic.js","../client/js/azure/azure.xhr.upload.handler.js","../client/js/azure/get-sas.js","../client/js/azure/rest/delete-blob.js","../client/js/azure/rest/put-blob.js","../client/js/azure/rest/put-block.js","../client/js/azure/rest/put-block-list.js","../client/js/azure/uploader.js"],"names":["global","qq","element","hide","style","display","this","attach","type","fn","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","name","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","each","idx","val","push","getFirstByClass","children","child","firstChild","nodeType","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","exec","getAttribute","undefined","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","data","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","length","Uint8Array","character","charCodeAt","log","message","level","console","isObject","variable","Object","prototype","toString","call","isFunction","isArray","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","Array","slice","arguments","newStr","nextIdxToReplace","strBefore","substring","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","toLowerCase","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","error","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","prop","override","target","sourceFn","super_","source","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","retVal","Storage","key","getItem","charAt","bind","oldFunc","context","newArgs","concat","apply","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","match","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","self","disposeSupport","options","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","index","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","params","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","_options","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","callbacks","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","toUpperCase","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","namespace","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","paramsInBody","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partIndex","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","alreadyInWaiting","alreadyInOpen","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","el","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","getIframeContentJson","doc","innerHtml","contentWindow","nodeValue","createForm","responseFromMessage","multipart","addChunkingSpecificParams","allChunksDoneRequester","AllChunksDoneAjaxRequester","createReadyStateChangedHandler","onUploadOrChunkComplete","getChunksCompleteParams","isErrorUploadResponse","parseResponse","sendChunksCompleteRequest","complete","setParamsAndGetEntityToSend","setUploadHeaders","extraHeaders","toSend","promises","endpointHandler","DragAndDrop","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","dropZoneElements","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","FineUploader","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","content","createDocumentFragment","map","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","uploader","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","update","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus","CryptoJS","C","C_lib","lib","Base","F","overrides","subtype","mixIn","init","$super","instance","properties","propertyName","clone","WordArray","words","sigBytes","encoder","Hex","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","nBytes","C_enc","enc","hexChars","bite","hexStr","hexStrLength","Latin1","latin1Chars","fromCharCode","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","utf8Str","unescape","BufferedBlockAlgorithm","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","_minBufferSize","nWordsReady","nBytesReady","min","_doProcessBlock","processedWords","Hasher","cfg","_doReset","messageUpdate","hash","_doFinalize","_createHelper","hasher","_createHmacHelper","C_algo","HMAC","algo","Base64","_map","base64Chars","byte1","byte2","byte3","triplet","j","paddingChar","base64Str","base64StrLength","paddingIndex","bits1","bits2","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac","W","SHA1","_hash","M","H","n","t","nBitsTotal","nBitsLeft","floor","HmacSHA1","K","isPrime","sqrtN","factor","getFractionalBits","nPrime","SHA256","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","HmacSHA256","superInit","subInit","typedArray","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","byteOffset","byteLength","typedArrayByteLength","s3","util","ALGORITHM_PARAM_NAME","AWS_PARAM_PREFIX","CREDENTIAL_PARAM_NAME","DATE_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_VALUE","SERVER_SIDE_ENCRYPTION_PARAM_NAME","SERVER_SIDE_ENCRYPTION_PARAM_VALUE","SESSION_TOKEN_PARAM_NAME","V4_ALGORITHM_PARAM_VALUE","V4_SIGNATURE_PARAM_NAME","CASE_SENSITIVE_PARAM_NAMES","UNSIGNABLE_REST_HEADER_NAMES","UNPREFIXED_PARAM_NAMES","getBucket","patterns","bucket","pattern","_getPrefixedParamName","getPolicy","policy","conditions","date","drift","clockDrift","accessKey","acl","expectedStatus","sessionToken","successRedirectUrl","getSuccessRedirectAbsoluteUrl","minFileSize","maxFileSize","reducedRedundancy","region","serverSideEncryption","signatureVersion","expiration","getPolicyExpirationDate","Content-Type","success_action_status","success_action_redirect","getV4CredentialsString","getV4PolicyDate","awsParamName","enforceSizeLimits","refreshPolicyCredentials","newSessionToken","sessionTokenFound","oldCondIdx","oldCondObj","oldCondName","oldCondVal","generateAwsParams","signPolicyCallback","awsParams","customParams","policyJson","AWSAccessKeyId","policyAndSignature","updatedAccessKey","updatedSessionToken","signature","minSize","adjustedMinSize","adjustedMaxSize","adjustedDate","getPolicyDate","getCredentialsDate","getUTCFullYear","getUTCMonth","getUTCDate","_minutesToAdd_","minutesToAdd","pad","setMinutes","getMinutes","toISOString","number","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseIframeResponse","queryString","search","etag","targetAnchorContainer","encodeQueryStringParam","percentEncoded","uriEscape","uriEscapePath","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","objectProperties","host","credentials","secretKey","iframeSupport","localBlankPagePath","onCredentialsExpired","setCredentials","_currentCredentials","_aclStore","_cannedKeys","_cannedBuckets","_buckets","_hosts","getKey","ignoreEmpty","setAcl","aclStore","_determineBucket","getHost","_determineHost","getKeyName","_determineKeyName","maxSizeLimit","oldParams","modifiedParams","paramName","credentialsProvider","onExpired","updateCredentials","_determineObjectPropertyValue","property","maybe","keynameLogic","onGetKeynameFailure","onGetKeynameSuccess","keyname","keynameToUse","_handleKeynameFunction","keynameFunc","successCallback","failureCallback","getResponseHeader","s3Key","s3Bucket","RequestSignerWorkerManager","worker","workerPromises","workerUrl","createS3InlineWorkerUrl","Worker","outstandingRequests","onmessage","resp","generateSignature","task","RequestSigner","thisSignatureRequester","pendingSignatures","expectingPolicy","signatureSpec","generateHeaders","signatureConstructor","getHeaders","Authorization","getRequestDate","getSignedHeaders","getEndOfUrl","v2","getStringToSign","contentMd5","headersStr","endOfUrl","signApiRequest","signatureEffort","headersWordArray","headersHmacSha1","headersHmacSha1Base64","signPolicy","policyStr","policyWordArray","base64Policy","policyHmacSha1","policyHmacSha1Base64","v4","getCanonicalQueryString","endOfUri","queryParamIdx","canonicalQueryString","encodedQueryParams","encodedQueryParamNames","queryStrings","nameAndVal","paramVal","forEach","encodedQueryParamName","getCanonicalRequest","getCanonicalUri","headerNames","hashedContent","getEncodedHashedPayload","workerManager","onloadend","DONE","getScope","canonicalRequest","hashedRequest","scope","stringToSignTemplate","hashed","raw","signedHeaders","headerName","headersPattern","matches","dateKey","dateRegionKey","dateRegionServiceKey","signingKey","credentialPattern","credentialCondition","credential","condition","handleSignatureReceived","responseJson","pendingSignatureData","invalid","getStringToSignArtifacts","requestInfo","toSign","generateStringToSign","headerIndexesToRemove","headerIdx","toSignRaw","REQUEST_TYPE","MULTIPART_ABORT","uploadId","MULTIPART_INITIATE","MULTIPART_COMPLETE","MULTIPART_UPLOAD","partNum","Host","determineSignatureClientSide","toBeSigned","updatedHeaders","getToSign","signatureArtifacts","stringToSign","getSignature","queryParams","stringToSignRaw","constructStringToSign","artifacts","theHeaders","withUploadId","theUploadId","withContent","theContent","withContentType","theContentType","withPartNum","thePartNum","toUTCString","_artifacts_","pendingRequests","handleSuccessResponse","successIndicator","failureIndicator","parsedResponse","InitiateMultipartAjaxRequester","pendingInitiateRequests","getContentType","getSignatureAjaxRequester","handleInitiateRequestComplete","domParser","DOMParser","responseDoc","parseFromString","uploadIdElements","messageElements","CompleteMultipartAjaxRequester","pendingCompleteRequests","handleCompleteRequestComplete","bucketEls","keyEls","getCompleteRequestBody","etagEntries","implementation","createDocument","etagEntry","partEl","partNumEl","partNumTextEl","createTextNode","etagTextEl","etagEl","XMLSerializer","serializeToString","AbortMultipartAjaxRequester","handleAbortRequestComplete","errorEls","awsErrorMsg","onGetBucket","onGetHost","onGetKeyName","combine","etagMap","etags","requesters","completeMultipart","initHeaders","urlSafe","restSignature","put","domain","track","setup","uploadIdPromise","initiateMultipart","abortMultipart","policySignature","initParams","cachedBucket","cachedHost","shouldReset","keyName","encodedKey","parsedErrorProps","parseError","awsResponseXml","parsedDoc","errorDetails","codeEls","messageEls","existedInLocalStorage","baseStorageId","bucketName","isValidResponse","responseData","handleFinishedUpload","handleUpload","azure","AZURE_PARAM_PREFIX","_paramNameMatchesAzureParameter","getParamsAsHeaders","parseAzureError","errorTag","codeTag","messageTag","blobProperties","_cannedBlobNames","getBlobName","onGetBlobName","_determineBlobName","deleteBlob","_deleteBlob","blobNameOptionValue","fileExtension","blobNameToUse","blobName","relatedToCancel","deleteBlobSasUri","blobUriStore","deleteFileEndpointStore","getSasSuccess","sasUri","getSasFailure","DeleteBlob","getSas","GetSas","restRequestVerb","minFileSizeForChunking","getBlobMetadata","putBlob","PutBlob","putBlock","PutBlock","putBlockList","PutBlockList","getSasForPutBlobOrBlock","combineChunks","getSignedUrl","mimeType","blockIdEntries","determineBlobUrl","containerUrl","getBlobNameSuccess","getBlobNameFailure","getSasId","getSasXhr","determineBlobUrlSuccess","blobUrl","determineBlobUrlFailure","azureError","blockIdEntry","chunkingData","maybePossible","requestPromises","sasResponseReceived","blobUri","requestPromise","restVerb","bloburi","codes","endpoints","createBlockId","digits","zeros","paddedPartNum","btoa","blockId","createRequestBody","latestEl","latestTextEl","fileMimeType","registerXhrCallback","blockIdsXml","x-ms-blob-content-type"],"mappings":"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","file":"all.fine-uploader.js","sourcesContent":[null,"/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\r\nqq.version = \"5.14.0-beta3\";\r\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\r\n/**\r\n * Defines the public API for FineUploaderBasic mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.basePublicApi = {\r\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\r\n        addBlobs: function(blobDataOrArray, params, endpoint) {\r\n            this.addFiles(blobDataOrArray, params, endpoint);\r\n        },\r\n\r\n        addInitialFiles: function(cannedFileList) {\r\n            var self = this;\r\n\r\n            qq.each(cannedFileList, function(index, cannedFile) {\r\n                self._addCannedFile(cannedFile);\r\n            });\r\n        },\r\n\r\n        addFiles: function(data, params, endpoint) {\r\n            this._maybeHandleIos8SafariWorkaround();\r\n\r\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\r\n\r\n                processBlob = qq.bind(function(blob) {\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processBlobData = qq.bind(function(blobData) {\r\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvas = qq.bind(function(canvas) {\r\n                    var blob = qq.canvasToBlob(canvas);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName + \".png\"\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvasData = qq.bind(function(canvasData) {\r\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\r\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: canvasData.name\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processFileOrInput = qq.bind(function(fileOrInput) {\r\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\r\n                        var files = Array.prototype.slice.call(fileOrInput.files),\r\n                            self = this;\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            self._handleNewFile(file, batchId, verifiedFiles);\r\n                        });\r\n                    }\r\n                    else {\r\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\r\n                    }\r\n                }, this),\r\n\r\n                normalizeData = function() {\r\n                    if (qq.isFileList(data)) {\r\n                        data = Array.prototype.slice.call(data);\r\n                    }\r\n                    data = [].concat(data);\r\n                },\r\n\r\n                self = this,\r\n                verifiedFiles = [];\r\n\r\n            this._currentBatchId = batchId;\r\n\r\n            if (data) {\r\n                normalizeData();\r\n\r\n                qq.each(data, function(idx, fileContainer) {\r\n                    if (qq.isFileOrInput(fileContainer)) {\r\n                        processFileOrInput(fileContainer);\r\n                    }\r\n                    else if (qq.isBlob(fileContainer)) {\r\n                        processBlob(fileContainer);\r\n                    }\r\n                    else if (qq.isObject(fileContainer)) {\r\n                        if (fileContainer.blob && fileContainer.name) {\r\n                            processBlobData(fileContainer);\r\n                        }\r\n                        else if (fileContainer.canvas && fileContainer.name) {\r\n                            processCanvasData(fileContainer);\r\n                        }\r\n                    }\r\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\r\n                        processCanvas(fileContainer);\r\n                    }\r\n                    else {\r\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\r\n                    }\r\n                });\r\n\r\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\r\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\r\n            }\r\n        },\r\n\r\n        cancel: function(id) {\r\n            this._handler.cancel(id);\r\n        },\r\n\r\n        cancelAll: function() {\r\n            var storedIdsCopy = [],\r\n                self = this;\r\n\r\n            qq.extend(storedIdsCopy, this._storedIds);\r\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\r\n                self.cancel(storedFileId);\r\n            });\r\n\r\n            this._handler.cancelAll();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._storedIds = [];\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (uploadData.status === qq.status.PAUSED) {\r\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\r\n                this._uploadFile(id);\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        deleteFile: function(id) {\r\n            return this._onSubmitDelete(id);\r\n        },\r\n\r\n        // TODO document?\r\n        doesExist: function(fileOrBlobId) {\r\n            return this._handler.isValid(fileOrBlobId);\r\n        },\r\n\r\n        // Generate a variable size thumbnail on an img or canvas,\r\n        // returning a promise that is fulfilled when the attempt completes.\r\n        // Thumbnail can either be based off of a URL for an image returned\r\n        // by the server in the upload response, or the associated `Blob`.\r\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\r\n            var promiseToReturn = new qq.Promise(),\r\n                fileOrUrl, options;\r\n\r\n            if (this._imageGenerator) {\r\n                fileOrUrl = this._thumbnailUrls[fileId];\r\n                options = {\r\n                    customResizeFunction: customResizeFunction,\r\n                    maxSize: maxSize > 0 ? maxSize : null,\r\n                    scale: maxSize > 0\r\n                };\r\n\r\n                // If client-side preview generation is possible\r\n                // and we are not specifically looking for the image URl returned by the server...\r\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\r\n                    fileOrUrl = this.getFile(fileId);\r\n                }\r\n\r\n                /* jshint eqeqeq:false,eqnull:true */\r\n                if (fileOrUrl == null) {\r\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\r\n                }\r\n                else {\r\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\r\n                        function success(modifiedContainer) {\r\n                            promiseToReturn.success(modifiedContainer);\r\n                        },\r\n\r\n                        function failure(container, reason) {\r\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n            else {\r\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\r\n            }\r\n\r\n            return promiseToReturn;\r\n        },\r\n\r\n        getButton: function(fileId) {\r\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\r\n        },\r\n\r\n        getEndpoint: function(fileId) {\r\n            return this._endpointStore.get(fileId);\r\n        },\r\n\r\n        getFile: function(fileOrBlobId) {\r\n            return this._handler.getFile(fileOrBlobId) || null;\r\n        },\r\n\r\n        getInProgress: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        getName: function(id) {\r\n            return this._uploadData.retrieve({id: id}).name;\r\n        },\r\n\r\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\r\n        getParentId: function(id) {\r\n            var uploadDataEntry = this.getUploads({id: id}),\r\n                parentId = null;\r\n\r\n            if (uploadDataEntry) {\r\n                if (uploadDataEntry.parentId !== undefined) {\r\n                    parentId = uploadDataEntry.parentId;\r\n                }\r\n            }\r\n\r\n            return parentId;\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            return this._handler.getResumableFilesData();\r\n        },\r\n\r\n        getSize: function(id) {\r\n            return this._uploadData.retrieve({id: id}).size;\r\n        },\r\n\r\n        getNetUploads: function() {\r\n            return this._netUploaded;\r\n        },\r\n\r\n        getRemainingAllowedItems: function() {\r\n            var allowedItems = this._currentItemLimit;\r\n\r\n            if (allowedItems > 0) {\r\n                return allowedItems - this._netUploadedOrQueued;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        getUploads: function(optionalFilter) {\r\n            return this._uploadData.retrieve(optionalFilter);\r\n        },\r\n\r\n        getUuid: function(id) {\r\n            return this._uploadData.retrieve({id: id}).uuid;\r\n        },\r\n\r\n        log: function(str, level) {\r\n            if (this._options.debug && (!level || level === \"info\")) {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\r\n            }\r\n            else if (level && level !== \"info\") {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\r\n\r\n            }\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            // Pause only really makes sense if the file is uploading or retrying\r\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\r\n                if (this._handler.pause(id)) {\r\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\r\n                }\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        removeFileRef: function(id) {\r\n            this._handler.expunge(id);\r\n        },\r\n\r\n        reset: function() {\r\n            this.log(\"Resetting uploader...\");\r\n\r\n            this._handler.reset();\r\n            this._storedIds = [];\r\n            this._autoRetries = [];\r\n            this._retryTimeouts = [];\r\n            this._preventRetries = [];\r\n            this._thumbnailUrls = [];\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n\r\n            this._paramsStore.reset();\r\n            this._endpointStore.reset();\r\n            this._netUploadedOrQueued = 0;\r\n            this._netUploaded = 0;\r\n            this._uploadData.reset();\r\n            this._buttonIdsForFileIds = [];\r\n\r\n            this._pasteHandler && this._pasteHandler.reset();\r\n            this._options.session.refreshOnReset && this._refreshSessionData();\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n\r\n            this._totalProgress && this._totalProgress.reset();\r\n        },\r\n\r\n        retry: function(id) {\r\n            return this._manualRetry(id);\r\n        },\r\n\r\n        scaleImage: function(id, specs) {\r\n            var self = this;\r\n\r\n            return qq.Scaler.prototype.scaleImage(id, specs, {\r\n                log: qq.bind(self.log, self),\r\n                getFile: qq.bind(self.getFile, self),\r\n                uploadData: self._uploadData\r\n            });\r\n        },\r\n\r\n        setCustomHeaders: function(headers, id) {\r\n            this._customHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileCustomHeaders: function(headers, id) {\r\n            this._deleteFileCustomHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileEndpoint: function(endpoint, id) {\r\n            this._deleteFileEndpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setDeleteFileParams: function(params, id) {\r\n            this._deleteFileParamsStore.set(params, id);\r\n        },\r\n\r\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\r\n        setEndpoint: function(endpoint, id) {\r\n            this._endpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setForm: function(elementOrId) {\r\n            this._updateFormSupportAndParams(elementOrId);\r\n        },\r\n\r\n        setItemLimit: function(newItemLimit) {\r\n            this._currentItemLimit = newItemLimit;\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            this._uploadData.updateName(id, newName);\r\n        },\r\n\r\n        setParams: function(params, id) {\r\n            this._paramsStore.set(params, id);\r\n        },\r\n\r\n        setUuid: function(id, newUuid) {\r\n            return this._uploadData.uuidChanged(id, newUuid);\r\n        },\r\n\r\n        /**\r\n         * Expose the internal status of a file id to the public api for manual state changes\r\n         * @public\r\n         *\r\n         * @param {Number} id,\r\n         * @param {String} newStatus\r\n         *\r\n         * @todo Implement the remaining methods\r\n         */\r\n        setStatus: function(id, newStatus) {\r\n            var fileRecord = this.getUploads({id: id});\r\n            if (!fileRecord) {\r\n                throw new qq.Error(id + \" is not a valid file ID.\");\r\n            }\r\n\r\n            switch (newStatus) {\r\n                case qq.status.DELETED:\r\n                    this._onDeleteComplete(id, null, false);\r\n                    break;\r\n                case qq.status.DELETE_FAILED:\r\n                    this._onDeleteComplete(id, null, true);\r\n                    break;\r\n                default:\r\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\r\n                    this.log(errorMessage);\r\n                    throw new qq.Error(errorMessage);\r\n            }\r\n        },\r\n\r\n        uploadStoredFiles: function() {\r\n            if (this._storedIds.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n            }\r\n            else {\r\n                this._uploadStoredFiles();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploaderBasic mode.\r\n     */\r\n    qq.basePrivateApi = {\r\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._uploadData.addFile({\r\n                uuid: sessionData.uuid,\r\n                name: sessionData.name,\r\n                size: sessionData.size,\r\n                status: qq.status.UPLOAD_SUCCESSFUL\r\n            });\r\n\r\n            sessionData.deleteFileEndpoint && this.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\r\n            sessionData.deleteFileParams && this.setDeleteFileParams(sessionData.deleteFileParams, id);\r\n\r\n            if (sessionData.thumbnailUrl) {\r\n                this._thumbnailUrls[id] = sessionData.thumbnailUrl;\r\n            }\r\n\r\n            this._netUploaded++;\r\n            this._netUploadedOrQueued++;\r\n\r\n            return id;\r\n        },\r\n\r\n        _annotateWithButtonId: function(file, associatedInput) {\r\n            if (qq.isFile(file)) {\r\n                file.qqButtonId = this._getButtonId(associatedInput);\r\n            }\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._options.callbacks.onError(null, null, message, undefined);\r\n        },\r\n\r\n        _createDeleteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.DeleteFileAjaxRequester({\r\n                method: this._options.deleteFile.method.toUpperCase(),\r\n                maxConnections: this._options.maxConnections,\r\n                uuidParamName: this._options.request.uuidName,\r\n                customHeaders: this._deleteFileCustomHeadersStore,\r\n                paramsStore: this._deleteFileParamsStore,\r\n                endpointStore: this._deleteFileEndpointStore,\r\n                cors: this._options.cors,\r\n                log: qq.bind(self.log, self),\r\n                onDelete: function(id) {\r\n                    self._onDelete(id);\r\n                    self._options.callbacks.onDelete(id);\r\n                },\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\r\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        _createPasteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.PasteSupport({\r\n                targetElement: this._options.paste.targetElement,\r\n                callbacks: {\r\n                    log: qq.bind(self.log, self),\r\n                    pasteReceived: function(blob) {\r\n                        self._handleCheckedCallback({\r\n                            name: \"onPasteReceived\",\r\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\r\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\r\n                            identifier: \"pasted image\"\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _createStore: function(initialValue, _readOnlyValues_) {\r\n            var store = {},\r\n                catchall = initialValue,\r\n                perIdReadOnlyValues = {},\r\n                readOnlyValues = _readOnlyValues_,\r\n                copy = function(orig) {\r\n                    if (qq.isObject(orig)) {\r\n                        return qq.extend({}, orig);\r\n                    }\r\n                    return orig;\r\n                },\r\n                getReadOnlyValues = function() {\r\n                    if (qq.isFunction(readOnlyValues)) {\r\n                        return readOnlyValues();\r\n                    }\r\n                    return readOnlyValues;\r\n                },\r\n                includeReadOnlyValues = function(id, existing) {\r\n                    if (readOnlyValues && qq.isObject(existing)) {\r\n                        qq.extend(existing, getReadOnlyValues());\r\n                    }\r\n\r\n                    if (perIdReadOnlyValues[id]) {\r\n                        qq.extend(existing, perIdReadOnlyValues[id]);\r\n                    }\r\n                };\r\n\r\n            return {\r\n                set: function(val, id) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id == null) {\r\n                        store = {};\r\n                        catchall = copy(val);\r\n                    }\r\n                    else {\r\n                        store[id] = copy(val);\r\n                    }\r\n                },\r\n\r\n                get: function(id) {\r\n                    var values;\r\n\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id != null && store[id]) {\r\n                        values = store[id];\r\n                    }\r\n                    else {\r\n                        values = copy(catchall);\r\n                    }\r\n\r\n                    includeReadOnlyValues(id, values);\r\n\r\n                    return copy(values);\r\n                },\r\n\r\n                addReadOnly: function(id, values) {\r\n                    // Only applicable to Object stores\r\n                    if (qq.isObject(store)) {\r\n                        // If null ID, apply readonly values to all files\r\n                        if (id === null) {\r\n                            if (qq.isFunction(values)) {\r\n                                readOnlyValues = values;\r\n                            }\r\n                            else {\r\n                                readOnlyValues = readOnlyValues || {};\r\n                                qq.extend(readOnlyValues, values);\r\n                            }\r\n                        }\r\n                        else {\r\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\r\n                            qq.extend(perIdReadOnlyValues[id], values);\r\n                        }\r\n                    }\r\n                },\r\n\r\n                remove: function(fileId) {\r\n                    return delete store[fileId];\r\n                },\r\n\r\n                reset: function() {\r\n                    store = {};\r\n                    perIdReadOnlyValues = {};\r\n                    catchall = initialValue;\r\n                }\r\n            };\r\n        },\r\n\r\n        _createUploadDataTracker: function() {\r\n            var self = this;\r\n\r\n            return new qq.UploadData({\r\n                getName: function(id) {\r\n                    return self.getName(id);\r\n                },\r\n                getUuid: function(id) {\r\n                    return self.getUuid(id);\r\n                },\r\n                getSize: function(id) {\r\n                    return self.getSize(id);\r\n                },\r\n                onStatusChange: function(id, oldStatus, newStatus) {\r\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\r\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\r\n                    self._maybeAllComplete(id, newStatus);\r\n\r\n                    if (self._totalProgress) {\r\n                        setTimeout(function() {\r\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\r\n                        }, 0);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Generate a tracked upload button.\r\n         *\r\n         * @param spec Object containing a required `element` property\r\n         * along with optional `multiple`, `accept`, and `folders`.\r\n         * @returns {qq.UploadButton}\r\n         * @private\r\n         */\r\n        _createUploadButton: function(spec) {\r\n            var self = this,\r\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\r\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\r\n                button;\r\n\r\n            function allowMultiple() {\r\n                if (qq.supportedFeatures.ajaxUploading) {\r\n                    // Workaround for bug in iOS7+ (see #1039)\r\n                    if (self._options.workarounds.iosEmptyVideos &&\r\n                        qq.ios() &&\r\n                        !qq.ios6() &&\r\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\r\n\r\n                        return false;\r\n                    }\r\n\r\n                    if (spec.multiple === undefined) {\r\n                        return self._options.multiple;\r\n                    }\r\n\r\n                    return spec.multiple;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            button = new qq.UploadButton({\r\n                acceptFiles: acceptFiles,\r\n                element: spec.element,\r\n                focusClass: this._options.classes.buttonFocus,\r\n                folders: spec.folders,\r\n                hoverClass: this._options.classes.buttonHover,\r\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\r\n                multiple: allowMultiple(),\r\n                name: this._options.request.inputName,\r\n                onChange: function(input) {\r\n                    self._onInputChange(input);\r\n                },\r\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\r\n            });\r\n\r\n            this._disposeSupport.addDisposer(function() {\r\n                button.dispose();\r\n            });\r\n\r\n            self._buttons.push(button);\r\n\r\n            return button;\r\n        },\r\n\r\n        _createUploadHandler: function(additionalOptions, namespace) {\r\n            var self = this,\r\n                lastOnProgress = {},\r\n                options = {\r\n                    debug: this._options.debug,\r\n                    maxConnections: this._options.maxConnections,\r\n                    cors: this._options.cors,\r\n                    paramsStore: this._paramsStore,\r\n                    endpointStore: this._endpointStore,\r\n                    chunking: this._options.chunking,\r\n                    resume: this._options.resume,\r\n                    blobs: this._options.blobs,\r\n                    log: qq.bind(self.log, self),\r\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\r\n                    onProgress: function(id, name, loaded, total) {\r\n                        if (loaded < 0 || total < 0) {\r\n                            return;\r\n                        }\r\n\r\n                        if (lastOnProgress[id]) {\r\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\r\n                                self._onProgress(id, name, loaded, total);\r\n                                self._options.callbacks.onProgress(id, name, loaded, total);\r\n                            }\r\n                        }\r\n                        else {\r\n                            self._onProgress(id, name, loaded, total);\r\n                            self._options.callbacks.onProgress(id, name, loaded, total);\r\n                        }\r\n\r\n                        lastOnProgress[id] = {loaded: loaded, total: total};\r\n\r\n                    },\r\n                    onComplete: function(id, name, result, xhr) {\r\n                        delete lastOnProgress[id];\r\n\r\n                        var status = self.getUploads({id: id}).status,\r\n                            retVal;\r\n\r\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\r\n                        // invoked by the browser multiple times for the same XHR instance with the same state\r\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\r\n                        // done this.\r\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\r\n                            return;\r\n                        }\r\n\r\n                        retVal = self._onComplete(id, name, result, xhr);\r\n\r\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\r\n                        // until the promise has been fulfilled.\r\n                        if (retVal instanceof  qq.Promise) {\r\n                            retVal.done(function() {\r\n                                self._options.callbacks.onComplete(id, name, result, xhr);\r\n                            });\r\n                        }\r\n                        else {\r\n                            self._options.callbacks.onComplete(id, name, result, xhr);\r\n                        }\r\n                    },\r\n                    onCancel: function(id, name, cancelFinalizationEffort) {\r\n                        var promise = new qq.Promise();\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onCancel\",\r\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\r\n                            onFailure: promise.failure,\r\n                            onSuccess: function() {\r\n                                cancelFinalizationEffort.then(function() {\r\n                                    self._onCancel(id, name);\r\n                                });\r\n\r\n                                promise.success();\r\n                            },\r\n                            identifier: id\r\n                        });\r\n\r\n                        return promise;\r\n                    },\r\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\r\n                    onUpload: function(id, name) {\r\n                        self._onUpload(id, name);\r\n                        self._options.callbacks.onUpload(id, name);\r\n                    },\r\n                    onUploadChunk: function(id, name, chunkData) {\r\n                        self._onUploadChunk(id, chunkData);\r\n                        self._options.callbacks.onUploadChunk(id, name, chunkData);\r\n                    },\r\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\r\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\r\n                    },\r\n                    onResume: function(id, name, chunkData) {\r\n                        return self._options.callbacks.onResume(id, name, chunkData);\r\n                    },\r\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\r\n                        return self._onAutoRetry.apply(self, arguments);\r\n                    },\r\n                    onUuidChanged: function(id, newUuid) {\r\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\r\n                        self.setUuid(id, newUuid);\r\n                    },\r\n                    getName: qq.bind(self.getName, self),\r\n                    getUuid: qq.bind(self.getUuid, self),\r\n                    getSize: qq.bind(self.getSize, self),\r\n                    setSize: qq.bind(self._setSize, self),\r\n                    getDataByUuid: function(uuid) {\r\n                        return self.getUploads({uuid: uuid});\r\n                    },\r\n                    isQueued: function(id) {\r\n                        var status = self.getUploads({id: id}).status;\r\n                        return status === qq.status.QUEUED ||\r\n                            status === qq.status.SUBMITTED ||\r\n                            status === qq.status.UPLOAD_RETRYING ||\r\n                            status === qq.status.PAUSED;\r\n                    },\r\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\r\n                    getIdsInBatch: self._uploadData.getIdsInBatch\r\n                };\r\n\r\n            qq.each(this._options.request, function(prop, val) {\r\n                options[prop] = val;\r\n            });\r\n\r\n            options.customHeaders = this._customHeadersStore;\r\n\r\n            if (additionalOptions) {\r\n                qq.each(additionalOptions, function(key, val) {\r\n                    options[key] = val;\r\n                });\r\n            }\r\n\r\n            return new qq.UploadHandlerController(options, namespace);\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id) {\r\n            this._netUploadedOrQueued--;\r\n            this._uploadData.setStatus(id, qq.status.REJECTED);\r\n        },\r\n\r\n        _formatSize: function(bytes) {\r\n            if (bytes === 0) {\r\n                return bytes + this._options.text.sizeSymbols[0];\r\n            }\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1000;\r\n                i++;\r\n            } while (bytes > 999);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\r\n        },\r\n\r\n        // Creates an internal object that tracks various properties of each extra button,\r\n        // and then actually creates the extra button.\r\n        _generateExtraButtonSpecs: function() {\r\n            var self = this;\r\n\r\n            this._extraButtonSpecs = {};\r\n\r\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\r\n                var multiple = extraButtonOptionEntry.multiple,\r\n                    validation = qq.extend({}, self._options.validation, true),\r\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\r\n\r\n                if (multiple === undefined) {\r\n                    multiple = self._options.multiple;\r\n                }\r\n\r\n                if (extraButtonSpec.validation) {\r\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\r\n                }\r\n\r\n                qq.extend(extraButtonSpec, {\r\n                    multiple: multiple,\r\n                    validation: validation\r\n                }, true);\r\n\r\n                self._initExtraButton(extraButtonSpec);\r\n            });\r\n        },\r\n\r\n        _getButton: function(buttonId) {\r\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            if (extraButtonsSpec) {\r\n                return extraButtonsSpec.element;\r\n            }\r\n            else if (buttonId === this._defaultButtonId) {\r\n                return this._options.button;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the internally used tracking ID for a button.\r\n         *\r\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\r\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\r\n         * @private\r\n         */\r\n        _getButtonId: function(buttonOrFileInputOrFile) {\r\n            var inputs, fileInput,\r\n                fileBlobOrInput = buttonOrFileInputOrFile;\r\n\r\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\r\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\r\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\r\n            }\r\n\r\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\r\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\r\n                if (qq.isFile(fileBlobOrInput)) {\r\n                    return fileBlobOrInput.qqButtonId;\r\n                }\r\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\r\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\r\n\r\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n\r\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\r\n\r\n                qq.each(inputs, function(idx, input) {\r\n                    if (input.getAttribute(\"type\") === \"file\") {\r\n                        fileInput = input;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                if (fileInput) {\r\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n            }\r\n        },\r\n\r\n        _getNotFinished: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED,\r\n                    qq.status.SUBMITTING,\r\n                    qq.status.SUBMITTED,\r\n                    qq.status.PAUSED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        // Get the validation options for this button.  Could be the default validation option\r\n        // or a specific one assigned to this particular button.\r\n        _getValidationBase: function(buttonId) {\r\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\r\n        },\r\n\r\n        _getValidationDescriptor: function(fileWrapper) {\r\n            if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                return {\r\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\r\n                    size: fileWrapper.file.referenceBlob.size\r\n                };\r\n            }\r\n\r\n            return {\r\n                name: this.getUploads({id: fileWrapper.id}).name,\r\n                size: this.getUploads({id: fileWrapper.id}).size\r\n            };\r\n        },\r\n\r\n        _getValidationDescriptors: function(fileWrappers) {\r\n            var self = this,\r\n                fileDescriptors = [];\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\r\n            });\r\n\r\n            return fileDescriptors;\r\n        },\r\n\r\n        // Allows camera access on either the default or an extra button for iOS devices.\r\n        _handleCameraAccess: function() {\r\n            if (this._options.camera.ios && qq.ios()) {\r\n                var acceptIosCamera = \"image/*;capture=camera\",\r\n                    button = this._options.camera.button,\r\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\r\n                    optionRoot = this._options;\r\n\r\n                // If we are not targeting the default button, it is an \"extra\" button\r\n                if (buttonId && buttonId !== this._defaultButtonId) {\r\n                    optionRoot = this._extraButtonSpecs[buttonId];\r\n                }\r\n\r\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\r\n                optionRoot.multiple = false;\r\n\r\n                // update the options\r\n                if (optionRoot.validation.acceptFiles === null) {\r\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\r\n                }\r\n                else {\r\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\r\n                }\r\n\r\n                // update the already-created button\r\n                qq.each(this._buttons, function(idx, button) {\r\n                    if (button.getButtonId() === buttonId) {\r\n                        button.setMultiple(optionRoot.multiple);\r\n                        button.setAcceptFiles(optionRoot.acceptFiles);\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        _handleCheckedCallback: function(details) {\r\n            var self = this,\r\n                callbackRetVal = details.callback();\r\n\r\n            if (qq.isGenericPromise(callbackRetVal)) {\r\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\r\n                return callbackRetVal.then(\r\n                    function(successParam) {\r\n                        self.log(details.name + \" promise success for \" + details.identifier);\r\n                        details.onSuccess(successParam);\r\n                    },\r\n                    function() {\r\n                        if (details.onFailure) {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                            details.onFailure();\r\n                        }\r\n                        else {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            if (callbackRetVal !== false) {\r\n                details.onSuccess(callbackRetVal);\r\n            }\r\n            else {\r\n                if (details.onFailure) {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\r\n                    details.onFailure();\r\n                }\r\n                else {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\r\n                }\r\n            }\r\n\r\n            return callbackRetVal;\r\n        },\r\n\r\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\r\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\r\n            var self = this,\r\n                uuid = qq.getUniqueId(),\r\n                size = -1,\r\n                name = qq.getFilename(file),\r\n                actualFile = file.blob || file,\r\n                handler = this._customNewFileHandler ?\r\n                    this._customNewFileHandler :\r\n                    qq.bind(self._handleNewFileGeneric, self);\r\n\r\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\r\n                size = actualFile.size;\r\n            }\r\n\r\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\r\n                uploadData: self._uploadData,\r\n                paramsStore: self._paramsStore,\r\n                addFileToHandler: function(id, file) {\r\n                    self._handler.add(id, file);\r\n                    self._netUploadedOrQueued++;\r\n                    self._trackButton(id);\r\n                }\r\n            });\r\n        },\r\n\r\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\r\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\r\n\r\n            this._handler.add(id, file);\r\n            this._trackButton(id);\r\n\r\n            this._netUploadedOrQueued++;\r\n\r\n            fileList.push({id: id, file: file});\r\n        },\r\n\r\n        _handlePasteSuccess: function(blob, extSuppliedName) {\r\n            var extension = blob.type.split(\"/\")[1],\r\n                name = extSuppliedName;\r\n\r\n            /*jshint eqeqeq: true, eqnull: true*/\r\n            if (name == null) {\r\n                name = this._options.paste.defaultName;\r\n            }\r\n\r\n            name += \".\" + extension;\r\n\r\n            this.addFiles({\r\n                name: name,\r\n                blob: blob\r\n            });\r\n        },\r\n\r\n        _handleDeleteSuccess: function(id) {\r\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\r\n                var name = this.getName(id);\r\n\r\n                this._netUploadedOrQueued--;\r\n                this._netUploaded--;\r\n                this._handler.expunge(id);\r\n                this._uploadData.setStatus(id, qq.status.DELETED);\r\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\r\n            }\r\n        },\r\n\r\n        _handleDeleteFailed: function(id, xhrOrXdr) {\r\n            var name = this.getName(id);\r\n\r\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\r\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\r\n\r\n            // Check first if xhrOrXdr is actually passed or valid\r\n            // For error reporting, we only have access to the response status if this is not\r\n            // an `XDomainRequest`.\r\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\r\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\r\n            }\r\n            else {\r\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\r\n            }\r\n        },\r\n\r\n        // Creates an extra button element\r\n        _initExtraButton: function(spec) {\r\n            var button = this._createUploadButton({\r\n                accept: spec.validation.acceptFiles,\r\n                allowedExtensions: spec.validation.allowedExtensions,\r\n                element: spec.element,\r\n                folders: spec.folders,\r\n                multiple: spec.multiple,\r\n                title: spec.fileInputTitle\r\n            });\r\n\r\n            this._extraButtonSpecs[button.getButtonId()] = spec;\r\n        },\r\n\r\n        _initFormSupportAndParams: function() {\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n            );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore = this._createStore(\r\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\r\n                );\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\r\n                }\r\n            }\r\n            else {\r\n                this._paramsStore = this._createStore(this._options.request.params);\r\n            }\r\n        },\r\n\r\n        _isDeletePossible: function() {\r\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (this._options.cors.expected) {\r\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\r\n                    return true;\r\n                }\r\n\r\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _isAllowedExtension: function(allowed, fileName) {\r\n            var valid = false;\r\n\r\n            if (!allowed.length) {\r\n                return true;\r\n            }\r\n\r\n            qq.each(allowed, function(idx, allowedExt) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExt)) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\r\n\r\n                    if (fileName.match(extRegex) != null) {\r\n                        valid = true;\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return valid;\r\n        },\r\n\r\n        /**\r\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\r\n         *\r\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\r\n         * @param maybeNameOrNames names of the items that have failed, if applicable\r\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\r\n         * @private\r\n         */\r\n        _itemError: function(code, maybeNameOrNames, item) {\r\n            var message = this._options.messages[code],\r\n                allowedExtensions = [],\r\n                names = [].concat(maybeNameOrNames),\r\n                name = names[0],\r\n                buttonId = this._getButtonId(item),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                extensionsForMessage, placeholderMatch;\r\n\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExtension)) {\r\n                    allowedExtensions.push(allowedExtension);\r\n                }\r\n            });\r\n\r\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\r\n\r\n            r(\"{file}\", this._options.formatFileName(name));\r\n            r(\"{extensions}\", extensionsForMessage);\r\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\r\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\r\n\r\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\r\n            if (placeholderMatch !== null) {\r\n                qq.each(placeholderMatch, function(idx, placeholder) {\r\n                    r(placeholder, names[idx]);\r\n                });\r\n            }\r\n\r\n            this._options.callbacks.onError(null, name, message, undefined);\r\n\r\n            return message;\r\n        },\r\n\r\n        /**\r\n         * Conditionally orders a manual retry of a failed upload.\r\n         *\r\n         * @param id File ID of the failed upload\r\n         * @param callback Optional callback to invoke if a retry is prudent.\r\n         * In lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if a manual retry will occur\r\n         * @private\r\n         */\r\n        _manualRetry: function(id, callback) {\r\n            if (this._onBeforeManualRetry(id)) {\r\n                this._netUploadedOrQueued++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n\r\n                if (callback) {\r\n                    callback(id);\r\n                }\r\n                else {\r\n                    this._handler.retry(id);\r\n                }\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _maybeAllComplete: function(id, status) {\r\n            var self = this,\r\n                notFinished = this._getNotFinished();\r\n\r\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\r\n                this._succeededSinceLastAllComplete.push(id);\r\n            }\r\n            else if (status === qq.status.UPLOAD_FAILED) {\r\n                this._failedSinceLastAllComplete.push(id);\r\n            }\r\n\r\n            if (notFinished === 0 &&\r\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\r\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\r\n                setTimeout(function() {\r\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _maybeHandleIos8SafariWorkaround: function() {\r\n            var self = this;\r\n\r\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\r\n                setTimeout(function() {\r\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\r\n                }, 0);\r\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\r\n            }\r\n        },\r\n\r\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\r\n            // Assuming no one will actually set the response code to something other than 200\r\n            // and still set 'success' to true...\r\n            if (!response.success) {\r\n                if (xhr && xhr.status !== 200 && !response.error) {\r\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\r\n                }\r\n                else {\r\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\r\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\r\n            var self = this;\r\n\r\n            if (items.length > index) {\r\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\r\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\r\n                    setTimeout(function() {\r\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\r\n                            buttonId = self._getButtonId(items[index].file),\r\n                            button = self._getButton(buttonId);\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onValidate\",\r\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\r\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\r\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\r\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\r\n                        });\r\n                    }, 0);\r\n                }\r\n                else if (!validItem) {\r\n                    for (; index < items.length; index++) {\r\n                        self._fileOrBlobRejected(items[index].id);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\r\n\r\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n        },\r\n\r\n        /**\r\n         * Attempt to automatically retry a failed upload.\r\n         *\r\n         * @param id The file ID of the failed upload\r\n         * @param name The name of the file associated with the failed upload\r\n         * @param responseJSON Response from the server, parsed into a javascript object\r\n         * @param xhr Ajax transport used to send the failed request\r\n         * @param callback Optional callback to be invoked if a retry is prudent.\r\n         * Invoked in lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if an auto-retry will occur\r\n         * @private\r\n         */\r\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\r\n            var self = this;\r\n\r\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\r\n\r\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\r\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\r\n\r\n                self._maybeParseAndSendUploadError.apply(self, arguments);\r\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\r\n                self._onBeforeAutoRetry(id, name);\r\n\r\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n                self._retryTimeouts[id] = setTimeout(function() {\r\n                    self.log(\"Starting retry for \" + name + \"...\");\r\n\r\n                    if (callback) {\r\n                        callback(id);\r\n                    }\r\n                    else {\r\n                        self._handler.retry(id);\r\n                    }\r\n                }, retryWaitPeriod);\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id, name) {\r\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            var itemLimit = this._currentItemLimit,\r\n                fileName;\r\n\r\n            if (this._preventRetries[id]) {\r\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\r\n                return false;\r\n            }\r\n            else if (this._handler.isValid(id)) {\r\n                fileName = this.getName(id);\r\n\r\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\r\n                    return false;\r\n                }\r\n\r\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\r\n                    this._itemError(\"retryFailTooManyItems\");\r\n                    return false;\r\n                }\r\n\r\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._netUploadedOrQueued--;\r\n\r\n            clearTimeout(this._retryTimeouts[id]);\r\n\r\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\r\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\r\n                this._storedIds.splice(storedItemIndex, 1);\r\n            }\r\n\r\n            this._uploadData.setStatus(id, qq.status.CANCELED);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            if (!result.success) {\r\n                this._netUploadedOrQueued--;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\r\n\r\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\r\n                    this._preventRetries[id] = true;\r\n                }\r\n            }\r\n            else {\r\n                if (result.thumbnailUrl) {\r\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\r\n                }\r\n\r\n                this._netUploaded++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\r\n            }\r\n\r\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\r\n\r\n            return result.success ? true : false;\r\n        },\r\n\r\n        _onDelete: function(id) {\r\n            this._uploadData.setStatus(id, qq.status.DELETING);\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n            var name = this.getName(id);\r\n\r\n            if (isError) {\r\n                this._handleDeleteFailed(id, xhrOrXdr);\r\n            }\r\n            else {\r\n                this._handleDeleteSuccess(id);\r\n            }\r\n        },\r\n\r\n        _onInputChange: function(input) {\r\n            var fileIndex;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\r\n                    this._annotateWithButtonId(input.files[fileIndex], input);\r\n                }\r\n\r\n                this.addFiles(input.files);\r\n            }\r\n            // Android 2.3.x will fire `onchange` even if no file has been selected\r\n            else if (input.value.length > 0) {\r\n                this.addFiles(input);\r\n            }\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n        },\r\n\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            //nothing to do yet in core uploader\r\n        },\r\n\r\n        _onSubmitCallbackSuccess: function(id, name) {\r\n            this._onSubmit.apply(this, arguments);\r\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\r\n            this._onSubmitted.apply(this, arguments);\r\n\r\n            if (this._options.autoUpload) {\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n                this._uploadFile(id);\r\n            }\r\n            else {\r\n                this._storeForLater(id);\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\r\n            var uuid = this.getUuid(id),\r\n                adjustedOnSuccessCallback;\r\n\r\n            if (onSuccessCallback) {\r\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\r\n            }\r\n\r\n            if (this._isDeletePossible()) {\r\n                this._handleCheckedCallback({\r\n                    name: \"onSubmitDelete\",\r\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\r\n                    onSuccess: adjustedOnSuccessCallback ||\r\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\r\n                    identifier: id\r\n                });\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\r\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitted: function(id) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._options.callbacks.onTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            // nothing to do in the core uploader for now\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\r\n            if (newStatus === qq.status.PAUSED) {\r\n                clearTimeout(this._retryTimeouts[id]);\r\n            }\r\n        },\r\n\r\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\r\n            var self = this;\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                self._fileOrBlobRejected(fileWrapper.id);\r\n            });\r\n        },\r\n\r\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\r\n            var errorMessage,\r\n                itemLimit = this._currentItemLimit,\r\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\r\n\r\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\r\n                if (items.length > 0) {\r\n                    this._handleCheckedCallback({\r\n                        name: \"onValidate\",\r\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\r\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\r\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\r\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\r\n                    });\r\n                }\r\n                else {\r\n                    this._itemError(\"noFilesError\");\r\n                }\r\n            }\r\n            else {\r\n                this._onValidateBatchCallbackFailure(items);\r\n                errorMessage = this._options.messages.tooManyItemsError\r\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\r\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\r\n                this._batchError(errorMessage);\r\n            }\r\n        },\r\n\r\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\r\n            var nextIndex = index + 1;\r\n\r\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\r\n\r\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n        },\r\n\r\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\r\n            var self = this,\r\n                nextIndex = index + 1,\r\n                validationDescriptor = this._getValidationDescriptor(items[index]);\r\n\r\n            this._validateFileOrBlobData(items[index], validationDescriptor)\r\n                .then(\r\n                function() {\r\n                    self._upload(items[index].id, params, endpoint);\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\r\n                },\r\n                function() {\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n                }\r\n            );\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            if (items.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n                return;\r\n            }\r\n\r\n            var validationDescriptors = this._getValidationDescriptors(items),\r\n                buttonId = this._getButtonId(items[0].file),\r\n                button = this._getButton(buttonId);\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onValidateBatch\",\r\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\r\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\r\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\r\n                identifier: \"batch validation\"\r\n            });\r\n        },\r\n\r\n        _preventLeaveInProgress: function() {\r\n            var self = this;\r\n\r\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\r\n                if (self.getInProgress()) {\r\n                    e = e || window.event;\r\n                    // for ie, ff\r\n                    e.returnValue = self._options.messages.onLeave;\r\n                    // for webkit\r\n                    return self._options.messages.onLeave;\r\n                }\r\n            });\r\n        },\r\n\r\n        // Attempts to refresh session data only if the `qq.Session` module exists\r\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\r\n        // callback will be invoked once the refresh is complete.\r\n        _refreshSessionData: function() {\r\n            var self = this,\r\n                options = this._options.session;\r\n\r\n            /* jshint eqnull:true */\r\n            if (qq.Session && this._options.session.endpoint != null) {\r\n                if (!this._session) {\r\n                    qq.extend(options, {cors: this._options.cors});\r\n\r\n                    options.log = qq.bind(this.log, this);\r\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\r\n\r\n                    this._session = new qq.Session(options);\r\n                }\r\n\r\n                setTimeout(function() {\r\n                    self._session.refresh().then(function(response, xhrOrXdr) {\r\n                        self._sessionRequestComplete();\r\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\r\n\r\n                    }, function(response, xhrOrXdr) {\r\n\r\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\r\n                    });\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _sessionRequestComplete: function() {},\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._uploadData.updateSize(id, newSize);\r\n            this._totalProgress && this._totalProgress.onNewSize(id);\r\n        },\r\n\r\n        _shouldAutoRetry: function(id, name, responseJSON) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            /*jshint laxbreak: true */\r\n            if (!this._preventRetries[id]\r\n                && this._options.retry.enableAuto\r\n                && uploadData.status !== qq.status.PAUSED) {\r\n\r\n                if (this._autoRetries[id] === undefined) {\r\n                    this._autoRetries[id] = 0;\r\n                }\r\n\r\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\r\n                    this._autoRetries[id] += 1;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._storedIds.push(id);\r\n        },\r\n\r\n        // Maps a file with the button that was used to select it.\r\n        _trackButton: function(id) {\r\n            var buttonId;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                buttonId = this._handler.getFile(id).qqButtonId;\r\n            }\r\n            else {\r\n                buttonId = this._getButtonId(this._handler.getInput(id));\r\n            }\r\n\r\n            if (buttonId) {\r\n                this._buttonIdsForFileIds[id] = buttonId;\r\n            }\r\n        },\r\n\r\n        _updateFormSupportAndParams: function(formElementOrId) {\r\n            this._options.form.element = formElementOrId;\r\n\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n                );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this.setEndpoint(this._formSupport.newEndpoint);\r\n                }\r\n            }\r\n        },\r\n\r\n        _upload: function(id, params, endpoint) {\r\n            var name = this.getName(id);\r\n\r\n            if (params) {\r\n                this.setParams(params, id);\r\n            }\r\n\r\n            if (endpoint) {\r\n                this.setEndpoint(endpoint, id);\r\n            }\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onSubmit\",\r\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\r\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\r\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\r\n                identifier: id\r\n            });\r\n        },\r\n\r\n        _uploadFile: function(id) {\r\n            if (!this._handler.upload(id)) {\r\n                this._uploadData.setStatus(id, qq.status.QUEUED);\r\n            }\r\n        },\r\n\r\n        _uploadStoredFiles: function() {\r\n            var idToUpload, stillSubmitting,\r\n                self = this;\r\n\r\n            while (this._storedIds.length) {\r\n                idToUpload = this._storedIds.shift();\r\n                this._uploadFile(idToUpload);\r\n            }\r\n\r\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\r\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\r\n            if (stillSubmitting) {\r\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\r\n                setTimeout(function() {\r\n                    self._uploadStoredFiles();\r\n                }, 1000);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs some internal validation checks on an item, defined in the `validation` option.\r\n         *\r\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\r\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\r\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\r\n         * @private\r\n         */\r\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\r\n            var self = this,\r\n                file = (function() {\r\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                        return fileWrapper.file.referenceBlob;\r\n                    }\r\n                    return fileWrapper.file;\r\n                }()),\r\n                name = validationDescriptor.name,\r\n                size = validationDescriptor.size,\r\n                buttonId = this._getButtonId(fileWrapper.file),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                validityChecker = new qq.Promise();\r\n\r\n            validityChecker.then(\r\n                function() {},\r\n                function() {\r\n                    self._fileOrBlobRejected(fileWrapper.id, name);\r\n                });\r\n\r\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\r\n                this._itemError(\"typeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (!this._options.validation.allowEmpty && size === 0) {\r\n                this._itemError(\"emptyError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\r\n                this._itemError(\"sizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && size < validationBase.minSizeLimit) {\r\n                this._itemError(\"minSizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\r\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\r\n                    validityChecker.success,\r\n                    function(errorCode) {\r\n                        self._itemError(errorCode + \"ImageError\", name, file);\r\n                        validityChecker.failure();\r\n                    }\r\n                );\r\n            }\r\n            else {\r\n                validityChecker.success();\r\n            }\r\n\r\n            return validityChecker;\r\n        },\r\n\r\n        _wrapCallbacks: function() {\r\n            var self, safeCallback, prop;\r\n\r\n            self = this;\r\n\r\n            safeCallback = function(name, callback, args) {\r\n                var errorMsg;\r\n\r\n                try {\r\n                    return callback.apply(self, args);\r\n                }\r\n                catch (exception) {\r\n                    errorMsg = exception.message || exception.toString();\r\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\r\n                }\r\n            };\r\n\r\n            /* jshint forin: false, loopfunc: true */\r\n            for (prop in this._options.callbacks) {\r\n                (function() {\r\n                    var callbackName, callbackFunc;\r\n                    callbackName = prop;\r\n                    callbackFunc = self._options.callbacks[callbackName];\r\n                    self._options.callbacks[callbackName] = function() {\r\n                        return safeCallback(callbackName, callbackFunc, arguments);\r\n                    };\r\n                }());\r\n            }\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.FineUploaderBasic = function(o) {\r\n        var self = this;\r\n\r\n        // These options define FineUploaderBasic mode.\r\n        this._options = {\r\n            debug: false,\r\n            button: null,\r\n            multiple: true,\r\n            maxConnections: 3,\r\n            disableCancelForFormUploads: false,\r\n            autoUpload: true,\r\n\r\n            request: {\r\n                customHeaders: {},\r\n                endpoint: \"/server/upload\",\r\n                filenameParam: \"qqfilename\",\r\n                forceMultipart: true,\r\n                inputName: \"qqfile\",\r\n                method: \"POST\",\r\n                params: {},\r\n                paramsInBody: true,\r\n                totalFileSizeName: \"qqtotalfilesize\",\r\n                uuidName: \"qquuid\"\r\n            },\r\n\r\n            validation: {\r\n                allowedExtensions: [],\r\n                sizeLimit: 0,\r\n                minSizeLimit: 0,\r\n                itemLimit: 0,\r\n                stopOnFirstInvalidFile: true,\r\n                acceptFiles: null,\r\n                image: {\r\n                    maxHeight: 0,\r\n                    maxWidth: 0,\r\n                    minHeight: 0,\r\n                    minWidth: 0\r\n                },\r\n                allowEmpty: false\r\n            },\r\n\r\n            callbacks: {\r\n                onSubmit: function(id, name) {},\r\n                onSubmitted: function(id, name) {},\r\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\r\n                onAllComplete: function(successful, failed) {},\r\n                onCancel: function(id, name) {},\r\n                onUpload: function(id, name) {},\r\n                onUploadChunk: function(id, name, chunkData) {},\r\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\r\n                onResume: function(id, fileName, chunkData) {},\r\n                onProgress: function(id, name, loaded, total) {},\r\n                onTotalProgress: function(loaded, total) {},\r\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\r\n                onAutoRetry: function(id, name, attemptNumber) {},\r\n                onManualRetry: function(id, name) {},\r\n                onValidateBatch: function(fileOrBlobData) {},\r\n                onValidate: function(fileOrBlobData) {},\r\n                onSubmitDelete: function(id) {},\r\n                onDelete: function(id) {},\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\r\n                onPasteReceived: function(blob) {},\r\n                onStatusChange: function(id, oldStatus, newStatus) {},\r\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\r\n            },\r\n\r\n            messages: {\r\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\r\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\r\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\r\n                emptyError: \"{file} is empty, please select files again without it.\",\r\n                noFilesError: \"No files to upload.\",\r\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\r\n                maxHeightImageError: \"Image is too tall.\",\r\n                maxWidthImageError: \"Image is too wide.\",\r\n                minHeightImageError: \"Image is not tall enough.\",\r\n                minWidthImageError: \"Image is not wide enough.\",\r\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\r\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\r\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\r\n            },\r\n\r\n            retry: {\r\n                enableAuto: false,\r\n                maxAutoAttempts: 3,\r\n                autoAttemptDelay: 5,\r\n                preventRetryResponseProperty: \"preventRetry\"\r\n            },\r\n\r\n            classes: {\r\n                buttonHover: \"qq-upload-button-hover\",\r\n                buttonFocus: \"qq-upload-button-focus\"\r\n            },\r\n\r\n            chunking: {\r\n                enabled: false,\r\n                concurrent: {\r\n                    enabled: false\r\n                },\r\n                mandatory: false,\r\n                paramNames: {\r\n                    partIndex: \"qqpartindex\",\r\n                    partByteOffset: \"qqpartbyteoffset\",\r\n                    chunkSize: \"qqchunksize\",\r\n                    totalFileSize: \"qqtotalfilesize\",\r\n                    totalParts: \"qqtotalparts\"\r\n                },\r\n                partSize: 2000000,\r\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\r\n                success: {\r\n                    endpoint: null\r\n                }\r\n            },\r\n\r\n            resume: {\r\n                enabled: false,\r\n                recordsExpireIn: 7, //days\r\n                paramNames: {\r\n                    resuming: \"qqresume\"\r\n                }\r\n            },\r\n\r\n            formatFileName: function(fileOrBlobName) {\r\n                return fileOrBlobName;\r\n            },\r\n\r\n            text: {\r\n                defaultResponseError: \"Upload failure reason unknown\",\r\n                fileInputTitle: \"file input\",\r\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\r\n            },\r\n\r\n            deleteFile: {\r\n                enabled: false,\r\n                method: \"DELETE\",\r\n                endpoint: \"/server/upload\",\r\n                customHeaders: {},\r\n                params: {}\r\n            },\r\n\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false,\r\n                allowXdr: false\r\n            },\r\n\r\n            blobs: {\r\n                defaultName: \"misc_data\"\r\n            },\r\n\r\n            paste: {\r\n                targetElement: null,\r\n                defaultName: \"pasted_image\"\r\n            },\r\n\r\n            camera: {\r\n                ios: false,\r\n\r\n                // if ios is true: button is null means target the default button, otherwise target the button specified\r\n                button: null\r\n            },\r\n\r\n            // This refers to additional upload buttons to be handled by Fine Uploader.\r\n            // Each element is an object, containing `element` as the only required\r\n            // property.  The `element` must be a container that will ultimately\r\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\r\n            // Optional properties of each object include `multiple`, `validation`,\r\n            // and `folders`.\r\n            extraButtons: [],\r\n\r\n            // Depends on the session module.  Used to query the server for an initial file list\r\n            // during initialization and optionally after a `reset`.\r\n            session: {\r\n                endpoint: null,\r\n                params: {},\r\n                customHeaders: {},\r\n                refreshOnReset: true\r\n            },\r\n\r\n            // Send parameters associated with an existing form along with the files\r\n            form: {\r\n                // Element ID, HTMLElement, or null\r\n                element: \"qq-form\",\r\n\r\n                // Overrides the base `autoUpload`, unless `element` is null.\r\n                autoUpload: false,\r\n\r\n                // true = upload files on form submission (and squelch submit event)\r\n                interceptSubmit: true\r\n            },\r\n\r\n            // scale images client side, upload a new file for each scaled version\r\n            scaling: {\r\n                customResizer: null,\r\n\r\n                // send the original file as well\r\n                sendOriginal: true,\r\n\r\n                // fox orientation for scaled images\r\n                orient: true,\r\n\r\n                // If null, scaled image type will match reference image type.  This value will be referred to\r\n                // for any size record that does not specific a type.\r\n                defaultType: null,\r\n\r\n                defaultQuality: 80,\r\n\r\n                failureText: \"Failed to scale\",\r\n\r\n                includeExif: false,\r\n\r\n                // metadata about each requested scaled version\r\n                sizes: []\r\n            },\r\n\r\n            workarounds: {\r\n                iosEmptyVideos: true,\r\n                ios8SafariUploads: true,\r\n                ios8BrowserCrash: false\r\n            }\r\n        };\r\n\r\n        // Replace any default options with user defined ones\r\n        qq.extend(this._options, o, true);\r\n\r\n        this._buttons = [];\r\n        this._extraButtonSpecs = {};\r\n        this._buttonIdsForFileIds = [];\r\n\r\n        this._wrapCallbacks();\r\n        this._disposeSupport =  new qq.DisposeSupport();\r\n\r\n        this._storedIds = [];\r\n        this._autoRetries = [];\r\n        this._retryTimeouts = [];\r\n        this._preventRetries = [];\r\n        this._thumbnailUrls = [];\r\n\r\n        this._netUploadedOrQueued = 0;\r\n        this._netUploaded = 0;\r\n        this._uploadData = this._createUploadDataTracker();\r\n\r\n        this._initFormSupportAndParams();\r\n\r\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\r\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\r\n\r\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\r\n\r\n        this._endpointStore = this._createStore(this._options.request.endpoint);\r\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\r\n\r\n        this._handler = this._createUploadHandler();\r\n\r\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\r\n\r\n        if (this._options.button) {\r\n            this._defaultButtonId = this._createUploadButton({\r\n                element: this._options.button,\r\n                title: this._options.text.fileInputTitle\r\n            }).getButtonId();\r\n        }\r\n\r\n        this._generateExtraButtonSpecs();\r\n\r\n        this._handleCameraAccess();\r\n\r\n        if (this._options.paste.targetElement) {\r\n            if (qq.PasteSupport) {\r\n                this._pasteHandler = this._createPasteHandler();\r\n            }\r\n            else {\r\n                this.log(\"Paste support module not found\", \"error\");\r\n            }\r\n        }\r\n\r\n        this._preventLeaveInProgress();\r\n\r\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\r\n        this._refreshSessionData();\r\n\r\n        this._succeededSinceLastAllComplete = [];\r\n        this._failedSinceLastAllComplete = [];\r\n\r\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\r\n        if (this._scaler.enabled) {\r\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\r\n        }\r\n\r\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\r\n            this._totalProgress = new qq.TotalProgress(\r\n                qq.bind(this._onTotalProgress, this),\r\n\r\n                function(id) {\r\n                    var entry = self._uploadData.retrieve({id: id});\r\n                    return (entry && entry.size) || 0;\r\n                }\r\n            );\r\n        }\r\n\r\n        this._currentItemLimit = this._options.validation.itemLimit;\r\n    };\r\n\r\n    // Define the private & public API methods.\r\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\r\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\r\n}());\r\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\r\n/**\r\n * Base upload handler module.  Controls more specific handlers.\r\n *\r\n * @param o Options.  Passed along to the specific handler submodule as well.\r\n * @param namespace [optional] Namespace for the specific handler.\r\n */\r\nqq.UploadHandlerController = function(o, namespace) {\r\n    \"use strict\";\r\n\r\n    var controller = this,\r\n        chunkingPossible = false,\r\n        concurrentChunkingPossible = false,\r\n        chunking, preventRetryResponse, log, handler,\r\n\r\n    options = {\r\n        paramsStore: {},\r\n        maxConnections: 3, // maximum number of concurrent uploads\r\n        chunking: {\r\n            enabled: false,\r\n            multiple: {\r\n                enabled: false\r\n            }\r\n        },\r\n        log: function(str, level) {},\r\n        onProgress: function(id, fileName, loaded, total) {},\r\n        onComplete: function(id, fileName, response, xhr) {},\r\n        onCancel: function(id, fileName) {},\r\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\r\n        onUpload: function(id, fileName) {},\r\n        onUploadChunk: function(id, fileName, chunkData) {},\r\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\r\n        onAutoRetry: function(id, fileName, response, xhr) {},\r\n        onResume: function(id, fileName, chunkData) {},\r\n        onUuidChanged: function(id, newUuid) {},\r\n        getName: function(id) {},\r\n        setSize: function(id, newSize) {},\r\n        isQueued: function(id) {},\r\n        getIdsInProxyGroup: function(id) {},\r\n        getIdsInBatch: function(id) {}\r\n    },\r\n\r\n    chunked = {\r\n        // Called when each chunk has uploaded successfully\r\n        done: function(id, chunkIdx, response, xhr) {\r\n            var chunkData = handler._getChunkData(id, chunkIdx);\r\n\r\n            handler._getFileState(id).attemptingResume = false;\r\n\r\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\r\n            handler._getFileState(id).loaded += chunkData.size;\r\n\r\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\r\n        },\r\n\r\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\r\n        // logic associated with closing out the file, such as combining the chunks.\r\n        finalize: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id);\r\n\r\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\r\n            handler.finalizeChunks(id).then(\r\n                function(response, xhr) {\r\n                    log(\"Finalize successful for \" + id);\r\n\r\n                    var normaizedResponse = upload.normalizeResponse(response, true);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    handler._maybeDeletePersistedChunkData(id);\r\n                    upload.cleanup(id, normaizedResponse, xhr);\r\n                },\r\n                function(response, xhr) {\r\n                    var normaizedResponse = upload.normalizeResponse(response, false);\r\n\r\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\r\n\r\n                    if (normaizedResponse.reset) {\r\n                        chunked.reset(id);\r\n                    }\r\n\r\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\r\n                        upload.cleanup(id, normaizedResponse, xhr);\r\n                    }\r\n                }\r\n            );\r\n        },\r\n\r\n        handleFailure: function(chunkIdx, id, response, xhr) {\r\n            var name = options.getName(id);\r\n\r\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\r\n\r\n            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n            var responseToReport = upload.normalizeResponse(response, false),\r\n                inProgressIdx;\r\n\r\n            if (responseToReport.reset) {\r\n                chunked.reset(id);\r\n            }\r\n            else {\r\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\r\n                if (inProgressIdx >= 0) {\r\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\r\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\r\n                }\r\n            }\r\n\r\n            // We may have aborted all other in-progress chunks for this file due to a failure.\r\n            // If so, ignore the failures associated with those aborts.\r\n            if (!handler._getFileState(id).temp.ignoreFailure) {\r\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\r\n                // chunks since they will be explicitly aborted\r\n                if (concurrentChunkingPossible) {\r\n                    handler._getFileState(id).temp.ignoreFailure = true;\r\n\r\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\r\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\r\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\r\n                        ckXhr.abort();\r\n                        // Flag the transport, in case we are waiting for some other async operation\r\n                        // to complete before attempting to upload the chunk\r\n                        ckXhr._cancelled = true;\r\n                    });\r\n\r\n                    // We must indicate that all aborted chunks are no longer in progress\r\n                    handler.moveInProgressToRemaining(id);\r\n\r\n                    // Free up any connections used by these chunks, but don't allow any\r\n                    // other files to take up the connections (until we have exhausted all auto-retries)\r\n                    connectionManager.free(id, true);\r\n                }\r\n\r\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\r\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\r\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\r\n                    // is a failure or not.\r\n                    upload.cleanup(id, responseToReport, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        hasMoreParts: function(id) {\r\n            return !!handler._getFileState(id).chunking.remaining.length;\r\n        },\r\n\r\n        nextPart: function(id) {\r\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\r\n\r\n            if (nextIdx >= handler._getTotalChunks(id)) {\r\n                nextIdx = null;\r\n            }\r\n\r\n            return nextIdx;\r\n        },\r\n\r\n        reset: function(id) {\r\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\r\n\r\n            handler._maybeDeletePersistedChunkData(id);\r\n            handler.reevaluateChunking(id);\r\n            handler._getFileState(id).loaded = 0;\r\n        },\r\n\r\n        sendNext: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id),\r\n                chunkIdx = chunked.nextPart(id),\r\n                chunkData = handler._getChunkData(id, chunkIdx),\r\n                resuming = handler._getFileState(id).attemptingResume,\r\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\r\n\r\n            if (handler._getFileState(id).loaded == null) {\r\n                handler._getFileState(id).loaded = 0;\r\n            }\r\n\r\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\r\n            if (resuming && options.onResume(id, name, chunkData) === false) {\r\n                chunked.reset(id);\r\n                chunkIdx = chunked.nextPart(id);\r\n                chunkData = handler._getChunkData(id, chunkIdx);\r\n                resuming = false;\r\n            }\r\n\r\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\r\n            if (chunkIdx == null && inProgressChunks.length === 0) {\r\n                chunked.finalize(id);\r\n            }\r\n\r\n            // Send the next chunk\r\n            else {\r\n                log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\r\n                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\r\n                inProgressChunks.push(chunkIdx);\r\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\r\n\r\n                if (concurrentChunkingPossible) {\r\n                    connectionManager.open(id, chunkIdx);\r\n                }\r\n\r\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\r\n                    chunked.sendNext(id);\r\n                }\r\n\r\n                if (chunkData.blob.size === 0) {\r\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\r\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\r\n                }\r\n                else {\r\n                    handler.uploadChunk(id, chunkIdx, resuming).then(\r\n                        // upload chunk success\r\n                        function success(response, xhr) {\r\n                            log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\r\n\r\n                            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n                            var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\r\n                                responseToReport = upload.normalizeResponse(response, true),\r\n                                inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\r\n\r\n                            log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\r\n\r\n                            chunked.done(id, chunkIdx, responseToReport, xhr);\r\n\r\n                            if (inProgressChunkIdx >= 0) {\r\n                                inProgressChunks.splice(inProgressChunkIdx, 1);\r\n                            }\r\n\r\n                            handler._maybePersistChunkedState(id);\r\n\r\n                            if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\r\n                                chunked.finalize(id);\r\n                            }\r\n                            else if (chunked.hasMoreParts(id)) {\r\n                                chunked.sendNext(id);\r\n                            }\r\n                            else {\r\n                                log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\r\n                            }\r\n                        },\r\n\r\n                        // upload chunk failure\r\n                        function failure(response, xhr) {\r\n                            chunked.handleFailure(chunkIdx, id, response, xhr);\r\n                        }\r\n                        )\r\n                        .done(function() {\r\n                            handler.clearXhr(id, chunkIdx);\r\n                        });\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    connectionManager = {\r\n        _open: [],\r\n        _openChunks: {},\r\n        _waiting: [],\r\n\r\n        available: function() {\r\n            var max = options.maxConnections,\r\n                openChunkEntriesCount = 0,\r\n                openChunksCount = 0;\r\n\r\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\r\n                openChunkEntriesCount++;\r\n                openChunksCount += openChunkIndexes.length;\r\n            });\r\n\r\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\r\n        },\r\n\r\n        /**\r\n         * Removes element from queue, starts upload of next\r\n         */\r\n        free: function(id, dontAllowNext) {\r\n            var allowNext = !dontAllowNext,\r\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\r\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\r\n                nextId;\r\n\r\n            delete connectionManager._openChunks[id];\r\n\r\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\r\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\r\n                delete handler._getFileState(id).file;\r\n            }\r\n\r\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\r\n            if (waitingIndex >= 0) {\r\n                connectionManager._waiting.splice(waitingIndex, 1);\r\n            }\r\n            // If this file was consuming a connection, allow the next file to be uploaded\r\n            else if (allowNext && connectionsIndex >= 0) {\r\n                connectionManager._open.splice(connectionsIndex, 1);\r\n\r\n                nextId = connectionManager._waiting.shift();\r\n                if (nextId >= 0) {\r\n                    connectionManager._open.push(nextId);\r\n                    upload.start(nextId);\r\n                }\r\n            }\r\n        },\r\n\r\n        getWaitingOrConnected: function() {\r\n            var waitingOrConnected = [];\r\n\r\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\r\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\r\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\r\n                if (chunks && chunks.length) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // For non-chunked files, only one connection will be consumed per file.\r\n            // This is where we aggregate those file IDs.\r\n            qq.each(connectionManager._open, function(idx, fileId) {\r\n                if (!connectionManager._openChunks[fileId]) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // There may be files waiting for a connection.\r\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\r\n\r\n            return waitingOrConnected;\r\n        },\r\n\r\n        isUsingConnection: function(id) {\r\n            return qq.indexOf(connectionManager._open, id) >= 0;\r\n        },\r\n\r\n        open: function(id, chunkIdx) {\r\n            if (chunkIdx == null) {\r\n                var alreadyInWaiting = qq.indexOf(connectionManager._waiting, id);\r\n                var alreadyInOpen = qq.indexOf(connectionManager._open, id);\r\n                if (alreadyInWaiting === -1 && alreadyInOpen === -1) {\r\n                    connectionManager._waiting.push(id);\r\n                }\r\n            }\r\n\r\n            if (connectionManager.available()) {\r\n                if (chunkIdx == null) {\r\n                    connectionManager._waiting.pop();\r\n                    connectionManager._open.push(id);\r\n                }\r\n                else {\r\n                    (function() {\r\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\r\n                        openChunksEntry.push(chunkIdx);\r\n                        connectionManager._openChunks[id] = openChunksEntry;\r\n                    }());\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        reset: function() {\r\n            connectionManager._waiting = [];\r\n            connectionManager._open = [];\r\n        }\r\n    },\r\n\r\n    simple = {\r\n        send: function(id, name) {\r\n            handler._getFileState(id).loaded = 0;\r\n\r\n            log(\"Sending simple upload request for \" + id);\r\n            handler.uploadFile(id).then(\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request succeeded for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, true),\r\n                        size = options.getSize(id);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    upload.maybeNewUuid(id, responseToReport);\r\n                    upload.cleanup(id, responseToReport, optXhr);\r\n                },\r\n\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request failed for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, false);\r\n\r\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\r\n                        upload.cleanup(id, responseToReport, optXhr);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    },\r\n\r\n    upload = {\r\n        cancel: function(id) {\r\n            log(\"Cancelling \" + id);\r\n            options.paramsStore.remove(id);\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        cleanup: function(id, response, optXhr) {\r\n            var name = options.getName(id);\r\n\r\n            options.onComplete(id, name, response, optXhr);\r\n\r\n            if (handler._getFileState(id)) {\r\n                handler._clearXhrs && handler._clearXhrs(id);\r\n            }\r\n\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\r\n        // if none of these are available for the ID\r\n        getProxyOrBlob: function(id) {\r\n            return (handler.getProxy && handler.getProxy(id)) ||\r\n                (handler.getFile && handler.getFile(id));\r\n        },\r\n\r\n        initHandler: function() {\r\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\r\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\r\n\r\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\r\n                options,\r\n                {\r\n                    getDataByUuid: options.getDataByUuid,\r\n                    getName: options.getName,\r\n                    getSize: options.getSize,\r\n                    getUuid: options.getUuid,\r\n                    log: log,\r\n                    onCancel: options.onCancel,\r\n                    onProgress: options.onProgress,\r\n                    onUuidChanged: options.onUuidChanged\r\n                }\r\n            );\r\n\r\n            if (handler._removeExpiredChunkingRecords) {\r\n                handler._removeExpiredChunkingRecords();\r\n            }\r\n        },\r\n\r\n        isDeferredEligibleForUpload: function(id) {\r\n            return options.isQueued(id);\r\n        },\r\n\r\n        // For Blobs that are part of a group of generated images, along with a reference image,\r\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\r\n        // even if some async processing must be completed on one or more Blobs first.\r\n        maybeDefer: function(id, blob) {\r\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\r\n            // and then submit the upload to the specific handler once the blob is available.\r\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\r\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\r\n\r\n                // Blob creation may take some time, so the caller may want to update the\r\n                // UI to indicate that an operation is in progress, even before the actual\r\n                // upload begins and an onUpload callback is invoked.\r\n                options.onUploadPrep(id);\r\n\r\n                log(\"Attempting to generate a blob on-demand for \" + id);\r\n                blob.create().then(function(generatedBlob) {\r\n                    log(\"Generated an on-demand blob for \" + id);\r\n\r\n                    // Update record associated with this file by providing the generated Blob\r\n                    handler.updateBlob(id, generatedBlob);\r\n\r\n                    // Propagate the size for this generated Blob\r\n                    options.setSize(id, generatedBlob.size);\r\n\r\n                    // Order handler to recalculate chunking possibility, if applicable\r\n                    handler.reevaluateChunking(id);\r\n\r\n                    upload.maybeSendDeferredFiles(id);\r\n                },\r\n\r\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\r\n                function(errorMessage) {\r\n                    var errorResponse = {};\r\n\r\n                    if (errorMessage) {\r\n                        errorResponse.error = errorMessage;\r\n                    }\r\n\r\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\r\n\r\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\r\n                    upload.maybeSendDeferredFiles(id);\r\n                    connectionManager.free(id);\r\n                });\r\n            }\r\n            else {\r\n                return upload.maybeSendDeferredFiles(id);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\r\n        maybeSendDeferredFiles: function(id) {\r\n            var idsInGroup = options.getIdsInProxyGroup(id),\r\n                uploadedThisId = false;\r\n\r\n            if (idsInGroup && idsInGroup.length) {\r\n                log(\"Maybe ready to upload proxy group file \" + id);\r\n\r\n                qq.each(idsInGroup, function(idx, idInGroup) {\r\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\r\n                        uploadedThisId = idInGroup === id;\r\n                        upload.now(idInGroup);\r\n                    }\r\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                uploadedThisId = true;\r\n                upload.now(id);\r\n            }\r\n\r\n            return uploadedThisId;\r\n        },\r\n\r\n        maybeNewUuid: function(id, response) {\r\n            if (response.newUuid !== undefined) {\r\n                options.onUuidChanged(id, response.newUuid);\r\n            }\r\n        },\r\n\r\n        // The response coming from handler implementations may be in various formats.\r\n        // Instead of hoping a promise nested 5 levels deep will always return an object\r\n        // as its first param, let's just normalize the response here.\r\n        normalizeResponse: function(originalResponse, successful) {\r\n            var response = originalResponse;\r\n\r\n            // The passed \"response\" param may not be a response at all.\r\n            // It could be a string, detailing the error, for example.\r\n            if (!qq.isObject(originalResponse)) {\r\n                response = {};\r\n\r\n                if (qq.isString(originalResponse) && !successful) {\r\n                    response.error = originalResponse;\r\n                }\r\n            }\r\n\r\n            response.success = successful;\r\n\r\n            return response;\r\n        },\r\n\r\n        now: function(id) {\r\n            var name = options.getName(id);\r\n\r\n            if (!controller.isValid(id)) {\r\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\r\n            }\r\n\r\n            options.onUpload(id, name);\r\n\r\n            if (chunkingPossible && handler._shouldChunkThisFile(id)) {\r\n                chunked.sendNext(id);\r\n            }\r\n            else {\r\n                simple.send(id, name);\r\n            }\r\n        },\r\n\r\n        start: function(id) {\r\n            var blobToUpload = upload.getProxyOrBlob(id);\r\n\r\n            if (blobToUpload) {\r\n                return upload.maybeDefer(id, blobToUpload);\r\n            }\r\n            else {\r\n                upload.now(id);\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Adds file or file input to the queue\r\n         **/\r\n        add: function(id, file) {\r\n            handler.add.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Sends the file identified by id\r\n         */\r\n        upload: function(id) {\r\n            if (connectionManager.open(id)) {\r\n                return upload.start(id);\r\n            }\r\n            return false;\r\n        },\r\n\r\n        retry: function(id) {\r\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\r\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\r\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\r\n            // any more failures at this point.\r\n            if (concurrentChunkingPossible) {\r\n                handler._getFileState(id).temp.ignoreFailure = false;\r\n            }\r\n\r\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\r\n            // Just go ahead and ask the handler to upload again.\r\n            if (connectionManager.isUsingConnection(id)) {\r\n                return upload.start(id);\r\n            }\r\n\r\n            // If we are attempting to retry a file that is not currently consuming a connection,\r\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\r\n            // before the retry commences.\r\n            else {\r\n                return controller.upload(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels file upload by id\r\n         */\r\n        cancel: function(id) {\r\n            var cancelRetVal = handler.cancel(id);\r\n\r\n            if (qq.isGenericPromise(cancelRetVal)) {\r\n                cancelRetVal.then(function() {\r\n                    upload.cancel(id);\r\n                });\r\n            }\r\n            else if (cancelRetVal !== false) {\r\n                upload.cancel(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels all queued or in-progress uploads\r\n         */\r\n        cancelAll: function() {\r\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\r\n                i;\r\n\r\n            // ensure files are cancelled in reverse order which they were added\r\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\r\n            if (waitingOrConnected.length) {\r\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\r\n                    controller.cancel(waitingOrConnected[i]);\r\n                }\r\n            }\r\n\r\n            connectionManager.reset();\r\n        },\r\n\r\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\r\n        // Undefined if no file record is available.\r\n        getFile: function(id) {\r\n            if (handler.getProxy && handler.getProxy(id)) {\r\n                return handler.getProxy(id).referenceBlob;\r\n            }\r\n\r\n            return handler.getFile && handler.getFile(id);\r\n        },\r\n\r\n        // Returns true if the Blob associated with the ID is related to a proxy s\r\n        isProxied: function(id) {\r\n            return !!(handler.getProxy && handler.getProxy(id));\r\n        },\r\n\r\n        getInput: function(id) {\r\n            if (handler.getInput) {\r\n                return handler.getInput(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            log(\"Resetting upload handler\");\r\n            controller.cancelAll();\r\n            connectionManager.reset();\r\n            handler.reset();\r\n        },\r\n\r\n        expunge: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.expunge(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Determine if the file exists.\r\n         */\r\n        isValid: function(id) {\r\n            return handler.isValid(id);\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            if (handler.getResumableFilesData) {\r\n                return handler.getResumableFilesData();\r\n            }\r\n            return [];\r\n        },\r\n\r\n        /**\r\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\r\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\r\n         * will be undefined.\r\n         *\r\n         * @param id Internal file ID\r\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\r\n         */\r\n        getThirdPartyFileId: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.getThirdPartyFileId(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\r\n         * @param id ID of the upload/file to pause\r\n         * @returns {boolean} true if the upload was paused\r\n         */\r\n        pause: function(id) {\r\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\r\n                connectionManager.free(id);\r\n                handler.moveInProgressToRemaining(id);\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        // True if the file is eligible for pause/resume.\r\n        isResumable: function(id) {\r\n            return !!handler.isResumable && handler.isResumable(id);\r\n        }\r\n    });\r\n\r\n    qq.extend(options, o);\r\n    log = options.log;\r\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\r\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\r\n\r\n    preventRetryResponse = (function() {\r\n        var response = {};\r\n\r\n        response[options.preventRetryParam] = true;\r\n\r\n        return response;\r\n    }());\r\n\r\n    upload.initHandler();\r\n};\r\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id);\n\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now()\n                };\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*globals qq*/\n/**\n * Upload handler used that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to\n * a generic server.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log;\n\n    /**\n     * Returns json object received by iframe from server.\n     */\n    function getIframeContentJson(id, iframe) {\n        /*jshint evil: true*/\n\n        var response, doc, innerHtml;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            log(\"converting iframe's innerHTML to JSON\");\n            log(\"innerHTML = \" + innerHtml);\n            //plain text response may be wrapped in <pre> tag\n            if (innerHtml && innerHtml.match(/^<pre/i)) {\n                innerHtml = doc.body.firstChild.firstChild.nodeValue;\n            }\n\n            response = handler._parseJsonResponse(innerHtml);\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n            response = {success: false};\n        }\n\n        return response;\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var params = options.paramsStore.get(id),\n            method = options.method.toLowerCase() === \"get\" ? \"GET\" : \"POST\",\n            endpoint = options.endpointStore.get(id),\n            name = getName(id);\n\n        params[options.uuidName] = getUuid(id);\n        params[options.filenameParam] = name;\n\n        return handler._initFormForUpload({\n            method: method,\n            endpoint: endpoint,\n            params: params,\n            paramsInBody: options.paramsInBody,\n            targetName: iframe.name\n        });\n    }\n\n    this.uploadFile = function(id) {\n        var input = handler.getInput(id),\n            iframe = handler._createIframe(id),\n            promise = new qq.Promise(),\n            form;\n\n        form = createForm(id, iframe);\n        form.appendChild(input);\n\n        handler._attachLoadEvent(iframe, function(responseFromMessage) {\n            log(\"iframe loaded\");\n\n            var response = responseFromMessage ? responseFromMessage : getIframeContentJson(id, iframe);\n\n            handler._detachLoadEvent(id);\n\n            //we can't remove an iframe if the iframe doesn't belong to the same domain\n            if (!options.cors.expected) {\n                qq(iframe).remove();\n            }\n\n            if (response.success) {\n                promise.success(response);\n            }\n            else {\n                promise.failure(response);\n            }\n        });\n\n        log(\"Sending upload request for \" + id);\n        form.submit();\n        qq(form).remove();\n\n        return promise;\n    };\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: options.cors.expected,\n            inputName: options.inputName\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n};\n","/*globals qq*/\n/**\n * Upload handler used to upload to traditional endpoints.  It depends on File API support, and, therefore,\n * makes use of `XMLHttpRequest` level 2 to upload `File`s and `Blob`s to a generic server.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        multipart = spec.forceMultipart || spec.paramsInBody,\n\n        addChunkingSpecificParams = function(id, params, chunkData) {\n            var size = getSize(id),\n                name = getName(id);\n\n            params[spec.chunking.paramNames.partIndex] = chunkData.part;\n            params[spec.chunking.paramNames.partByteOffset] = chunkData.start;\n            params[spec.chunking.paramNames.chunkSize] = chunkData.size;\n            params[spec.chunking.paramNames.totalParts] = chunkData.count;\n            params[spec.totalFileSizeName] = size;\n\n            /**\n             * When a Blob is sent in a multipart request, the filename value in the content-disposition header is either \"blob\"\n             * or an empty string.  So, we will need to include the actual file name as a param in this case.\n             */\n            if (multipart) {\n                params[spec.filenameParam] = name;\n            }\n        },\n\n        allChunksDoneRequester = new qq.traditional.AllChunksDoneAjaxRequester({\n            cors: spec.cors,\n            endpoint: spec.chunking.success.endpoint,\n            log: log\n        }),\n\n        createReadyStateChangedHandler = function(id, xhr) {\n            var promise = new qq.Promise();\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    var result = onUploadOrChunkComplete(id, xhr);\n\n                    if (result.success) {\n                        promise.success(result.response, xhr);\n                    }\n                    else {\n                        promise.failure(result.response, xhr);\n                    }\n                }\n            };\n\n            return promise;\n        },\n\n        getChunksCompleteParams = function(id) {\n            var params = spec.paramsStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            params[spec.uuidName] = getUuid(id);\n            params[spec.filenameParam] = name;\n            params[spec.totalFileSizeName] = size;\n            params[spec.chunking.paramNames.totalParts] = handler._getTotalChunks(id);\n\n            return params;\n        },\n\n        isErrorUploadResponse = function(xhr, response) {\n            return qq.indexOf([200, 201, 202, 203, 204], xhr.status) < 0 ||\n                !response.success ||\n                response.reset;\n        },\n\n        onUploadOrChunkComplete = function(id, xhr) {\n            var response;\n\n            log(\"xhr - server response received for \" + id);\n            log(\"responseText = \" + xhr.responseText);\n\n            response = parseResponse(true, xhr);\n\n            return {\n                success: !isErrorUploadResponse(xhr, response),\n                response: response\n            };\n        },\n\n        // If this is an upload response, we require a JSON payload, otherwise, it is optional.\n        parseResponse = function(upload, xhr) {\n            var response = {};\n\n            try {\n                log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n                response = qq.parseJson(xhr.responseText);\n            }\n            catch (error) {\n                upload && log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        },\n\n        sendChunksCompleteRequest = function(id) {\n            var promise = new qq.Promise();\n\n            allChunksDoneRequester.complete(\n                    id,\n                    handler._createXhr(id),\n                    getChunksCompleteParams(id),\n                    spec.customHeaders.get(id)\n                )\n                .then(function(xhr) {\n                    promise.success(parseResponse(false, xhr), xhr);\n                }, function(xhr) {\n                    promise.failure(parseResponse(false, xhr), xhr);\n                });\n\n            return promise;\n        },\n\n        setParamsAndGetEntityToSend = function(params, xhr, fileOrBlob, id) {\n            var formData = new FormData(),\n                method = spec.method,\n                endpoint = spec.endpointStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            params[spec.uuidName] = getUuid(id);\n            params[spec.filenameParam] = name;\n\n            if (multipart) {\n                params[spec.totalFileSizeName] = size;\n            }\n\n            //build query string\n            if (!spec.paramsInBody) {\n                if (!multipart) {\n                    params[spec.inputName] = name;\n                }\n                endpoint = qq.obj2url(params, endpoint);\n            }\n\n            xhr.open(method, endpoint, true);\n\n            if (spec.cors.expected && spec.cors.sendCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (multipart) {\n                if (spec.paramsInBody) {\n                    qq.obj2FormData(params, formData);\n                }\n\n                formData.append(spec.inputName, fileOrBlob);\n                return formData;\n            }\n\n            return fileOrBlob;\n        },\n\n        setUploadHeaders = function(id, xhr) {\n            var extraHeaders = spec.customHeaders.get(id),\n                fileOrBlob = handler.getFile(id);\n\n            xhr.setRequestHeader(\"Accept\", \"application/json\");\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n\n            if (!multipart) {\n                xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n                //NOTE: return mime type in xhr works on chrome 16.0.9 firefox 11.0a2\n                xhr.setRequestHeader(\"X-Mime-Type\", fileOrBlob.type);\n            }\n\n            qq.each(extraHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        };\n\n    qq.extend(this, {\n        uploadChunk: function(id, chunkIdx, resuming) {\n            var chunkData = handler._getChunkData(id, chunkIdx),\n                xhr = handler._createXhr(id, chunkIdx),\n                size = getSize(id),\n                promise, toSend, params;\n\n            promise = createReadyStateChangedHandler(id, xhr);\n            handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n            params = spec.paramsStore.get(id);\n            addChunkingSpecificParams(id, params, chunkData);\n\n            if (resuming) {\n                params[spec.resume.paramNames.resuming] = true;\n            }\n\n            toSend = setParamsAndGetEntityToSend(params, xhr, chunkData.blob, id);\n            setUploadHeaders(id, xhr);\n            xhr.send(toSend);\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var fileOrBlob = handler.getFile(id),\n                promise, xhr, params, toSend;\n\n            xhr = handler._createXhr(id);\n            handler._registerProgressHandler(id);\n            promise = createReadyStateChangedHandler(id, xhr);\n            params = spec.paramsStore.get(id);\n            toSend = setParamsAndGetEntityToSend(params, xhr, fileOrBlob, id);\n            setUploadHeaders(id, xhr);\n            xhr.send(toSend);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"traditional\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            finalizeChunks: function(id) {\n                if (spec.chunking.success.endpoint) {\n                    return sendChunksCompleteRequest(id);\n                }\n                else {\n                    return super_.finalizeChunks(id, qq.bind(parseResponse, this, true));\n                }\n            }\n        };\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send a POST to a traditional endpoint once all chunks for a specific file have uploaded\n * successfully.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.traditional.AllChunksDoneAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"POST\",\n        options = {\n            cors: {\n                allowXdr: false,\n                expected: false,\n                sendCredentials: false\n            },\n            endpoint: null,\n            log: function(str, level) {}\n        },\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                return options.endpoint;\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [method],\n        method: method,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: options.cors,\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        complete: function(id, xhr, params, headers) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting All Chunks Done request for \" + id);\n\n            promises[id] = promise;\n\n            requester.initTransport(id)\n                .withParams(params)\n                .withHeaders(headers)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\r\n/**\r\n * Defines the public API for FineUploader mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.uiPublicApi = {\r\n        addInitialFiles: function(cannedFileList) {\r\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\r\n            this._templating.addCacheToDom();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\r\n            this._templating.clearFiles();\r\n        },\r\n\r\n        addExtraDropzone: function(element) {\r\n            this._dnd && this._dnd.setupExtraDropzone(element);\r\n        },\r\n\r\n        removeExtraDropzone: function(element) {\r\n            if (this._dnd) {\r\n                return this._dnd.removeDropzone(element);\r\n            }\r\n        },\r\n\r\n        getItemByFileId: function(id) {\r\n            if (!this._templating.isHiddenForever(id)) {\r\n                return this._templating.getFileContainer(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            this._parent.prototype.reset.apply(this, arguments);\r\n            this._templating.reset();\r\n\r\n            if (!this._options.button && this._templating.getButton()) {\r\n                this._defaultButtonId = this._createUploadButton({\r\n                    element: this._templating.getButton(),\r\n                    title: this._options.text.fileInputTitle\r\n                }).getButtonId();\r\n            }\r\n\r\n            if (this._dnd) {\r\n                this._dnd.dispose();\r\n                this._dnd = this._setupDragAndDrop();\r\n            }\r\n\r\n            this._totalFilesInBatch = 0;\r\n            this._filesInBatchAddedToUi = 0;\r\n\r\n            this._setupClickAndEditEventHandlers();\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            var formattedFilename = this._options.formatFileName(newName);\r\n\r\n            this._parent.prototype.setName.apply(this, arguments);\r\n            this._templating.updateFilename(id, formattedFilename);\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\r\n\r\n            paused && this._templating.uploadPaused(id);\r\n            return paused;\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\r\n\r\n            continued && this._templating.uploadContinued(id);\r\n            return continued;\r\n        },\r\n\r\n        getId: function(fileContainerOrChildEl) {\r\n            return this._templating.getFileId(fileContainerOrChildEl);\r\n        },\r\n\r\n        getDropTarget: function(fileId) {\r\n            var file = this.getFile(fileId);\r\n\r\n            return file.qqDropTarget;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploader mode.\r\n     */\r\n    qq.uiPrivateApi = {\r\n        _getButton: function(buttonId) {\r\n            var button = this._parent.prototype._getButton.apply(this, arguments);\r\n\r\n            if (!button) {\r\n                if (buttonId === this._defaultButtonId) {\r\n                    button = this._templating.getButton();\r\n                }\r\n            }\r\n\r\n            return button;\r\n        },\r\n\r\n        _removeFileItem: function(fileId) {\r\n            this._templating.removeFile(fileId);\r\n        },\r\n\r\n        _setupClickAndEditEventHandlers: function() {\r\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\r\n\r\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\r\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\r\n            this._focusinEventSupported = !qq.firefox();\r\n\r\n            if (this._isEditFilenameEnabled())\r\n            {\r\n                this._filenameClickHandler = this._bindFilenameClickEvent();\r\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\r\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\r\n            }\r\n        },\r\n\r\n        _setupDragAndDrop: function() {\r\n            var self = this,\r\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\r\n                templating = this._templating,\r\n                defaultDropZone = templating.getDropZone();\r\n\r\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\r\n\r\n            return new qq.DragAndDrop({\r\n                dropZoneElements: dropZoneElements,\r\n                allowMultipleItems: this._options.multiple,\r\n                classes: {\r\n                    dropActive: this._options.classes.dropActive\r\n                },\r\n                callbacks: {\r\n                    processingDroppedFiles: function() {\r\n                        templating.showDropProcessing();\r\n                    },\r\n                    processingDroppedFilesComplete: function(files, targetEl) {\r\n                        templating.hideDropProcessing();\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            file.qqDropTarget = targetEl;\r\n                        });\r\n\r\n                        if (files.length) {\r\n                            self.addFiles(files, null, null);\r\n                        }\r\n                    },\r\n                    dropError: function(code, errorData) {\r\n                        self._itemError(code, errorData);\r\n                    },\r\n                    dropLog: function(message, level) {\r\n                        self.log(message, level);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _bindFileButtonsClickEvent: function() {\r\n            var self = this;\r\n\r\n            return new qq.FileButtonsClickHandler({\r\n                templating: this._templating,\r\n\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n\r\n                onDeleteFile: function(fileId) {\r\n                    self.deleteFile(fileId);\r\n                },\r\n\r\n                onCancel: function(fileId) {\r\n                    self.cancel(fileId);\r\n                },\r\n\r\n                onRetry: function(fileId) {\r\n                    self.retry(fileId);\r\n                },\r\n\r\n                onPause: function(fileId) {\r\n                    self.pauseUpload(fileId);\r\n                },\r\n\r\n                onContinue: function(fileId) {\r\n                    self.continueUpload(fileId);\r\n                },\r\n\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                }\r\n            });\r\n        },\r\n\r\n        _isEditFilenameEnabled: function() {\r\n            /*jshint -W014 */\r\n            return this._templating.isEditFilenamePossible()\r\n                && !this._options.autoUpload\r\n                && qq.FilenameClickHandler\r\n                && qq.FilenameInputFocusHandler\r\n                && qq.FilenameInputFocusHandler;\r\n        },\r\n\r\n        _filenameEditHandler: function() {\r\n            var self = this,\r\n                templating = this._templating;\r\n\r\n            return {\r\n                templating: templating,\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n                onGetUploadStatus: function(fileId) {\r\n                    return self.getUploads({id: fileId}).status;\r\n                },\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                },\r\n                onSetName: function(id, newName) {\r\n                    self.setName(id, newName);\r\n                },\r\n                onEditingStatusChange: function(id, isEditing) {\r\n                    var qqInput = qq(templating.getEditInput(id)),\r\n                        qqFileContainer = qq(templating.getFileContainer(id));\r\n\r\n                    if (isEditing) {\r\n                        qqInput.addClass(\"qq-editing\");\r\n                        templating.hideFilename(id);\r\n                        templating.hideEditIcon(id);\r\n                    }\r\n                    else {\r\n                        qqInput.removeClass(\"qq-editing\");\r\n                        templating.showFilename(id);\r\n                        templating.showEditIcon(id);\r\n                    }\r\n\r\n                    // Force IE8 and older to repaint\r\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\r\n                }\r\n            };\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\r\n\r\n            if (this._isEditFilenameEnabled()) {\r\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\r\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\r\n                    this._templating.markFilenameEditable(id);\r\n                    this._templating.hideEditIcon(id);\r\n                }\r\n            }\r\n\r\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\r\n                this._templating.hideRetry(id);\r\n                this._templating.setStatusText(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\r\n            }\r\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\r\n                this._templating.hidePause(id);\r\n            }\r\n        },\r\n\r\n        _bindFilenameInputFocusInEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusInHandler(spec);\r\n        },\r\n\r\n        _bindFilenameInputFocusEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusHandler(spec);\r\n        },\r\n\r\n        _bindFilenameClickEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameClickHandler(spec);\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._parent.prototype._storeForLater.apply(this, arguments);\r\n            this._templating.hideSpinner(id);\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._parent.prototype._onAllComplete.apply(this, arguments);\r\n            this._templating.resetTotalProgress();\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            var file = this.getFile(id);\r\n\r\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\r\n                this._paramsStore.addReadOnly(id, {\r\n                    qqpath: file.qqPath\r\n                });\r\n            }\r\n\r\n            this._parent.prototype._onSubmit.apply(this, arguments);\r\n            this._addToList(id, name);\r\n        },\r\n\r\n        // The file item has been added to the DOM.\r\n        _onSubmitted: function(id) {\r\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\r\n            if (this._isEditFilenameEnabled()) {\r\n                this._templating.markFilenameEditable(id);\r\n                this._templating.showEditIcon(id);\r\n\r\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\r\n                if (!this._focusinEventSupported) {\r\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\r\n                }\r\n            }\r\n        },\r\n\r\n        // Update the progress bar & percentage as the file is uploaded\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._parent.prototype._onProgress.apply(this, arguments);\r\n\r\n            this._templating.updateProgress(id, loaded, total);\r\n\r\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\r\n                this._templating.hideCancel(id);\r\n                this._templating.hidePause(id);\r\n                this._templating.hideProgress(id);\r\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\r\n\r\n                // If ~last byte was sent, display total file size\r\n                this._displayFileSize(id);\r\n            }\r\n            else {\r\n                // If still uploading, display percentage - total size is actually the total request(s) size\r\n                this._displayFileSize(id, loaded, total);\r\n            }\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\r\n            this._templating.updateTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\r\n                templating = this._templating,\r\n                fileContainer = templating.getFileContainer(id),\r\n                self = this;\r\n\r\n            function completeUpload(result) {\r\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\r\n                // If so, don't perform any UI-related tasks related to this file.\r\n                if (!fileContainer) {\r\n                    return;\r\n                }\r\n\r\n                templating.setStatusText(id);\r\n\r\n                qq(fileContainer).removeClass(self._classes.retrying);\r\n                templating.hideProgress(id);\r\n\r\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\r\n                    templating.hideCancel(id);\r\n                }\r\n                templating.hideSpinner(id);\r\n\r\n                if (result.success) {\r\n                    self._markFileAsSuccessful(id);\r\n                }\r\n                else {\r\n                    qq(fileContainer).addClass(self._classes.fail);\r\n                    templating.showCancel(id);\r\n\r\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\r\n                        qq(fileContainer).addClass(self._classes.retryable);\r\n                        templating.showRetry(id);\r\n                    }\r\n                    self._controlFailureTextDisplay(id, result);\r\n                }\r\n            }\r\n\r\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\r\n            if (parentRetVal instanceof qq.Promise) {\r\n                parentRetVal.done(function(newResult) {\r\n                    completeUpload(newResult);\r\n                });\r\n\r\n            }\r\n            else {\r\n                completeUpload(result);\r\n            }\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _markFileAsSuccessful: function(id) {\r\n            var templating = this._templating;\r\n\r\n            if (this._isDeletePossible()) {\r\n                templating.showDeleteButton(id);\r\n            }\r\n\r\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\r\n\r\n            this._maybeUpdateThumbnail(id);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\r\n            this._templating.showSpinner(id);\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\r\n\r\n            this._templating.showSpinner(id);\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\r\n\r\n            // Only display the pause button if we have finished uploading at least one chunk\r\n            // & this file can be resumed\r\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\r\n                this._templating.allowPause(id);\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._parent.prototype._onCancel.apply(this, arguments);\r\n            this._removeFileItem(id);\r\n\r\n            if (this._getNotFinished() === 0) {\r\n                this._templating.resetTotalProgress();\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id) {\r\n            var retryNumForDisplay, maxAuto, retryNote;\r\n\r\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\r\n\r\n            this._showCancelLink(id);\r\n\r\n            if (this._options.retry.showAutoRetryNote) {\r\n                retryNumForDisplay = this._autoRetries[id];\r\n                maxAuto = this._options.retry.maxAutoAttempts;\r\n\r\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\r\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\r\n\r\n                this._templating.setStatusText(id, retryNote);\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\r\n            }\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\r\n                this._templating.resetProgress(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\r\n                this._templating.setStatusText(id);\r\n                this._templating.showSpinner(id);\r\n                this._showCancelLink(id);\r\n                return true;\r\n            }\r\n            else {\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\r\n                this._templating.showRetry(id);\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id) {\r\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\r\n\r\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\r\n        },\r\n\r\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\r\n            if (this._options.deleteFile.forceConfirm) {\r\n                this._showDeleteConfirm.apply(this, arguments);\r\n            }\r\n            else {\r\n                this._sendDeleteRequest.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhr, isError) {\r\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\r\n\r\n            this._templating.hideSpinner(id);\r\n\r\n            if (isError) {\r\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\r\n                this._templating.showDeleteButton(id);\r\n            }\r\n            else {\r\n                this._removeFileItem(id);\r\n            }\r\n        },\r\n\r\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\r\n            this._templating.hideDeleteButton(id);\r\n            this._templating.showSpinner(id);\r\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\r\n            this._deleteHandler.sendDelete.apply(this, arguments);\r\n        },\r\n\r\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\r\n            /*jshint -W004 */\r\n            var fileName = this.getName(id),\r\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\r\n                uuid = this.getUuid(id),\r\n                deleteRequestArgs = arguments,\r\n                self = this,\r\n                retVal;\r\n\r\n            retVal = this._options.showConfirm(confirmMessage);\r\n\r\n            if (qq.isGenericPromise(retVal)) {\r\n                retVal.then(function() {\r\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n                });\r\n            }\r\n            else if (retVal !== false) {\r\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n            }\r\n        },\r\n\r\n        _addToList: function(id, name, canned) {\r\n            var prependData,\r\n                prependIndex = 0,\r\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\r\n                record;\r\n\r\n            if (this._options.display.prependFiles) {\r\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\r\n                    prependIndex = this._filesInBatchAddedToUi - 1;\r\n                }\r\n\r\n                prependData = {\r\n                    index: prependIndex\r\n                };\r\n            }\r\n\r\n            if (!canned) {\r\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\r\n                    this._templating.disableCancel();\r\n                }\r\n\r\n                // Cancel all existing (previous) files and clear the list if this file is not part of\r\n                // a scaled file group that has already been accepted, or if this file is not part of\r\n                // a scaled file group at all.\r\n                if (!this._options.multiple) {\r\n                    record = this.getUploads({id: id});\r\n\r\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\r\n\r\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\r\n                        this._handler.cancelAll();\r\n                        this._clearList();\r\n                        this._handledProxyGroup = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (canned) {\r\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\r\n            }\r\n            else {\r\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\r\n            }\r\n\r\n            this._filesInBatchAddedToUi += 1;\r\n\r\n            if (canned ||\r\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\r\n\r\n                this._displayFileSize(id);\r\n            }\r\n        },\r\n\r\n        _clearList: function() {\r\n            this._templating.clearFiles();\r\n            this.clearStoredFiles();\r\n        },\r\n\r\n        _displayFileSize: function(id, loadedSize, totalSize) {\r\n            var size = this.getSize(id),\r\n                sizeForDisplay = this._formatSize(size);\r\n\r\n            if (size >= 0) {\r\n                if (loadedSize !== undefined && totalSize !== undefined) {\r\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\r\n                }\r\n\r\n                this._templating.updateSize(id, sizeForDisplay);\r\n            }\r\n        },\r\n\r\n        _formatProgress: function(uploadedSize, totalSize) {\r\n            var message = this._options.text.formatProgress;\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\r\n            r(\"{total_size}\", this._formatSize(totalSize));\r\n            return message;\r\n        },\r\n\r\n        _controlFailureTextDisplay: function(id, response) {\r\n            var mode, responseProperty, failureReason;\r\n\r\n            mode = this._options.failedUploadTextDisplay.mode;\r\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\r\n\r\n            if (mode === \"custom\") {\r\n                failureReason = response[responseProperty];\r\n                if (!failureReason) {\r\n                    failureReason = this._options.text.failUpload;\r\n                }\r\n\r\n                this._templating.setStatusText(id, failureReason);\r\n\r\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\r\n                    this._showTooltip(id, failureReason);\r\n                }\r\n            }\r\n            else if (mode === \"default\") {\r\n                this._templating.setStatusText(id, this._options.text.failUpload);\r\n            }\r\n            else if (mode !== \"none\") {\r\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\r\n            }\r\n        },\r\n\r\n        _showTooltip: function(id, text) {\r\n            this._templating.getFileContainer(id).title = text;\r\n        },\r\n\r\n        _showCancelLink: function(id) {\r\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\r\n                this._templating.showCancel(id);\r\n            }\r\n        },\r\n\r\n        _itemError: function(code, name, item) {\r\n            var message = this._parent.prototype._itemError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._parent.prototype._batchError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _setupPastePrompt: function() {\r\n            var self = this;\r\n\r\n            this._options.callbacks.onPasteReceived = function() {\r\n                var message = self._options.paste.namePromptMessage,\r\n                    defaultVal = self._options.paste.defaultName;\r\n\r\n                return self._options.showPrompt(message, defaultVal);\r\n            };\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id, name) {\r\n            this._totalFilesInBatch -= 1;\r\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            this._totalFilesInBatch = items.length;\r\n            this._filesInBatchAddedToUi = 0;\r\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\r\n        },\r\n\r\n        _maybeUpdateThumbnail: function(fileId) {\r\n            var thumbnailUrl = this._thumbnailUrls[fileId],\r\n                fileStatus = this.getUploads({id: fileId}).status;\r\n\r\n            if (fileStatus !== qq.status.DELETED &&\r\n                (thumbnailUrl ||\r\n                this._options.thumbnails.placeholders.waitUntilResponse ||\r\n                !qq.supportedFeatures.imagePreviews)) {\r\n\r\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\r\n                // if called with a null thumbnailUrl.\r\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\r\n            }\r\n        },\r\n\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\r\n\r\n            this._addToList(id, this.getName(id), true);\r\n            this._templating.hideSpinner(id);\r\n            this._templating.hideCancel(id);\r\n            this._markFileAsSuccessful(id);\r\n\r\n            return id;\r\n        },\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._parent.prototype._setSize.apply(this, arguments);\r\n\r\n            this._templating.updateSize(id, this._formatSize(newSize));\r\n        },\r\n\r\n        _sessionRequestComplete: function() {\r\n            this._templating.addCacheToDom();\r\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\r\n        }\r\n    };\r\n}());\r\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n/**\r\n * CryptoJS core components.\r\n */\r\nqq.CryptoJS = (function (Math, undefined) {\r\n    /**\r\n     * CryptoJS namespace.\r\n     */\r\n    var C = {};\r\n\r\n    /**\r\n     * Library namespace.\r\n     */\r\n    var C_lib = C.lib = {};\r\n\r\n    /**\r\n     * Base object for prototypal inheritance.\r\n     */\r\n    var Base = C_lib.Base = (function () {\r\n        function F() {}\r\n\r\n        return {\r\n            /**\r\n             * Creates a new object that inherits from this object.\r\n             *\r\n             * @param {Object} overrides Properties to copy into the new object.\r\n             *\r\n             * @return {Object} The new object.\r\n             *\r\n             * @static\r\n             *\r\n             * @example\r\n             *\r\n             *     var MyType = CryptoJS.lib.Base.extend({\r\n             *         field: 'value',\r\n             *\r\n             *         method: function () {\r\n             *         }\r\n             *     });\r\n             */\r\n            extend: function (overrides) {\r\n                // Spawn\r\n                F.prototype = this;\r\n                var subtype = new F();\r\n\r\n                // Augment\r\n                if (overrides) {\r\n                    subtype.mixIn(overrides);\r\n                }\r\n\r\n                // Create default initializer\r\n                if (!subtype.hasOwnProperty('init')) {\r\n                    subtype.init = function () {\r\n                        subtype.$super.init.apply(this, arguments);\r\n                    };\r\n                }\r\n\r\n                // Initializer's prototype is the subtype object\r\n                subtype.init.prototype = subtype;\r\n\r\n                // Reference supertype\r\n                subtype.$super = this;\r\n\r\n                return subtype;\r\n            },\r\n\r\n            /**\r\n             * Extends this object and runs the init method.\r\n             * Arguments to create() will be passed to init().\r\n             *\r\n             * @return {Object} The new object.\r\n             *\r\n             * @static\r\n             *\r\n             * @example\r\n             *\r\n             *     var instance = MyType.create();\r\n             */\r\n            create: function () {\r\n                var instance = this.extend();\r\n                instance.init.apply(instance, arguments);\r\n\r\n                return instance;\r\n            },\r\n\r\n            /**\r\n             * Initializes a newly created object.\r\n             * Override this method to add some logic when your objects are created.\r\n             *\r\n             * @example\r\n             *\r\n             *     var MyType = CryptoJS.lib.Base.extend({\r\n             *         init: function () {\r\n             *             // ...\r\n             *         }\r\n             *     });\r\n             */\r\n            init: function () {\r\n            },\r\n\r\n            /**\r\n             * Copies properties into this object.\r\n             *\r\n             * @param {Object} properties The properties to mix in.\r\n             *\r\n             * @example\r\n             *\r\n             *     MyType.mixIn({\r\n             *         field: 'value'\r\n             *     });\r\n             */\r\n            mixIn: function (properties) {\r\n                for (var propertyName in properties) {\r\n                    if (properties.hasOwnProperty(propertyName)) {\r\n                        this[propertyName] = properties[propertyName];\r\n                    }\r\n                }\r\n\r\n                // IE won't copy toString using the loop above\r\n                if (properties.hasOwnProperty('toString')) {\r\n                    this.toString = properties.toString;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Creates a copy of this object.\r\n             *\r\n             * @return {Object} The clone.\r\n             *\r\n             * @example\r\n             *\r\n             *     var clone = instance.clone();\r\n             */\r\n            clone: function () {\r\n                return this.init.prototype.extend(this);\r\n            }\r\n        };\r\n    }());\r\n\r\n    /**\r\n     * An array of 32-bit words.\r\n     *\r\n     * @property {Array} words The array of 32-bit words.\r\n     * @property {number} sigBytes The number of significant bytes in this word array.\r\n     */\r\n    var WordArray = C_lib.WordArray = Base.extend({\r\n        /**\r\n         * Initializes a newly created word array.\r\n         *\r\n         * @param {Array} words (Optional) An array of 32-bit words.\r\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.lib.WordArray.create();\r\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\r\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\r\n         */\r\n        init: function (words, sigBytes) {\r\n            words = this.words = words || [];\r\n\r\n            if (sigBytes != undefined) {\r\n                this.sigBytes = sigBytes;\r\n            } else {\r\n                this.sigBytes = words.length * 4;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Converts this word array to a string.\r\n         *\r\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\r\n         *\r\n         * @return {string} The stringified word array.\r\n         *\r\n         * @example\r\n         *\r\n         *     var string = wordArray + '';\r\n         *     var string = wordArray.toString();\r\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\r\n         */\r\n        toString: function (encoder) {\r\n            return (encoder || Hex).stringify(this);\r\n        },\r\n\r\n        /**\r\n         * Concatenates a word array to this word array.\r\n         *\r\n         * @param {WordArray} wordArray The word array to append.\r\n         *\r\n         * @return {WordArray} This word array.\r\n         *\r\n         * @example\r\n         *\r\n         *     wordArray1.concat(wordArray2);\r\n         */\r\n        concat: function (wordArray) {\r\n            // Shortcuts\r\n            var thisWords = this.words;\r\n            var thatWords = wordArray.words;\r\n            var thisSigBytes = this.sigBytes;\r\n            var thatSigBytes = wordArray.sigBytes;\r\n\r\n            // Clamp excess bits\r\n            this.clamp();\r\n\r\n            // Concat\r\n            if (thisSigBytes % 4) {\r\n                // Copy one byte at a time\r\n                for (var i = 0; i < thatSigBytes; i++) {\r\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\r\n                }\r\n            } else if (thatWords.length > 0xffff) {\r\n                // Copy one word at a time\r\n                for (var i = 0; i < thatSigBytes; i += 4) {\r\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\r\n                }\r\n            } else {\r\n                // Copy all words at once\r\n                thisWords.push.apply(thisWords, thatWords);\r\n            }\r\n            this.sigBytes += thatSigBytes;\r\n\r\n            // Chainable\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes insignificant bits.\r\n         *\r\n         * @example\r\n         *\r\n         *     wordArray.clamp();\r\n         */\r\n        clamp: function () {\r\n            // Shortcuts\r\n            var words = this.words;\r\n            var sigBytes = this.sigBytes;\r\n\r\n            // Clamp\r\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\r\n            words.length = Math.ceil(sigBytes / 4);\r\n        },\r\n\r\n        /**\r\n         * Creates a copy of this word array.\r\n         *\r\n         * @return {WordArray} The clone.\r\n         *\r\n         * @example\r\n         *\r\n         *     var clone = wordArray.clone();\r\n         */\r\n        clone: function () {\r\n            var clone = Base.clone.call(this);\r\n            clone.words = this.words.slice(0);\r\n\r\n            return clone;\r\n        },\r\n\r\n        /**\r\n         * Creates a word array filled with random bytes.\r\n         *\r\n         * @param {number} nBytes The number of random bytes to generate.\r\n         *\r\n         * @return {WordArray} The random word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\r\n         */\r\n        random: function (nBytes) {\r\n            var words = [];\r\n            for (var i = 0; i < nBytes; i += 4) {\r\n                words.push((Math.random() * 0x100000000) | 0);\r\n            }\r\n\r\n            return new WordArray.init(words, nBytes);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Encoder namespace.\r\n     */\r\n    var C_enc = C.enc = {};\r\n\r\n    /**\r\n     * Hex encoding strategy.\r\n     */\r\n    var Hex = C_enc.Hex = {\r\n        /**\r\n         * Converts a word array to a hex string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The hex string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\r\n         */\r\n        stringify: function (wordArray) {\r\n            // Shortcuts\r\n            var words = wordArray.words;\r\n            var sigBytes = wordArray.sigBytes;\r\n\r\n            // Convert\r\n            var hexChars = [];\r\n            for (var i = 0; i < sigBytes; i++) {\r\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n                hexChars.push((bite >>> 4).toString(16));\r\n                hexChars.push((bite & 0x0f).toString(16));\r\n            }\r\n\r\n            return hexChars.join('');\r\n        },\r\n\r\n        /**\r\n         * Converts a hex string to a word array.\r\n         *\r\n         * @param {string} hexStr The hex string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\r\n         */\r\n        parse: function (hexStr) {\r\n            // Shortcut\r\n            var hexStrLength = hexStr.length;\r\n\r\n            // Convert\r\n            var words = [];\r\n            for (var i = 0; i < hexStrLength; i += 2) {\r\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\r\n            }\r\n\r\n            return new WordArray.init(words, hexStrLength / 2);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Latin1 encoding strategy.\r\n     */\r\n    var Latin1 = C_enc.Latin1 = {\r\n        /**\r\n         * Converts a word array to a Latin1 string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The Latin1 string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\r\n         */\r\n        stringify: function (wordArray) {\r\n            // Shortcuts\r\n            var words = wordArray.words;\r\n            var sigBytes = wordArray.sigBytes;\r\n\r\n            // Convert\r\n            var latin1Chars = [];\r\n            for (var i = 0; i < sigBytes; i++) {\r\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n                latin1Chars.push(String.fromCharCode(bite));\r\n            }\r\n\r\n            return latin1Chars.join('');\r\n        },\r\n\r\n        /**\r\n         * Converts a Latin1 string to a word array.\r\n         *\r\n         * @param {string} latin1Str The Latin1 string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\r\n         */\r\n        parse: function (latin1Str) {\r\n            // Shortcut\r\n            var latin1StrLength = latin1Str.length;\r\n\r\n            // Convert\r\n            var words = [];\r\n            for (var i = 0; i < latin1StrLength; i++) {\r\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            return new WordArray.init(words, latin1StrLength);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * UTF-8 encoding strategy.\r\n     */\r\n    var Utf8 = C_enc.Utf8 = {\r\n        /**\r\n         * Converts a word array to a UTF-8 string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The UTF-8 string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\r\n         */\r\n        stringify: function (wordArray) {\r\n            try {\r\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\r\n            } catch (e) {\r\n                throw new Error('Malformed UTF-8 data');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Converts a UTF-8 string to a word array.\r\n         *\r\n         * @param {string} utf8Str The UTF-8 string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\r\n         */\r\n        parse: function (utf8Str) {\r\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Abstract buffered block algorithm template.\r\n     *\r\n     * The property blockSize must be implemented in a concrete subtype.\r\n     *\r\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\r\n     */\r\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\r\n        /**\r\n         * Resets this block algorithm's data buffer to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     bufferedBlockAlgorithm.reset();\r\n         */\r\n        reset: function () {\r\n            // Initial values\r\n            this._data = new WordArray.init();\r\n            this._nDataBytes = 0;\r\n        },\r\n\r\n        /**\r\n         * Adds new data to this block algorithm's buffer.\r\n         *\r\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\r\n         *\r\n         * @example\r\n         *\r\n         *     bufferedBlockAlgorithm._append('data');\r\n         *     bufferedBlockAlgorithm._append(wordArray);\r\n         */\r\n        _append: function (data) {\r\n            // Convert string to WordArray, else assume WordArray already\r\n            if (typeof data == 'string') {\r\n                data = Utf8.parse(data);\r\n            }\r\n\r\n            // Append\r\n            this._data.concat(data);\r\n            this._nDataBytes += data.sigBytes;\r\n        },\r\n\r\n        /**\r\n         * Processes available data blocks.\r\n         *\r\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\r\n         *\r\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\r\n         *\r\n         * @return {WordArray} The processed data.\r\n         *\r\n         * @example\r\n         *\r\n         *     var processedData = bufferedBlockAlgorithm._process();\r\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\r\n         */\r\n        _process: function (doFlush) {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n            var dataSigBytes = data.sigBytes;\r\n            var blockSize = this.blockSize;\r\n            var blockSizeBytes = blockSize * 4;\r\n\r\n            // Count blocks ready\r\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\r\n            if (doFlush) {\r\n                // Round up to include partial blocks\r\n                nBlocksReady = Math.ceil(nBlocksReady);\r\n            } else {\r\n                // Round down to include only full blocks,\r\n                // less the number of blocks that must remain in the buffer\r\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\r\n            }\r\n\r\n            // Count words ready\r\n            var nWordsReady = nBlocksReady * blockSize;\r\n\r\n            // Count bytes ready\r\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\r\n\r\n            // Process blocks\r\n            if (nWordsReady) {\r\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\r\n                    // Perform concrete-algorithm logic\r\n                    this._doProcessBlock(dataWords, offset);\r\n                }\r\n\r\n                // Remove processed words\r\n                var processedWords = dataWords.splice(0, nWordsReady);\r\n                data.sigBytes -= nBytesReady;\r\n            }\r\n\r\n            // Return processed words\r\n            return new WordArray.init(processedWords, nBytesReady);\r\n        },\r\n\r\n        /**\r\n         * Creates a copy of this object.\r\n         *\r\n         * @return {Object} The clone.\r\n         *\r\n         * @example\r\n         *\r\n         *     var clone = bufferedBlockAlgorithm.clone();\r\n         */\r\n        clone: function () {\r\n            var clone = Base.clone.call(this);\r\n            clone._data = this._data.clone();\r\n\r\n            return clone;\r\n        },\r\n\r\n        _minBufferSize: 0\r\n    });\r\n\r\n    /**\r\n     * Abstract hasher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\r\n     */\r\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\r\n        /**\r\n         * Configuration options.\r\n         */\r\n        cfg: Base.extend(),\r\n\r\n        /**\r\n         * Initializes a newly created hasher.\r\n         *\r\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hasher = CryptoJS.algo.SHA256.create();\r\n         */\r\n        init: function (cfg) {\r\n            // Apply config defaults\r\n            this.cfg = this.cfg.extend(cfg);\r\n\r\n            // Set initial values\r\n            this.reset();\r\n        },\r\n\r\n        /**\r\n         * Resets this hasher to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     hasher.reset();\r\n         */\r\n        reset: function () {\r\n            // Reset data buffer\r\n            BufferedBlockAlgorithm.reset.call(this);\r\n\r\n            // Perform concrete-hasher logic\r\n            this._doReset();\r\n        },\r\n\r\n        /**\r\n         * Updates this hasher with a message.\r\n         *\r\n         * @param {WordArray|string} messageUpdate The message to append.\r\n         *\r\n         * @return {Hasher} This hasher.\r\n         *\r\n         * @example\r\n         *\r\n         *     hasher.update('message');\r\n         *     hasher.update(wordArray);\r\n         */\r\n        update: function (messageUpdate) {\r\n            // Append\r\n            this._append(messageUpdate);\r\n\r\n            // Update the hash\r\n            this._process();\r\n\r\n            // Chainable\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Finalizes the hash computation.\r\n         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n         *\r\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n         *\r\n         * @return {WordArray} The hash.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hash = hasher.finalize();\r\n         *     var hash = hasher.finalize('message');\r\n         *     var hash = hasher.finalize(wordArray);\r\n         */\r\n        finalize: function (messageUpdate) {\r\n            // Final message update\r\n            if (messageUpdate) {\r\n                this._append(messageUpdate);\r\n            }\r\n\r\n            // Perform concrete-hasher logic\r\n            var hash = this._doFinalize();\r\n\r\n            return hash;\r\n        },\r\n\r\n        blockSize: 512/32,\r\n\r\n        /**\r\n         * Creates a shortcut function to a hasher's object interface.\r\n         *\r\n         * @param {Hasher} hasher The hasher to create a helper for.\r\n         *\r\n         * @return {Function} The shortcut function.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\r\n         */\r\n        _createHelper: function (hasher) {\r\n            return function (message, cfg) {\r\n                return new hasher.init(cfg).finalize(message);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Creates a shortcut function to the HMAC's object interface.\r\n         *\r\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\r\n         *\r\n         * @return {Function} The shortcut function.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\r\n         */\r\n        _createHmacHelper: function (hasher) {\r\n            return function (message, key) {\r\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\r\n            };\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Algorithm namespace.\r\n     */\r\n    var C_algo = C.algo = {};\r\n\r\n    return C;\r\n}(Math));\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var C_enc = C.enc;\r\n\r\n    /**\r\n     * Base64 encoding strategy.\r\n     */\r\n    var Base64 = C_enc.Base64 = {\r\n        /**\r\n         * Converts a word array to a Base64 string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The Base64 string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\r\n         */\r\n        stringify: function (wordArray) {\r\n            // Shortcuts\r\n            var words = wordArray.words;\r\n            var sigBytes = wordArray.sigBytes;\r\n            var map = this._map;\r\n\r\n            // Clamp excess bits\r\n            wordArray.clamp();\r\n\r\n            // Convert\r\n            var base64Chars = [];\r\n            for (var i = 0; i < sigBytes; i += 3) {\r\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\r\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\r\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\r\n\r\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\r\n\r\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\r\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\r\n                }\r\n            }\r\n\r\n            // Add padding\r\n            var paddingChar = map.charAt(64);\r\n            if (paddingChar) {\r\n                while (base64Chars.length % 4) {\r\n                    base64Chars.push(paddingChar);\r\n                }\r\n            }\r\n\r\n            return base64Chars.join('');\r\n        },\r\n\r\n        /**\r\n         * Converts a Base64 string to a word array.\r\n         *\r\n         * @param {string} base64Str The Base64 string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\r\n         */\r\n        parse: function (base64Str) {\r\n            // Shortcuts\r\n            var base64StrLength = base64Str.length;\r\n            var map = this._map;\r\n\r\n            // Ignore padding\r\n            var paddingChar = map.charAt(64);\r\n            if (paddingChar) {\r\n                var paddingIndex = base64Str.indexOf(paddingChar);\r\n                if (paddingIndex != -1) {\r\n                    base64StrLength = paddingIndex;\r\n                }\r\n            }\r\n\r\n            // Convert\r\n            var words = [];\r\n            var nBytes = 0;\r\n            for (var i = 0; i < base64StrLength; i++) {\r\n                if (i % 4) {\r\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\r\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\r\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\r\n                    nBytes++;\r\n                }\r\n            }\r\n\r\n            return WordArray.create(words, nBytes);\r\n        },\r\n\r\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\r\n    };\r\n}());\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var Base = C_lib.Base;\r\n    var C_enc = C.enc;\r\n    var Utf8 = C_enc.Utf8;\r\n    var C_algo = C.algo;\r\n\r\n    /**\r\n     * HMAC algorithm.\r\n     */\r\n    var HMAC = C_algo.HMAC = Base.extend({\r\n        /**\r\n         * Initializes a newly created HMAC.\r\n         *\r\n         * @param {Hasher} hasher The hash algorithm to use.\r\n         * @param {WordArray|string} key The secret key.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n         */\r\n        init: function (hasher, key) {\r\n            // Init hasher\r\n            hasher = this._hasher = new hasher.init();\r\n\r\n            // Convert string to WordArray, else assume WordArray already\r\n            if (typeof key == 'string') {\r\n                key = Utf8.parse(key);\r\n            }\r\n\r\n            // Shortcuts\r\n            var hasherBlockSize = hasher.blockSize;\r\n            var hasherBlockSizeBytes = hasherBlockSize * 4;\r\n\r\n            // Allow arbitrary length keys\r\n            if (key.sigBytes > hasherBlockSizeBytes) {\r\n                key = hasher.finalize(key);\r\n            }\r\n\r\n            // Clamp excess bits\r\n            key.clamp();\r\n\r\n            // Clone key for inner and outer pads\r\n            var oKey = this._oKey = key.clone();\r\n            var iKey = this._iKey = key.clone();\r\n\r\n            // Shortcuts\r\n            var oKeyWords = oKey.words;\r\n            var iKeyWords = iKey.words;\r\n\r\n            // XOR keys with pad constants\r\n            for (var i = 0; i < hasherBlockSize; i++) {\r\n                oKeyWords[i] ^= 0x5c5c5c5c;\r\n                iKeyWords[i] ^= 0x36363636;\r\n            }\r\n            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\r\n\r\n            // Set initial values\r\n            this.reset();\r\n        },\r\n\r\n        /**\r\n         * Resets this HMAC to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     hmacHasher.reset();\r\n         */\r\n        reset: function () {\r\n            // Shortcut\r\n            var hasher = this._hasher;\r\n\r\n            // Reset\r\n            hasher.reset();\r\n            hasher.update(this._iKey);\r\n        },\r\n\r\n        /**\r\n         * Updates this HMAC with a message.\r\n         *\r\n         * @param {WordArray|string} messageUpdate The message to append.\r\n         *\r\n         * @return {HMAC} This HMAC instance.\r\n         *\r\n         * @example\r\n         *\r\n         *     hmacHasher.update('message');\r\n         *     hmacHasher.update(wordArray);\r\n         */\r\n        update: function (messageUpdate) {\r\n            this._hasher.update(messageUpdate);\r\n\r\n            // Chainable\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Finalizes the HMAC computation.\r\n         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n         *\r\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n         *\r\n         * @return {WordArray} The HMAC.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hmac = hmacHasher.finalize();\r\n         *     var hmac = hmacHasher.finalize('message');\r\n         *     var hmac = hmacHasher.finalize(wordArray);\r\n         */\r\n        finalize: function (messageUpdate) {\r\n            // Shortcut\r\n            var hasher = this._hasher;\r\n\r\n            // Compute HMAC\r\n            var innerHash = hasher.finalize(messageUpdate);\r\n            hasher.reset();\r\n            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\r\n\r\n            return hmac;\r\n        }\r\n    });\r\n}());\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var Hasher = C_lib.Hasher;\r\n    var C_algo = C.algo;\r\n\r\n    // Reusable object\r\n    var W = [];\r\n\r\n    /**\r\n     * SHA-1 hash algorithm.\r\n     */\r\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\r\n        _doReset: function () {\r\n            this._hash = new WordArray.init([\r\n                0x67452301, 0xefcdab89,\r\n                0x98badcfe, 0x10325476,\r\n                0xc3d2e1f0\r\n            ]);\r\n        },\r\n\r\n        _doProcessBlock: function (M, offset) {\r\n            // Shortcut\r\n            var H = this._hash.words;\r\n\r\n            // Working variables\r\n            var a = H[0];\r\n            var b = H[1];\r\n            var c = H[2];\r\n            var d = H[3];\r\n            var e = H[4];\r\n\r\n            // Computation\r\n            for (var i = 0; i < 80; i++) {\r\n                if (i < 16) {\r\n                    W[i] = M[offset + i] | 0;\r\n                } else {\r\n                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n                    W[i] = (n << 1) | (n >>> 31);\r\n                }\r\n\r\n                var t = ((a << 5) | (a >>> 27)) + e + W[i];\r\n                if (i < 20) {\r\n                    t += ((b & c) | (~b & d)) + 0x5a827999;\r\n                } else if (i < 40) {\r\n                    t += (b ^ c ^ d) + 0x6ed9eba1;\r\n                } else if (i < 60) {\r\n                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\r\n                } else /* if (i < 80) */ {\r\n                    t += (b ^ c ^ d) - 0x359d3e2a;\r\n                }\r\n\r\n                e = d;\r\n                d = c;\r\n                c = (b << 30) | (b >>> 2);\r\n                b = a;\r\n                a = t;\r\n            }\r\n\r\n            // Intermediate hash value\r\n            H[0] = (H[0] + a) | 0;\r\n            H[1] = (H[1] + b) | 0;\r\n            H[2] = (H[2] + c) | 0;\r\n            H[3] = (H[3] + d) | 0;\r\n            H[4] = (H[4] + e) | 0;\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n\r\n            var nBitsTotal = this._nDataBytes * 8;\r\n            var nBitsLeft = data.sigBytes * 8;\r\n\r\n            // Add padding\r\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n            data.sigBytes = dataWords.length * 4;\r\n\r\n            // Hash final blocks\r\n            this._process();\r\n\r\n            // Return final computed hash\r\n            return this._hash;\r\n        },\r\n\r\n        clone: function () {\r\n            var clone = Hasher.clone.call(this);\r\n            clone._hash = this._hash.clone();\r\n\r\n            return clone;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Shortcut function to the hasher's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = CryptoJS.SHA1('message');\r\n     *     var hash = CryptoJS.SHA1(wordArray);\r\n     */\r\n    C.SHA1 = Hasher._createHelper(SHA1);\r\n\r\n    /**\r\n     * Shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = CryptoJS.HmacSHA1(message, key);\r\n     */\r\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\r\n}());\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function (Math) {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var Hasher = C_lib.Hasher;\r\n    var C_algo = C.algo;\r\n\r\n    // Initialization and round constants tables\r\n    var H = [];\r\n    var K = [];\r\n\r\n    // Compute constants\r\n    (function () {\r\n        function isPrime(n) {\r\n            var sqrtN = Math.sqrt(n);\r\n            for (var factor = 2; factor <= sqrtN; factor++) {\r\n                if (!(n % factor)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function getFractionalBits(n) {\r\n            return ((n - (n | 0)) * 0x100000000) | 0;\r\n        }\r\n\r\n        var n = 2;\r\n        var nPrime = 0;\r\n        while (nPrime < 64) {\r\n            if (isPrime(n)) {\r\n                if (nPrime < 8) {\r\n                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\r\n                }\r\n                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\r\n\r\n                nPrime++;\r\n            }\r\n\r\n            n++;\r\n        }\r\n    }());\r\n\r\n    // Reusable object\r\n    var W = [];\r\n\r\n    /**\r\n     * SHA-256 hash algorithm.\r\n     */\r\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\r\n        _doReset: function () {\r\n            this._hash = new WordArray.init(H.slice(0));\r\n        },\r\n\r\n        _doProcessBlock: function (M, offset) {\r\n            // Shortcut\r\n            var H = this._hash.words;\r\n\r\n            // Working variables\r\n            var a = H[0];\r\n            var b = H[1];\r\n            var c = H[2];\r\n            var d = H[3];\r\n            var e = H[4];\r\n            var f = H[5];\r\n            var g = H[6];\r\n            var h = H[7];\r\n\r\n            // Computation\r\n            for (var i = 0; i < 64; i++) {\r\n                if (i < 16) {\r\n                    W[i] = M[offset + i] | 0;\r\n                } else {\r\n                    var gamma0x = W[i - 15];\r\n                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\r\n                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\r\n                                   (gamma0x >>> 3);\r\n\r\n                    var gamma1x = W[i - 2];\r\n                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\r\n                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\r\n                                   (gamma1x >>> 10);\r\n\r\n                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\r\n                }\r\n\r\n                var ch  = (e & f) ^ (~e & g);\r\n                var maj = (a & b) ^ (a & c) ^ (b & c);\r\n\r\n                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\r\n                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\r\n\r\n                var t1 = h + sigma1 + ch + K[i] + W[i];\r\n                var t2 = sigma0 + maj;\r\n\r\n                h = g;\r\n                g = f;\r\n                f = e;\r\n                e = (d + t1) | 0;\r\n                d = c;\r\n                c = b;\r\n                b = a;\r\n                a = (t1 + t2) | 0;\r\n            }\r\n\r\n            // Intermediate hash value\r\n            H[0] = (H[0] + a) | 0;\r\n            H[1] = (H[1] + b) | 0;\r\n            H[2] = (H[2] + c) | 0;\r\n            H[3] = (H[3] + d) | 0;\r\n            H[4] = (H[4] + e) | 0;\r\n            H[5] = (H[5] + f) | 0;\r\n            H[6] = (H[6] + g) | 0;\r\n            H[7] = (H[7] + h) | 0;\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n\r\n            var nBitsTotal = this._nDataBytes * 8;\r\n            var nBitsLeft = data.sigBytes * 8;\r\n\r\n            // Add padding\r\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n            data.sigBytes = dataWords.length * 4;\r\n\r\n            // Hash final blocks\r\n            this._process();\r\n\r\n            // Return final computed hash\r\n            return this._hash;\r\n        },\r\n\r\n        clone: function () {\r\n            var clone = Hasher.clone.call(this);\r\n            clone._hash = this._hash.clone();\r\n\r\n            return clone;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Shortcut function to the hasher's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = CryptoJS.SHA256('message');\r\n     *     var hash = CryptoJS.SHA256(wordArray);\r\n     */\r\n    C.SHA256 = Hasher._createHelper(SHA256);\r\n\r\n    /**\r\n     * Shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = CryptoJS.HmacSHA256(message, key);\r\n     */\r\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\r\n}(Math));\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Check if typed arrays are supported\r\n    if (typeof ArrayBuffer != 'function') {\r\n        return;\r\n    }\r\n\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n\r\n    // Reference original init\r\n    var superInit = WordArray.init;\r\n\r\n    // Augment WordArray.init to handle typed arrays\r\n    var subInit = WordArray.init = function (typedArray) {\r\n        // Convert buffers to uint8\r\n        if (typedArray instanceof ArrayBuffer) {\r\n            typedArray = new Uint8Array(typedArray);\r\n        }\r\n\r\n        // Convert other array views to uint8\r\n        if (\r\n            typedArray instanceof Int8Array ||\r\n            typedArray instanceof Uint8ClampedArray ||\r\n            typedArray instanceof Int16Array ||\r\n            typedArray instanceof Uint16Array ||\r\n            typedArray instanceof Int32Array ||\r\n            typedArray instanceof Uint32Array ||\r\n            typedArray instanceof Float32Array ||\r\n            typedArray instanceof Float64Array\r\n        ) {\r\n            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\r\n        }\r\n\r\n        // Handle Uint8Array\r\n        if (typedArray instanceof Uint8Array) {\r\n            // Shortcut\r\n            var typedArrayByteLength = typedArray.byteLength;\r\n\r\n            // Extract bytes\r\n            var words = [];\r\n            for (var i = 0; i < typedArrayByteLength; i++) {\r\n                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            // Initialize this word array\r\n            superInit.call(this, words, typedArrayByteLength);\r\n        } else {\r\n            // Else call normal init\r\n            superInit.apply(this, arguments);\r\n        }\r\n    };\r\n\r\n    subInit.prototype = WordArray;\r\n}());\r\n","/*globals qq */\r\nqq.s3 = qq.s3 || {};\r\n\r\nqq.s3.util = qq.s3.util || (function() {\r\n    \"use strict\";\r\n\r\n    return {\r\n        ALGORITHM_PARAM_NAME: \"x-amz-algorithm\",\r\n\r\n        AWS_PARAM_PREFIX: \"x-amz-meta-\",\r\n\r\n        CREDENTIAL_PARAM_NAME: \"x-amz-credential\",\r\n\r\n        DATE_PARAM_NAME: \"x-amz-date\",\r\n\r\n        REDUCED_REDUNDANCY_PARAM_NAME: \"x-amz-storage-class\",\r\n        REDUCED_REDUNDANCY_PARAM_VALUE: \"REDUCED_REDUNDANCY\",\r\n\r\n        SERVER_SIDE_ENCRYPTION_PARAM_NAME: \"x-amz-server-side-encryption\",\r\n        SERVER_SIDE_ENCRYPTION_PARAM_VALUE: \"AES256\",\r\n\r\n        SESSION_TOKEN_PARAM_NAME: \"x-amz-security-token\",\r\n\r\n        V4_ALGORITHM_PARAM_VALUE: \"AWS4-HMAC-SHA256\",\r\n\r\n        V4_SIGNATURE_PARAM_NAME: \"x-amz-signature\",\r\n\r\n        CASE_SENSITIVE_PARAM_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\"\r\n        ],\r\n\r\n        UNSIGNABLE_REST_HEADER_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\"\r\n        ],\r\n\r\n        UNPREFIXED_PARAM_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\",\r\n            \"x-amz-server-side-encryption-customer-algorithm\",\r\n            \"x-amz-server-side-encryption-customer-key\",\r\n            \"x-amz-server-side-encryption-customer-key-MD5\"\r\n        ],\r\n\r\n        /**\r\n         * This allows for the region to be specified in the bucket's endpoint URL, or not.\r\n         *\r\n         * Examples of some valid endpoints are:\r\n         *     http://foo.s3.amazonaws.com\r\n         *     https://foo.s3.amazonaws.com\r\n         *     http://foo.s3-ap-northeast-1.amazonaws.com\r\n         *     foo.s3.amazonaws.com\r\n         *     http://foo.bar.com\r\n         *     http://s3.amazonaws.com/foo.bar.com\r\n         * ...etc\r\n         *\r\n         * @param endpoint The bucket's URL.\r\n         * @returns {String || undefined} The bucket name, or undefined if the URL cannot be parsed.\r\n         */\r\n        getBucket: function(endpoint) {\r\n            var patterns = [\r\n                    //bucket in domain\r\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)\\.s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com/i,\r\n                    //bucket in path\r\n                    /^(?:https?:\\/\\/)?s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com\\/([a-z0-9.\\-_]+)/i,\r\n                    //custom domain\r\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)/i\r\n                ],\r\n                bucket;\r\n\r\n            qq.each(patterns, function(idx, pattern) {\r\n                var match = pattern.exec(endpoint);\r\n\r\n                if (match) {\r\n                    bucket = match[1];\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            return bucket;\r\n        },\r\n\r\n        /** Create Prefixed request headers which are appropriate for S3.\r\n         *\r\n         * If the request header is appropriate for S3 (e.g. Cache-Control) then pass\r\n         * it along without a metadata prefix. For all other request header parameter names,\r\n         * apply qq.s3.util.AWS_PARAM_PREFIX before the name.\r\n         * See: http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html\r\n         */\r\n        _getPrefixedParamName: function(name) {\r\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\r\n                return name;\r\n            }\r\n            return qq.s3.util.AWS_PARAM_PREFIX + name;\r\n        },\r\n\r\n        /**\r\n         * Create a policy document to be signed and sent along with the S3 upload request.\r\n         *\r\n         * @param spec Object with properties use to construct the policy document.\r\n         * @returns {Object} Policy doc.\r\n         */\r\n        getPolicy: function(spec) {\r\n            var policy = {},\r\n                conditions = [],\r\n                bucket = spec.bucket,\r\n                date = spec.date,\r\n                drift = spec.clockDrift,\r\n                key = spec.key,\r\n                accessKey = spec.accessKey,\r\n                acl = spec.acl,\r\n                type = spec.type,\r\n                expectedStatus = spec.expectedStatus,\r\n                sessionToken = spec.sessionToken,\r\n                params = spec.params,\r\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\r\n                minFileSize = spec.minFileSize,\r\n                maxFileSize = spec.maxFileSize,\r\n                reducedRedundancy = spec.reducedRedundancy,\r\n                region = spec.region,\r\n                serverSideEncryption = spec.serverSideEncryption,\r\n                signatureVersion = spec.signatureVersion;\r\n\r\n            policy.expiration = qq.s3.util.getPolicyExpirationDate(date, drift);\r\n\r\n            conditions.push({acl: acl});\r\n            conditions.push({bucket: bucket});\r\n\r\n            if (type) {\r\n                conditions.push({\"Content-Type\": type});\r\n            }\r\n\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            if (expectedStatus) {\r\n                conditions.push({success_action_status: expectedStatus.toString()});\r\n            }\r\n\r\n            if (successRedirectUrl) {\r\n                conditions.push({success_action_redirect: successRedirectUrl});\r\n            }\r\n            // jscs:enable\r\n            if (reducedRedundancy) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\r\n            }\r\n\r\n            if (sessionToken) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\r\n            }\r\n\r\n            if (serverSideEncryption) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\r\n            }\r\n\r\n            if (signatureVersion === 2) {\r\n                conditions.push({key: key});\r\n            }\r\n            else if (signatureVersion === 4) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1].key = key;\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.CREDENTIAL_PARAM_NAME] =\r\n                    qq.s3.util.getV4CredentialsString({date: date, key: accessKey, region: region});\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.DATE_PARAM_NAME] =\r\n                    qq.s3.util.getV4PolicyDate(date, drift);\r\n            }\r\n\r\n            // user metadata\r\n            qq.each(params, function(name, val) {\r\n                var awsParamName = qq.s3.util._getPrefixedParamName(name),\r\n                    param = {};\r\n\r\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\r\n                    param[awsParamName] = val;\r\n                }\r\n                else {\r\n                    param[awsParamName] = encodeURIComponent(val);\r\n                }\r\n\r\n                conditions.push(param);\r\n            });\r\n\r\n            policy.conditions = conditions;\r\n\r\n            qq.s3.util.enforceSizeLimits(policy, minFileSize, maxFileSize);\r\n\r\n            return policy;\r\n        },\r\n\r\n        /**\r\n         * Update a previously constructed policy document with updated credentials.  Currently, this only requires we\r\n         * update the session token.  This is only relevant if requests are being signed client-side.\r\n         *\r\n         * @param policy Live policy document\r\n         * @param newSessionToken Updated session token.\r\n         */\r\n        refreshPolicyCredentials: function(policy, newSessionToken) {\r\n            var sessionTokenFound = false;\r\n\r\n            qq.each(policy.conditions, function(oldCondIdx, oldCondObj) {\r\n                qq.each(oldCondObj, function(oldCondName, oldCondVal) {\r\n                    if (oldCondName === qq.s3.util.SESSION_TOKEN_PARAM_NAME) {\r\n                        oldCondObj[oldCondName] = newSessionToken;\r\n                        sessionTokenFound = true;\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (!sessionTokenFound) {\r\n                policy.conditions.push({});\r\n                policy.conditions[policy.conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = newSessionToken;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generates all parameters to be passed along with the S3 upload request.  This includes invoking a callback\r\n         * that is expected to asynchronously retrieve a signature for the policy document.  Note that the server\r\n         * signing the request should reject a \"tainted\" policy document that includes unexpected values, since it is\r\n         * still possible for a malicious user to tamper with these values during policy document generation,\r\n         * before it is sent to the server for signing.\r\n         *\r\n         * @param spec Object with properties: `params`, `type`, `key`, `accessKey`, `acl`, `expectedStatus`, `successRedirectUrl`,\r\n         * `reducedRedundancy`, `region`, `serverSideEncryption`, `version`, and `log()`, along with any options associated with `qq.s3.util.getPolicy()`.\r\n         * @returns {qq.Promise} Promise that will be fulfilled once all parameters have been determined.\r\n         */\r\n        generateAwsParams: function(spec, signPolicyCallback) {\r\n            var awsParams = {},\r\n                customParams = spec.params,\r\n                promise = new qq.Promise(),\r\n                sessionToken = spec.sessionToken,\r\n                drift = spec.clockDrift,\r\n                type = spec.type,\r\n                key = spec.key,\r\n                accessKey = spec.accessKey,\r\n                acl = spec.acl,\r\n                expectedStatus = spec.expectedStatus,\r\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\r\n                reducedRedundancy = spec.reducedRedundancy,\r\n                region = spec.region,\r\n                serverSideEncryption = spec.serverSideEncryption,\r\n                signatureVersion = spec.signatureVersion,\r\n                now = new Date(),\r\n                log = spec.log,\r\n                policyJson;\r\n\r\n            spec.date = now;\r\n            policyJson = qq.s3.util.getPolicy(spec);\r\n\r\n            awsParams.key = key;\r\n\r\n            if (type) {\r\n                awsParams[\"Content-Type\"] = type;\r\n            }\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            if (expectedStatus) {\r\n                awsParams.success_action_status = expectedStatus;\r\n            }\r\n\r\n            if (successRedirectUrl) {\r\n                awsParams.success_action_redirect = successRedirectUrl;\r\n            }\r\n            // jscs:enable\r\n            if (reducedRedundancy) {\r\n                awsParams[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\r\n            }\r\n\r\n            if (serverSideEncryption) {\r\n                awsParams[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\r\n            }\r\n\r\n            if (sessionToken) {\r\n                awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\r\n            }\r\n\r\n            awsParams.acl = acl;\r\n\r\n            // Custom (user-supplied) params must be prefixed with the value of `qq.s3.util.AWS_PARAM_PREFIX`.\r\n            // Params such as Cache-Control or Content-Disposition will not be prefixed.\r\n            // Prefixed param values will be URI encoded as well.\r\n            qq.each(customParams, function(name, val) {\r\n                var awsParamName = qq.s3.util._getPrefixedParamName(name);\r\n\r\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\r\n                    awsParams[awsParamName] = val;\r\n                }\r\n                else {\r\n                    awsParams[awsParamName] = encodeURIComponent(val);\r\n                }\r\n            });\r\n\r\n            if (signatureVersion === 2) {\r\n                awsParams.AWSAccessKeyId = accessKey;\r\n            }\r\n            else if (signatureVersion === 4) {\r\n                awsParams[qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\r\n                awsParams[qq.s3.util.CREDENTIAL_PARAM_NAME] = qq.s3.util.getV4CredentialsString({date: now, key: accessKey, region: region});\r\n                awsParams[qq.s3.util.DATE_PARAM_NAME] = qq.s3.util.getV4PolicyDate(now, drift);\r\n            }\r\n\r\n            // Invoke a promissory callback that should provide us with a base64-encoded policy doc and an\r\n            // HMAC signature for the policy doc.\r\n            signPolicyCallback(policyJson).then(\r\n                function(policyAndSignature, updatedAccessKey, updatedSessionToken) {\r\n                    awsParams.policy = policyAndSignature.policy;\r\n\r\n                    if (spec.signatureVersion === 2) {\r\n                        awsParams.signature = policyAndSignature.signature;\r\n\r\n                        if (updatedAccessKey) {\r\n                            awsParams.AWSAccessKeyId = updatedAccessKey;\r\n                        }\r\n                    }\r\n                    else if (spec.signatureVersion === 4) {\r\n                        awsParams[qq.s3.util.V4_SIGNATURE_PARAM_NAME] = policyAndSignature.signature;\r\n                    }\r\n\r\n                    if (updatedSessionToken) {\r\n                        awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\r\n                    }\r\n\r\n                    promise.success(awsParams);\r\n                },\r\n                function(errorMessage) {\r\n                    errorMessage = errorMessage || \"Can't continue further with request to S3 as we did not receive \" +\r\n                                                   \"a valid signature and policy from the server.\";\r\n\r\n                    log(\"Policy signing failed.  \" + errorMessage, \"error\");\r\n                    promise.failure(errorMessage);\r\n                }\r\n            );\r\n\r\n            return promise;\r\n        },\r\n\r\n        /**\r\n         * Add a condition to an existing S3 upload request policy document used to ensure AWS enforces any size\r\n         * restrictions placed on files server-side.  This is important to do, in case users mess with the client-side\r\n         * checks already in place.\r\n         *\r\n         * @param policy Policy document as an `Object`, with a `conditions` property already attached\r\n         * @param minSize Minimum acceptable size, in bytes\r\n         * @param maxSize Maximum acceptable size, in bytes (0 = unlimited)\r\n         */\r\n        enforceSizeLimits: function(policy, minSize, maxSize) {\r\n            var adjustedMinSize = minSize < 0 ? 0 : minSize,\r\n                // Adjust a maxSize of 0 to the largest possible integer, since we must specify a high and a low in the request\r\n                adjustedMaxSize = maxSize <= 0 ? 9007199254740992 : maxSize;\r\n\r\n            if (minSize > 0 || maxSize > 0) {\r\n                policy.conditions.push([\"content-length-range\", adjustedMinSize.toString(), adjustedMaxSize.toString()]);\r\n            }\r\n        },\r\n\r\n        getPolicyExpirationDate: function(date, drift) {\r\n            var adjustedDate = new Date(date.getTime() + drift);\r\n            return qq.s3.util.getPolicyDate(adjustedDate, 5);\r\n        },\r\n\r\n        getCredentialsDate: function(date) {\r\n            return date.getUTCFullYear() + \"\" +\r\n                (\"0\" + (date.getUTCMonth() + 1)).slice(-2) +\r\n                (\"0\" + date.getUTCDate()).slice(-2);\r\n        },\r\n\r\n        getPolicyDate: function(date, _minutesToAdd_) {\r\n            var minutesToAdd = _minutesToAdd_ || 0,\r\n                pad, r;\r\n\r\n            /*jshint -W014 */\r\n            // Is this going to be a problem if we encounter this moments before 2 AM just before daylight savings time ends?\r\n            date.setMinutes(date.getMinutes() + (minutesToAdd || 0));\r\n\r\n            if (Date.prototype.toISOString) {\r\n                return date.toISOString();\r\n            }\r\n            else {\r\n                pad = function(number) {\r\n                    r = String(number);\r\n\r\n                    if (r.length === 1) {\r\n                        r = \"0\" + r;\r\n                    }\r\n\r\n                    return r;\r\n                };\r\n\r\n                return date.getUTCFullYear()\r\n                    + \"-\" + pad(date.getUTCMonth() + 1)\r\n                    + \"-\" + pad(date.getUTCDate())\r\n                    + \"T\" + pad(date.getUTCHours())\r\n                    + \":\" + pad(date.getUTCMinutes())\r\n                    + \":\" + pad(date.getUTCSeconds())\r\n                    + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\r\n                    + \"Z\";\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Looks at a response from S3 contained in an iframe and parses the query string in an attempt to identify\r\n         * the associated resource.\r\n         *\r\n         * @param iframe Iframe containing response\r\n         * @returns {{bucket: *, key: *, etag: *}}\r\n         */\r\n        parseIframeResponse: function(iframe) {\r\n            var doc = iframe.contentDocument || iframe.contentWindow.document,\r\n                queryString = doc.location.search,\r\n                match = /bucket=(.+)&key=(.+)&etag=(.+)/.exec(queryString);\r\n\r\n            if (match) {\r\n                return {\r\n                    bucket: match[1],\r\n                    key: match[2],\r\n                    etag: match[3].replace(/%22/g, \"\")\r\n                };\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param successRedirectUrl Relative or absolute location of success redirect page\r\n         * @returns {*|string} undefined if the parameter is undefined, otherwise the absolute location of the success redirect page\r\n         */\r\n        getSuccessRedirectAbsoluteUrl: function(successRedirectUrl) {\r\n            if (successRedirectUrl) {\r\n                var targetAnchorContainer = document.createElement(\"div\"),\r\n                    targetAnchor;\r\n\r\n                if (qq.ie7()) {\r\n                    // Note that we must make use of `innerHTML` for IE7 only instead of simply creating an anchor via\r\n                    // `document.createElement('a')` and setting the `href` attribute.  The latter approach does not allow us to\r\n                    // obtain an absolute URL in IE7 if the `endpoint` is a relative URL.\r\n                    targetAnchorContainer.innerHTML = \"<a href='\" + successRedirectUrl + \"'></a>\";\r\n                    targetAnchor = targetAnchorContainer.firstChild;\r\n                    return targetAnchor.href;\r\n                }\r\n                else {\r\n                    // IE8 and IE9 do not seem to derive an absolute URL from a relative URL using the `innerHTML`\r\n                    // approach above, so we'll just create an anchor this way and set it's `href` attribute.\r\n                    // Due to yet another quirk in IE8 and IE9, we have to set the `href` equal to itself\r\n                    // in order to ensure relative URLs will be properly parsed.\r\n                    targetAnchor = document.createElement(\"a\");\r\n                    targetAnchor.href = successRedirectUrl;\r\n                    targetAnchor.href = targetAnchor.href;\r\n                    return targetAnchor.href;\r\n                }\r\n            }\r\n        },\r\n\r\n        getV4CredentialsString: function(spec) {\r\n            return spec.key + \"/\" +\r\n                qq.s3.util.getCredentialsDate(spec.date) + \"/\" +\r\n                spec.region + \"/s3/aws4_request\";\r\n        },\r\n\r\n        getV4PolicyDate: function(date, drift) {\r\n            var adjustedDate = new Date(date.getTime() + drift);\r\n\r\n            return qq.s3.util.getCredentialsDate(adjustedDate) + \"T\" +\r\n                    (\"0\" + adjustedDate.getUTCHours()).slice(-2) +\r\n                    (\"0\" + adjustedDate.getUTCMinutes()).slice(-2) +\r\n                    (\"0\" + adjustedDate.getUTCSeconds()).slice(-2) +\r\n                    \"Z\";\r\n        },\r\n\r\n        // AWS employs a strict interpretation of [RFC 3986](http://tools.ietf.org/html/rfc3986#page-12).\r\n        // So, we must ensure all reserved characters listed in the spec are percent-encoded,\r\n        // and spaces are replaced with \"+\".\r\n        encodeQueryStringParam: function(param) {\r\n            var percentEncoded = encodeURIComponent(param);\r\n\r\n            // %-encode characters not handled by `encodeURIComponent` (to follow RFC 3986)\r\n            percentEncoded = percentEncoded.replace(/[!'()]/g, escape);\r\n\r\n            // %-encode characters not handled by `escape` (to follow RFC 3986)\r\n            percentEncoded = percentEncoded.replace(/\\*/g, \"%2A\");\r\n\r\n            // replace percent-encoded spaces with a \"+\"\r\n            return percentEncoded.replace(/%20/g, \"+\");\r\n        },\r\n        /**\r\n         * Escapes url part as for AWS requirements\r\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\r\n         */\r\n        uriEscape: function(string) {\r\n            var output = encodeURIComponent(string);\r\n            output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);\r\n            output = output.replace(/[*]/g, function(ch) {\r\n                return \"%\" + ch.charCodeAt(0).toString(16).toUpperCase();\r\n            });\r\n            return output;\r\n        },\r\n        /**\r\n         * Escapes a path as for AWS requirement\r\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\r\n         */\r\n        uriEscapePath: function(path) {\r\n            var parts = [];\r\n            qq.each(path.split(\"/\"), function(idx, item) {\r\n                parts.push(qq.s3.util.uriEscape(item));\r\n            });\r\n            return parts.join(\"/\");\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to S3.\n * Some inherited options and API methods have a special meaning in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploaderBasic = function(o) {\n        var options = {\n            request: {\n                // public key (required for server-side signing, ignored if `credentials` have been provided)\n                accessKey: null,\n\n                // padding, in milliseconds, to add to the x-amz-date header & the policy expiration date\n                clockDrift: 0\n            },\n\n            objectProperties: {\n                acl: \"private\",\n\n                // string or a function which may be promissory\n                bucket: qq.bind(function(id) {\n                    return qq.s3.util.getBucket(this.getEndpoint(id));\n                }, this),\n\n                // string or a function which may be promissory - only used for V4 multipart uploads\n                host: qq.bind(function(id) {\n                    return (/(?:http|https):\\/\\/(.+)(?:\\/.+)?/).exec(this._endpointStore.get(id))[1];\n                }, this),\n\n                // 'uuid', 'filename', or a function which may be promissory\n                key: \"uuid\",\n\n                reducedRedundancy: false,\n\n                // Defined at http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\n                region: \"us-east-1\",\n\n                serverSideEncryption: false\n            },\n\n            credentials: {\n                // Public key (required).\n                accessKey: null,\n                // Private key (required).\n                secretKey: null,\n                // Expiration date for the credentials (required).  May be an ISO string or a `Date`.\n                expiration: null,\n                // Temporary credentials session token.\n                // Only required for temporary credentials obtained via AssumeRoleWithWebIdentity.\n                sessionToken: null\n            },\n\n            // All but `version` are ignored if `credentials` is provided.\n            signature: {\n                customHeaders: {},\n                endpoint: null,\n                version: 2\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            // required if non-File-API browsers, such as IE9 and older, are used\n            iframeSupport: {\n                localBlankPagePath: null\n            },\n\n            chunking: {\n                // minimum part size is 5 MiB when uploading to S3\n                partSize: 5242880\n            },\n\n            cors: {\n                allowXdr: true\n            },\n\n            callbacks: {\n                onCredentialsExpired: function() {}\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        if (!this.setCredentials(options.credentials, true)) {\n            this._currentCredentials.accessKey = options.request.accessKey;\n        }\n\n        this._aclStore = this._createStore(options.objectProperties.acl);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds S3 keys for file representations constructed from a session request.\n        this._cannedKeys = {};\n        // Holds S3 buckets for file representations constructed from a session request.\n        this._cannedBuckets = {};\n\n        this._buckets = {};\n        this._hosts = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, {\n        getBucket: function(id) {\n            if (this._cannedBuckets[id] == null) {\n                return this._buckets[id];\n            }\n            return this._cannedBuckets[id];\n        },\n\n        /**\n         * @param id File ID\n         * @returns {*} Key name associated w/ the file, if one exists\n         */\n        getKey: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedKeys[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n\n            return this._cannedKeys[id];\n        },\n\n        /**\n         * Override the parent's reset function to cleanup various S3-related items.\n         */\n        reset: function() {\n            qq.FineUploaderBasic.prototype.reset.call(this);\n            this._failedSuccessRequestCallbacks = [];\n            this._buckets = {};\n            this._hosts = {};\n        },\n\n        setCredentials: function(credentials, ignoreEmpty) {\n            if (credentials && credentials.secretKey) {\n                if (!credentials.accessKey) {\n                    throw new qq.Error(\"Invalid credentials: no accessKey\");\n                }\n                else if (!credentials.expiration) {\n                    throw new qq.Error(\"Invalid credentials: no expiration\");\n                }\n                else {\n                    this._currentCredentials = qq.extend({}, credentials);\n\n                    // Ensure expiration is a `Date`.  If initially a string, assuming it is in ISO format.\n                    if (qq.isString(credentials.expiration)) {\n                        this._currentCredentials.expiration = new Date(credentials.expiration);\n                    }\n                }\n\n                return true;\n            }\n            else if (!ignoreEmpty) {\n                throw new qq.Error(\"Invalid credentials parameter!\");\n            }\n            else {\n                this._currentCredentials = {};\n            }\n        },\n\n        setAcl: function(acl, id) {\n            this._aclStore.set(acl, id);\n        },\n\n        /**\n         * Ensures the parent's upload handler creator passes any additional S3-specific options to the handler as well\n         * as information required to instantiate the specific handler based on the current browser's capabilities.\n         *\n         * @returns {qq.UploadHandlerController}\n         * @private\n         */\n        _createUploadHandler: function() {\n            var self = this,\n                additionalOptions = {\n                    aclStore: this._aclStore,\n                    getBucket: qq.bind(this._determineBucket, this),\n                    getHost: qq.bind(this._determineHost, this),\n                    getKeyName: qq.bind(this._determineKeyName, this),\n                    iframeSupport: this._options.iframeSupport,\n                    objectProperties: this._options.objectProperties,\n                    signature: this._options.signature,\n                    clockDrift: this._options.request.clockDrift,\n                    // pass size limit validation values to include in the request so AWS enforces this server-side\n                    validation: {\n                        minSizeLimit: this._options.validation.minSizeLimit,\n                        maxSizeLimit: this._options.validation.sizeLimit\n                    }\n                };\n\n            // We assume HTTP if it is missing from the start of the endpoint string.\n            qq.override(this._endpointStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var endpoint = super_.get(id);\n\n                        if (endpoint.indexOf(\"http\") < 0) {\n                            return \"http://\" + endpoint;\n                        }\n\n                        return endpoint;\n                    }\n                };\n            });\n\n            // Some param names should be lower case to avoid signature mismatches\n            qq.override(this._paramsStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var oldParams = super_.get(id),\n                            modifiedParams = {};\n\n                        qq.each(oldParams, function(name, val) {\n                            var paramName = name;\n\n                            if (qq.indexOf(qq.s3.util.CASE_SENSITIVE_PARAM_NAMES, paramName) < 0) {\n                                paramName = paramName.toLowerCase();\n                            }\n\n                            modifiedParams[paramName] = qq.isFunction(val) ? val() : val;\n                        });\n\n                        return modifiedParams;\n                    }\n                };\n            });\n\n            additionalOptions.signature.credentialsProvider = {\n                get: function() {\n                    return self._currentCredentials;\n                },\n\n                onExpired: function() {\n                    var updateCredentials = new qq.Promise(),\n                        callbackRetVal = self._options.callbacks.onCredentialsExpired();\n\n                    if (qq.isGenericPromise(callbackRetVal)) {\n                        callbackRetVal.then(function(credentials) {\n                            try {\n                                self.setCredentials(credentials);\n                                updateCredentials.success();\n                            }\n                            catch (error) {\n                                self.log(\"Invalid credentials returned from onCredentialsExpired callback! (\" + error.message + \")\", \"error\");\n                                updateCredentials.failure(\"onCredentialsExpired did not return valid credentials.\");\n                            }\n                        }, function(errorMsg) {\n                            self.log(\"onCredentialsExpired callback indicated failure! (\" + errorMsg + \")\", \"error\");\n                            updateCredentials.failure(\"onCredentialsExpired callback failed.\");\n                        });\n                    }\n                    else {\n                        self.log(\"onCredentialsExpired callback did not return a promise!\", \"error\");\n                        updateCredentials.failure(\"Unexpected return value for onCredentialsExpired.\");\n                    }\n\n                    return updateCredentials;\n                }\n            };\n\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this, additionalOptions, \"s3\");\n        },\n\n        _determineObjectPropertyValue: function(id, property) {\n            var maybe = this._options.objectProperties[property],\n                promise = new qq.Promise(),\n                self = this;\n\n            if (qq.isFunction(maybe)) {\n                maybe = maybe(id);\n                if (qq.isGenericPromise(maybe)) {\n                    promise = maybe;\n                }\n                else {\n                    promise.success(maybe);\n                }\n            }\n            else if (qq.isString(maybe)) {\n                promise.success(maybe);\n            }\n\n            promise.then(\n                function success(value) {\n                    self[\"_\" + property + \"s\"][id] = value;\n                },\n\n                function failure(errorMsg) {\n                    qq.log(\"Problem determining \" + property + \" for ID \" + id + \" (\" + errorMsg + \")\", \"error\");\n                }\n            );\n\n            return promise;\n        },\n\n        _determineBucket: function(id) {\n            return this._determineObjectPropertyValue(id, \"bucket\");\n        },\n\n        _determineHost: function(id) {\n            return this._determineObjectPropertyValue(id, \"host\");\n        },\n\n        /**\n         * Determine the file's key name and passes it to the caller via a promissory callback.  This also may\n         * delegate to an integrator-defined function that determines the file's key name on demand,\n         * which also may be promissory.\n         *\n         * @param id ID of the file\n         * @param filename Name of the file\n         * @returns {qq.Promise} A promise that will be fulfilled when the key name has been determined (and will be passed to the caller via the success callback).\n         * @private\n         */\n        _determineKeyName: function(id, filename) {\n            /*jshint -W015*/\n            var promise = new qq.Promise(),\n                keynameLogic = this._options.objectProperties.key,\n                extension = qq.getExtension(filename),\n                onGetKeynameFailure = promise.failure,\n                onGetKeynameSuccess = function(keyname, extension) {\n                    var keynameToUse = keyname;\n\n                    if (extension !== undefined) {\n                        keynameToUse += \".\" + extension;\n                    }\n\n                    promise.success(keynameToUse);\n                };\n\n            switch (keynameLogic) {\n                case \"uuid\":\n                    onGetKeynameSuccess(this.getUuid(id), extension);\n                    break;\n                case \"filename\":\n                    onGetKeynameSuccess(filename);\n                    break;\n                default:\n                    if (qq.isFunction(keynameLogic)) {\n                        this._handleKeynameFunction(keynameLogic, id, onGetKeynameSuccess, onGetKeynameFailure);\n                    }\n                    else {\n                        this.log(keynameLogic + \" is not a valid value for the s3.keyname option!\", \"error\");\n                        onGetKeynameFailure();\n                    }\n            }\n\n            return promise;\n        },\n\n        /**\n         * Called by the internal onUpload handler if the integrator has supplied a function to determine\n         * the file's key name.  The integrator's function may be promissory.  We also need to fulfill\n         * the promise contract associated with the caller as well.\n         *\n         * @param keynameFunc Integrator-supplied function that must be executed to determine the key name.  May be promissory.\n         * @param id ID of the associated file\n         * @param successCallback Invoke this if key name retrieval is successful, passing in the key name.\n         * @param failureCallback Invoke this if key name retrieval was unsuccessful.\n         * @private\n         */\n        _handleKeynameFunction: function(keynameFunc, id, successCallback, failureCallback) {\n            var self = this,\n                onSuccess = function(keyname) {\n                    successCallback(keyname);\n                },\n                onFailure = function(reason) {\n                    self.log(qq.format(\"Failed to retrieve key name for {}.  Reason: {}\", id, reason || \"null\"), \"error\");\n                    failureCallback(reason);\n                },\n                keyname = keynameFunc.call(this, id);\n\n            if (qq.isGenericPromise(keyname)) {\n                keyname.then(onSuccess, onFailure);\n            }\n            /*jshint -W116*/\n            else if (keyname == null) {\n                onFailure();\n            }\n            else {\n                onSuccess(keyname);\n            }\n        },\n\n        _getEndpointSpecificParams: function(id, response, maybeXhr) {\n            var params = {\n                key: this.getKey(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                bucket: this.getBucket(id)\n            };\n\n            if (maybeXhr && maybeXhr.getResponseHeader(\"ETag\")) {\n                params.etag = maybeXhr.getResponseHeader(\"ETag\");\n            }\n            else if (response.etag) {\n                params.etag = response.etag;\n            }\n\n            return params;\n        },\n\n        // Hooks into the base internal `_onSubmitDelete` to add key and bucket params to the delete file request.\n        _onSubmitDelete: function(id, onSuccessCallback) {\n            var additionalMandatedParams = {\n                key: this.getKey(id),\n                bucket: this.getBucket(id)\n            };\n\n            return qq.FineUploaderBasic.prototype._onSubmitDelete.call(this, id, onSuccessCallback, additionalMandatedParams);\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.s3Key == null) {\n                throw new qq.Error(\"Did not find s3Key property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedKeys[id] = sessionData.s3Key;\n                this._cannedBuckets[id] = sessionData.s3Bucket;\n            }\n\n            return id;\n        }\n    });\n}());\n","/* globals qq, CryptoJS */\r\n\r\n/**\r\n * Manages creation and communication of s3 signature workers.\r\n */\r\nqq.s3.RequestSignerWorkerManager = function (o) {\r\n    \"use strict\";\r\n    var worker = null,\r\n        workerPromises = {},\r\n        options = {\r\n            workerUrl: null,\r\n            log: function(str, level) {}\r\n        };\r\n    qq.extend(options, o, true);\r\n\r\n    function init() {\r\n        var workerUrl;\r\n        switch (typeof options.workerUrl) {\r\n            case \"string\":\r\n                if (options.workerUrl !== \"inline\") {\r\n                    workerUrl = options.workerUrl;\r\n                } else {\r\n                    workerUrl = qq.s3.createS3InlineWorkerUrl();\r\n                }\r\n                break;\r\n            case \"function\":\r\n                workerUrl = options.workerUrl();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (!workerUrl) {\r\n            return;\r\n        }\r\n        try {\r\n            worker = new Worker(workerUrl);\r\n            worker.onerror = function (e) {\r\n                // Prevent the event from bubbling\r\n                e.preventDefault();\r\n                // log the error, and fail any pending promises.\r\n                options.log(\"Worker encountered an error. Disabling. \" + e.message, \"warn\");\r\n                worker = null;\r\n                var outstandingRequests = Object.keys(workerPromises),\r\n                    i;\r\n                for (i = 0; i < outstandingRequests.length; i++) {\r\n                    workerPromises[outstandingRequests[i]].failure(e);\r\n                    delete workerPromises[outstandingRequests[i]];\r\n                }\r\n            };\r\n            worker.onmessage = function (e) {\r\n                if (!workerPromises[e.data.id]) {\r\n                    options.log(\"Worker returned a result for an request we dont know about.\", \"warn\");\r\n                    return;\r\n                }\r\n                if (e.data.err) {\r\n                    workerPromises[e.data.id].failure(e.data.err);\r\n                } else {\r\n                    workerPromises[e.data.id].success(e.data.resp);\r\n                }\r\n                delete workerPromises[e.data.id];\r\n            };\r\n        }  catch (ex) {\r\n            // worker is not supported or invalid\r\n            options.log(\"Worker failed to be created. Defaulting back to main thread processing.\" + ex, \"warn\");\r\n            worker = null;\r\n        }\r\n    }\r\n    init();\r\n    /*\r\n        Generates the signuare of the given file.\r\n        @param file the file/slice to generate the signature for.\r\n        @returns a promise or null if we can't generate signatures at all.\r\n    */\r\n    this.generateSignature = function (file) {\r\n        if (!worker) {\r\n            return null;\r\n        }\r\n        var promise = new qq.Promise(),\r\n            task = {file: file, id: qq.getUniqueId()};\r\n        workerPromises[task.id] = promise;\r\n        worker.postMessage(task);\r\n        return promise;\r\n    };\r\n};\r\n","/* globals qq, CryptoJS */\r\n\r\n// IE 10 does not support Uint8ClampedArray. We don't need it, but CryptoJS attempts to reference it\r\n// inside a conditional via an instanceof check, which breaks S3 v4 signatures for chunked uploads.\r\nif (!window.Uint8ClampedArray) {\r\n    window.Uint8ClampedArray = function() {};\r\n}\r\n/**\r\n * Handles signature determination for HTML Form Upload requests and Multipart Uploader requests (via the S3 REST API).\r\n *\r\n * If the S3 requests are to be signed server side, this module will send a POST request to the server in an attempt\r\n * to solicit signatures for various S3-related requests.  This module also parses the response and attempts\r\n * to determine if the effort was successful.\r\n *\r\n * If the S3 requests are to be signed client-side, without the help of a server, this module will utilize CryptoJS to\r\n * sign the requests directly in the browser and send them off to S3.\r\n *\r\n * @param o Options associated with all such requests\r\n * @returns {{getSignature: Function}} API method used to initiate the signature request.\r\n * @constructor\r\n */\r\nqq.s3.RequestSigner = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        thisSignatureRequester = this,\r\n        pendingSignatures = {},\r\n        options = {\r\n            expectingPolicy: false,\r\n            method: \"POST\",\r\n            signatureSpec: {\r\n                drift: 0,\r\n                credentialsProvider: {},\r\n                endpoint: null,\r\n                customHeaders: {},\r\n                version: 2\r\n            },\r\n            maxConnections: 3,\r\n            endpointStore: {},\r\n            paramsStore: {},\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            log: function(str, level) {}\r\n        },\r\n        credentialsProvider,\r\n\r\n        generateHeaders = function(signatureConstructor, signature, promise) {\r\n            var headers = signatureConstructor.getHeaders();\r\n\r\n            if (options.signatureSpec.version === 4) {\r\n                headers.Authorization = qq.s3.util.V4_ALGORITHM_PARAM_VALUE +\r\n                    \" Credential=\" + options.signatureSpec.credentialsProvider.get().accessKey + \"/\" +\r\n                    qq.s3.util.getCredentialsDate(signatureConstructor.getRequestDate()) + \"/\" +\r\n                    options.signatureSpec.region + \"/\" +\r\n                    \"s3/aws4_request,\" +\r\n                    \"SignedHeaders=\" + signatureConstructor.getSignedHeaders() + \",\" +\r\n                    \"Signature=\" + signature;\r\n            }\r\n            else {\r\n                headers.Authorization = \"AWS \" + options.signatureSpec.credentialsProvider.get().accessKey + \":\" + signature;\r\n            }\r\n\r\n            promise.success(headers, signatureConstructor.getEndOfUrl());\r\n        },\r\n\r\n        v2 = {\r\n            getStringToSign: function(signatureSpec) {\r\n                return qq.format(\"{}\\n{}\\n{}\\n\\n{}/{}/{}\",\r\n                    signatureSpec.method,\r\n                    signatureSpec.contentMd5 || \"\",\r\n                    signatureSpec.contentType || \"\",\r\n                    signatureSpec.headersStr || \"\\n\",\r\n                    signatureSpec.bucket,\r\n                    signatureSpec.endOfUrl);\r\n            },\r\n\r\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\r\n                var headersWordArray = qq.CryptoJS.enc.Utf8.parse(headersStr),\r\n                    headersHmacSha1 = qq.CryptoJS.HmacSHA1(headersWordArray, credentialsProvider.get().secretKey),\r\n                    headersHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(headersHmacSha1);\r\n\r\n                generateHeaders(signatureConstructor, headersHmacSha1Base64, signatureEffort);\r\n            },\r\n\r\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n                var policyStr = JSON.stringify(policy),\r\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\r\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\r\n                    policyHmacSha1 = qq.CryptoJS.HmacSHA1(base64Policy, credentialsProvider.get().secretKey),\r\n                    policyHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(policyHmacSha1);\r\n\r\n                signatureEffort.success({\r\n                    policy: base64Policy,\r\n                    signature: policyHmacSha1Base64\r\n                }, updatedAccessKey, updatedSessionToken);\r\n            }\r\n        },\r\n\r\n        v4 = {\r\n            getCanonicalQueryString: function(endOfUri) {\r\n                var queryParamIdx = endOfUri.indexOf(\"?\"),\r\n                    canonicalQueryString = \"\",\r\n                    encodedQueryParams, encodedQueryParamNames, queryStrings;\r\n\r\n                if (queryParamIdx >= 0) {\r\n                    encodedQueryParams = {};\r\n                    queryStrings = endOfUri.substr(queryParamIdx + 1).split(\"&\");\r\n\r\n                    qq.each(queryStrings, function(idx, queryString) {\r\n                        var nameAndVal = queryString.split(\"=\"),\r\n                            paramVal = nameAndVal[1];\r\n\r\n                        if (paramVal == null) {\r\n                            paramVal = \"\";\r\n                        }\r\n\r\n                        encodedQueryParams[encodeURIComponent(nameAndVal[0])] = encodeURIComponent(paramVal);\r\n                    });\r\n\r\n                    encodedQueryParamNames = Object.keys(encodedQueryParams).sort();\r\n                    encodedQueryParamNames.forEach(function(encodedQueryParamName, idx) {\r\n                        canonicalQueryString += encodedQueryParamName + \"=\" + encodedQueryParams[encodedQueryParamName];\r\n                        if (idx < encodedQueryParamNames.length - 1) {\r\n                            canonicalQueryString += \"&\";\r\n                        }\r\n                    });\r\n                }\r\n\r\n                return canonicalQueryString;\r\n            },\r\n\r\n            getCanonicalRequest: function(signatureSpec) {\r\n                return qq.format(\"{}\\n{}\\n{}\\n{}\\n{}\\n{}\",\r\n                    signatureSpec.method,\r\n                    v4.getCanonicalUri(signatureSpec.endOfUrl),\r\n                    v4.getCanonicalQueryString(signatureSpec.endOfUrl),\r\n                    signatureSpec.headersStr || \"\\n\",\r\n                    v4.getSignedHeaders(signatureSpec.headerNames),\r\n                    signatureSpec.hashedContent);\r\n            },\r\n\r\n            getCanonicalUri: function(endOfUri) {\r\n                var path = endOfUri,\r\n                    queryParamIdx = endOfUri.indexOf(\"?\");\r\n\r\n                if (queryParamIdx > 0) {\r\n                    path = endOfUri.substr(0, queryParamIdx);\r\n                }\r\n                return \"/\" + path;\r\n            },\r\n\r\n            getEncodedHashedPayload: function(body) {\r\n                var promise,\r\n                    reader;\r\n                if (qq.isBlob(body)) {\r\n                    // We will fallback to the inline reader if the worker was\r\n                    // not loaded correctly\r\n                    if (options.signatureSpec.workerManager) {\r\n                        promise = options.signatureSpec.workerManager.generateSignature(body);\r\n                        if (promise !== null) {\r\n                            return promise;\r\n                        }\r\n                    }\r\n                    promise = new qq.Promise();\r\n                    reader = new FileReader();\r\n                    reader.onloadend = function(e) {\r\n                        if (e.target.readyState === FileReader.DONE) {\r\n                            if (e.target.error) {\r\n                                promise.failure(e.target.error);\r\n                            }\r\n                            else {\r\n                                var wordArray = qq.CryptoJS.lib.WordArray.create(e.target.result);\r\n                                promise.success(qq.CryptoJS.SHA256(wordArray).toString());\r\n                            }\r\n                        }\r\n                    };\r\n                    reader.readAsArrayBuffer(body);\r\n                    return promise;\r\n                }\r\n                promise = new qq.Promise();\r\n                body = body || \"\";\r\n                promise.success(qq.CryptoJS.SHA256(body).toString());\r\n                return promise;\r\n            },\r\n\r\n            getScope: function(date, region) {\r\n                return qq.s3.util.getCredentialsDate(date) + \"/\" +\r\n                    region + \"/s3/aws4_request\";\r\n            },\r\n\r\n            getStringToSign: function(signatureSpec) {\r\n                var canonicalRequest = v4.getCanonicalRequest(signatureSpec),\r\n                    date = qq.s3.util.getV4PolicyDate(signatureSpec.date, signatureSpec.drift),\r\n                    hashedRequest = qq.CryptoJS.SHA256(canonicalRequest).toString(),\r\n                    scope = v4.getScope(signatureSpec.date, options.signatureSpec.region),\r\n                    stringToSignTemplate = \"AWS4-HMAC-SHA256\\n{}\\n{}\\n{}\";\r\n\r\n                return {\r\n                    hashed: qq.format(stringToSignTemplate, date, scope, hashedRequest),\r\n                    raw: qq.format(stringToSignTemplate, date, scope, canonicalRequest)\r\n                };\r\n            },\r\n\r\n            getSignedHeaders: function(headerNames) {\r\n                var signedHeaders = \"\";\r\n\r\n                headerNames.forEach(function(headerName, idx) {\r\n                    signedHeaders += headerName.toLowerCase();\r\n\r\n                    if (idx < headerNames.length - 1) {\r\n                        signedHeaders += \";\";\r\n                    }\r\n                });\r\n\r\n                return signedHeaders;\r\n            },\r\n\r\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\r\n                var secretKey = credentialsProvider.get().secretKey,\r\n                    headersPattern = /.+\\n.+\\n(\\d+)\\/(.+)\\/s3\\/.+\\n(.+)/,\r\n                    matches = headersPattern.exec(headersStr),\r\n                    dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\r\n\r\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\r\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\r\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\r\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\r\n\r\n                generateHeaders(signatureConstructor, qq.CryptoJS.HmacSHA256(headersStr, signingKey), signatureEffort);\r\n            },\r\n\r\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n                var policyStr = JSON.stringify(policy),\r\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\r\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\r\n                    secretKey = credentialsProvider.get().secretKey,\r\n                    credentialPattern = /.+\\/(.+)\\/(.+)\\/s3\\/aws4_request/,\r\n                    credentialCondition = (function() {\r\n                        var credential = null;\r\n                        qq.each(policy.conditions, function(key, condition) {\r\n                            var val = condition[\"x-amz-credential\"];\r\n                            if (val) {\r\n                                credential = val;\r\n                                return false;\r\n                            }\r\n                        });\r\n                        return credential;\r\n                    }()),\r\n                    matches, dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\r\n\r\n                matches = credentialPattern.exec(credentialCondition);\r\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\r\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\r\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\r\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\r\n\r\n                signatureEffort.success({\r\n                    policy: base64Policy,\r\n                    signature: qq.CryptoJS.HmacSHA256(base64Policy, signingKey).toString()\r\n                }, updatedAccessKey, updatedSessionToken);\r\n            }\r\n        };\r\n\r\n    qq.extend(options, o, true);\r\n    credentialsProvider = options.signatureSpec.credentialsProvider;\r\n\r\n    function handleSignatureReceived(id, xhrOrXdr, isError) {\r\n        var responseJson = xhrOrXdr.responseText,\r\n            pendingSignatureData = pendingSignatures[id],\r\n            promise = pendingSignatureData.promise,\r\n            signatureConstructor = pendingSignatureData.signatureConstructor,\r\n            errorMessage, response;\r\n\r\n        delete pendingSignatures[id];\r\n\r\n        // Attempt to parse what we would expect to be a JSON response\r\n        if (responseJson) {\r\n            try {\r\n                response = qq.parseJson(responseJson);\r\n            }\r\n            catch (error) {\r\n                options.log(\"Error attempting to parse signature response: \" + error, \"error\");\r\n            }\r\n        }\r\n\r\n        // If the response is parsable and contains an `error` property, use it as the error message\r\n        if (response && response.error) {\r\n            isError = true;\r\n            errorMessage = response.error;\r\n        }\r\n        // If we have received a parsable response, and it has an `invalid` property,\r\n        // the policy document or request headers may have been tampered with client-side.\r\n        else if (response && response.invalid) {\r\n            isError = true;\r\n            errorMessage = \"Invalid policy document or request headers!\";\r\n        }\r\n        // Make sure the response contains policy & signature properties\r\n        else if (response) {\r\n            if (options.expectingPolicy && !response.policy) {\r\n                isError = true;\r\n                errorMessage = \"Response does not include the base64 encoded policy!\";\r\n            }\r\n            else if (!response.signature) {\r\n                isError = true;\r\n                errorMessage = \"Response does not include the signature!\";\r\n            }\r\n        }\r\n        // Something unknown went wrong\r\n        else {\r\n            isError = true;\r\n            errorMessage = \"Received an empty or invalid response from the server!\";\r\n        }\r\n\r\n        if (isError) {\r\n            if (errorMessage) {\r\n                options.log(errorMessage, \"error\");\r\n            }\r\n\r\n            promise.failure(errorMessage);\r\n        }\r\n        else if (signatureConstructor) {\r\n            generateHeaders(signatureConstructor, response.signature, promise);\r\n        }\r\n        else {\r\n            promise.success(response);\r\n        }\r\n    }\r\n\r\n    function getStringToSignArtifacts(id, version, requestInfo) {\r\n        var promise = new qq.Promise(),\r\n            method = \"POST\",\r\n            headerNames = [],\r\n            headersStr = \"\",\r\n            now = new Date(),\r\n            endOfUrl, signatureSpec, toSign,\r\n\r\n            generateStringToSign = function(requestInfo) {\r\n                var contentMd5,\r\n                    headerIndexesToRemove = [];\r\n\r\n                qq.each(requestInfo.headers, function(name) {\r\n                    headerNames.push(name);\r\n                });\r\n                headerNames.sort();\r\n\r\n                qq.each(headerNames, function(idx, headerName) {\r\n                    if (qq.indexOf(qq.s3.util.UNSIGNABLE_REST_HEADER_NAMES, headerName) < 0) {\r\n                        headersStr += headerName.toLowerCase() + \":\" + requestInfo.headers[headerName].trim() + \"\\n\";\r\n                    }\r\n                    else if (headerName === \"Content-MD5\") {\r\n                        contentMd5 = requestInfo.headers[headerName];\r\n                    }\r\n                    else {\r\n                        headerIndexesToRemove.unshift(idx);\r\n                    }\r\n                });\r\n\r\n                qq.each(headerIndexesToRemove, function(idx, headerIdx) {\r\n                    headerNames.splice(headerIdx, 1);\r\n                });\r\n\r\n                signatureSpec = {\r\n                    bucket: requestInfo.bucket,\r\n                    contentMd5: contentMd5,\r\n                    contentType: requestInfo.contentType,\r\n                    date: now,\r\n                    drift: options.signatureSpec.drift,\r\n                    endOfUrl: endOfUrl,\r\n                    hashedContent: requestInfo.hashedContent,\r\n                    headerNames: headerNames,\r\n                    headersStr: headersStr,\r\n                    method: method\r\n                };\r\n\r\n                toSign = version === 2 ? v2.getStringToSign(signatureSpec) : v4.getStringToSign(signatureSpec);\r\n\r\n                return {\r\n                    date: now,\r\n                    endOfUrl: endOfUrl,\r\n                    signedHeaders: version === 4 ? v4.getSignedHeaders(signatureSpec.headerNames) : null,\r\n                    toSign: version === 4 ? toSign.hashed : toSign,\r\n                    toSignRaw: version === 4 ? toSign.raw : toSign\r\n                };\r\n            };\r\n\r\n        /*jshint indent:false */\r\n        switch (requestInfo.type) {\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_ABORT:\r\n                method = \"DELETE\";\r\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\r\n                break;\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_INITIATE:\r\n                endOfUrl = \"uploads\";\r\n                break;\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_COMPLETE:\r\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\r\n                break;\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_UPLOAD:\r\n                method = \"PUT\";\r\n                endOfUrl = qq.format(\"partNumber={}&uploadId={}\", requestInfo.partNum, requestInfo.uploadId);\r\n                break;\r\n        }\r\n\r\n        endOfUrl = requestInfo.key + \"?\" + endOfUrl;\r\n        if (version === 4) {\r\n            v4.getEncodedHashedPayload(requestInfo.content).then(function(hashedContent) {\r\n                requestInfo.headers[\"x-amz-content-sha256\"] = hashedContent;\r\n                requestInfo.headers.Host = requestInfo.host;\r\n                requestInfo.headers[\"x-amz-date\"] = qq.s3.util.getV4PolicyDate(now, options.signatureSpec.drift);\r\n                requestInfo.hashedContent = hashedContent;\r\n\r\n                promise.success(generateStringToSign(requestInfo));\r\n            }, function (err) {\r\n                promise.failure(err);\r\n            });\r\n        }\r\n        else {\r\n            promise.success(generateStringToSign(requestInfo));\r\n        }\r\n\r\n        return promise;\r\n    }\r\n\r\n    function determineSignatureClientSide(id, toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n        var updatedHeaders;\r\n\r\n        // REST API request\r\n        if (toBeSigned.signatureConstructor) {\r\n            if (updatedSessionToken) {\r\n                updatedHeaders = toBeSigned.signatureConstructor.getHeaders();\r\n                updatedHeaders[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\r\n                toBeSigned.signatureConstructor.withHeaders(updatedHeaders);\r\n            }\r\n\r\n            toBeSigned.signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\r\n                signApiRequest(toBeSigned.signatureConstructor, signatureArtifacts.stringToSign, signatureEffort);\r\n            }, function (err) {\r\n                signatureEffort.failure(err);\r\n            });\r\n        }\r\n        // Form upload (w/ policy document)\r\n        else {\r\n            updatedSessionToken && qq.s3.util.refreshPolicyCredentials(toBeSigned, updatedSessionToken);\r\n            signPolicy(toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken);\r\n        }\r\n    }\r\n\r\n    function signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n        if (options.signatureSpec.version === 4) {\r\n            v4.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\r\n        }\r\n        else {\r\n            v2.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\r\n        }\r\n    }\r\n\r\n    function signApiRequest(signatureConstructor, headersStr, signatureEffort) {\r\n        if (options.signatureSpec.version === 4) {\r\n            v4.signApiRequest(signatureConstructor, headersStr, signatureEffort);\r\n        }\r\n        else {\r\n            v2.signApiRequest(signatureConstructor, headersStr, signatureEffort);\r\n        }\r\n    }\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        acceptHeader: \"application/json\",\r\n        method: options.method,\r\n        contentType: \"application/json; charset=utf-8\",\r\n        endpointStore: {\r\n            get: function() {\r\n                return options.signatureSpec.endpoint;\r\n            }\r\n        },\r\n        paramsStore: options.paramsStore,\r\n        maxConnections: options.maxConnections,\r\n        customHeaders: options.signatureSpec.customHeaders,\r\n        log: options.log,\r\n        onComplete: handleSignatureReceived,\r\n        cors: options.cors\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * On success, an object containing the parsed JSON response will be passed into the success handler if the\r\n         * request succeeds.  Otherwise an error message will be passed into the failure method.\r\n         *\r\n         * @param id File ID.\r\n         * @param toBeSigned an Object that holds the item(s) to be signed\r\n         * @returns {qq.Promise} A promise that is fulfilled when the response has been received.\r\n         */\r\n        getSignature: function(id, toBeSigned) {\r\n            var params = toBeSigned,\r\n                signatureConstructor = toBeSigned.signatureConstructor,\r\n                signatureEffort = new qq.Promise(),\r\n                queryParams;\r\n\r\n            if (options.signatureSpec.version === 4) {\r\n                queryParams = {v4: true};\r\n            }\r\n\r\n            if (credentialsProvider.get().secretKey && qq.CryptoJS) {\r\n                if (credentialsProvider.get().expiration.getTime() > Date.now()) {\r\n                    determineSignatureClientSide(id, toBeSigned, signatureEffort);\r\n                }\r\n                // If credentials are expired, ask for new ones before attempting to sign request\r\n                else {\r\n                    credentialsProvider.onExpired().then(function() {\r\n                        determineSignatureClientSide(id, toBeSigned,\r\n                            signatureEffort,\r\n                            credentialsProvider.get().accessKey,\r\n                            credentialsProvider.get().sessionToken);\r\n                    }, function(errorMsg) {\r\n                        options.log(\"Attempt to update expired credentials apparently failed! Unable to sign request.  \", \"error\");\r\n                        signatureEffort.failure(\"Unable to sign request - expired credentials.\");\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                options.log(\"Submitting S3 signature request for \" + id);\r\n\r\n                if (signatureConstructor) {\r\n                    signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\r\n                        params = {headers: signatureArtifacts.stringToSignRaw};\r\n                        requester.initTransport(id)\r\n                            .withParams(params)\r\n                            .withQueryParams(queryParams)\r\n                            .send();\r\n                    }, function (err) {\r\n                        options.log(\"Failed to construct signature. \", \"error\");\r\n                        signatureEffort.failure(\"Failed to construct signature.\");\r\n                    });\r\n                }\r\n                else {\r\n                    requester.initTransport(id)\r\n                        .withParams(params)\r\n                        .withQueryParams(queryParams)\r\n                        .send();\r\n                }\r\n\r\n                pendingSignatures[id] = {\r\n                    promise: signatureEffort,\r\n                    signatureConstructor: signatureConstructor\r\n                };\r\n            }\r\n\r\n            return signatureEffort;\r\n        },\r\n\r\n        constructStringToSign: function(type, bucket, host, key) {\r\n            var headers = {},\r\n                uploadId, content, contentType, partNum, artifacts;\r\n\r\n            return {\r\n                withHeaders: function(theHeaders) {\r\n                    headers = theHeaders;\r\n                    return this;\r\n                },\r\n\r\n                withUploadId: function(theUploadId) {\r\n                    uploadId = theUploadId;\r\n                    return this;\r\n                },\r\n\r\n                withContent: function(theContent) {\r\n                    content = theContent;\r\n                    return this;\r\n                },\r\n\r\n                withContentType: function(theContentType) {\r\n                    contentType = theContentType;\r\n                    return this;\r\n                },\r\n\r\n                withPartNum: function(thePartNum) {\r\n                    partNum = thePartNum;\r\n                    return this;\r\n                },\r\n\r\n                getToSign: function(id) {\r\n                    var sessionToken = credentialsProvider.get().sessionToken,\r\n                        promise = new qq.Promise(),\r\n                        adjustedDate = new Date(Date.now() + options.signatureSpec.drift);\r\n\r\n                    headers[\"x-amz-date\"] = adjustedDate.toUTCString();\r\n\r\n                    if (sessionToken) {\r\n                        headers[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\r\n                    }\r\n\r\n                    getStringToSignArtifacts(id, options.signatureSpec.version, {\r\n                        bucket: bucket,\r\n                        content: content,\r\n                        contentType: contentType,\r\n                        headers: headers,\r\n                        host: host,\r\n                        key: key,\r\n                        partNum: partNum,\r\n                        type: type,\r\n                        uploadId: uploadId\r\n                    }).then(function(_artifacts_) {\r\n                        artifacts = _artifacts_;\r\n                        promise.success({\r\n                            headers: (function() {\r\n                                if (contentType) {\r\n                                    headers[\"Content-Type\"] = contentType;\r\n                                }\r\n\r\n                                delete headers.Host; // we don't want this to be set on the XHR-initiated request\r\n                                return headers;\r\n                            }()),\r\n                            date: artifacts.date,\r\n                            endOfUrl: artifacts.endOfUrl,\r\n                            signedHeaders: artifacts.signedHeaders,\r\n                            stringToSign: artifacts.toSign,\r\n                            stringToSignRaw: artifacts.toSignRaw\r\n                        });\r\n                    }, function (err) {\r\n                        promise.failure(err);\r\n                    });\r\n\r\n                    return promise;\r\n                },\r\n\r\n                getHeaders: function() {\r\n                    return qq.extend({}, headers);\r\n                },\r\n\r\n                getEndOfUrl: function() {\r\n                    return artifacts && artifacts.endOfUrl;\r\n                },\r\n\r\n                getRequestDate: function() {\r\n                    return artifacts && artifacts.date;\r\n                },\r\n\r\n                getSignedHeaders: function() {\r\n                    return artifacts && artifacts.signedHeaders;\r\n                }\r\n            };\r\n        }\r\n    });\r\n};\r\n\r\nqq.s3.RequestSigner.prototype.REQUEST_TYPE = {\r\n    MULTIPART_INITIATE: \"multipart_initiate\",\r\n    MULTIPART_COMPLETE: \"multipart_complete\",\r\n    MULTIPART_ABORT: \"multipart_abort\",\r\n    MULTIPART_UPLOAD: \"multipart_upload\"\r\n};\r\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Initiate Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadInitiate.html)\n * request to S3 via the REST API.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.s3.InitiateMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingInitiateRequests = {},\n        options = {\n            filenameParam: \"qqfilename\",\n            method: \"POST\",\n            endpointStore: null,\n            paramsStore: null,\n            signatureSpec: null,\n            aclStore: null,\n            reducedRedundancy: false,\n            serverSideEncryption: false,\n            maxConnections: 3,\n            getContentType: function(id) {},\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            getName: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Determine all headers for the \"Initiate MPU\" request, including the \"Authorization\" header, which must be determined\n     * by the local server.  This is a promissory function.  If the server responds with a signature, the headers\n     * (including the Authorization header) will be passed into the success method of the promise.  Otherwise, the failure\n     * method on the promise will be called.\n     *\n     * @param id Associated file ID\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id) {\n        var bucket = options.getBucket(id),\n            host = options.getHost(id),\n            headers = {},\n            promise = new qq.Promise(),\n            key = options.getKey(id),\n            signatureConstructor;\n\n        headers[\"x-amz-acl\"] = options.aclStore.get(id);\n\n        if (options.reducedRedundancy) {\n            headers[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n        }\n\n        if (options.serverSideEncryption) {\n            headers[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n        }\n\n        headers[qq.s3.util.AWS_PARAM_PREFIX + options.filenameParam] = encodeURIComponent(options.getName(id));\n\n        qq.each(options.paramsStore.get(id), function(name, val) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                headers[name] = val;\n            }\n            else {\n                headers[qq.s3.util.AWS_PARAM_PREFIX + name] = encodeURIComponent(val);\n            }\n        });\n\n        signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n            (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_INITIATE, bucket, host, key)\n            .withContentType(options.getContentType(id))\n            .withHeaders(headers);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Initiate MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleInitiateRequestComplete(id, xhr, isError) {\n        var promise = pendingInitiateRequests[id],\n            domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            uploadIdElements, messageElements, uploadId, errorMessage, status;\n\n        delete pendingInitiateRequests[id];\n\n        // The base ajax requester may declare the request to be a failure based on status code.\n        if (isError) {\n            status = xhr.status;\n\n            messageElements = responseDoc.getElementsByTagName(\"Message\");\n            if (messageElements.length > 0) {\n                errorMessage = messageElements[0].textContent;\n            }\n        }\n        // If the base ajax requester has not declared this a failure, make sure we can retrieve the uploadId from the response.\n        else {\n            uploadIdElements = responseDoc.getElementsByTagName(\"UploadId\");\n            if (uploadIdElements.length > 0) {\n                uploadId = uploadIdElements[0].textContent;\n            }\n            else {\n                errorMessage = \"Upload ID missing from request\";\n            }\n        }\n\n        // Either fail the promise (passing a descriptive error message) or declare it a success (passing the upload ID)\n        if (uploadId === undefined) {\n            if (errorMessage) {\n                options.log(qq.format(\"Specific problem detected initiating multipart upload request for {}: '{}'.\", id, errorMessage), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Unexplained error with initiate multipart upload request for {}.  Status code {}.\", id, status), \"error\");\n            }\n\n            promise.failure(\"Problem initiating upload request.\", xhr);\n        }\n        else {\n            options.log(qq.format(\"Initiate multipart upload request successful for {}.  Upload ID is {}\", id, uploadId));\n            promise.success(uploadId, xhr);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleInitiateRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Initiate MPU\" request to AWS via the REST API.  First, though, we must get a signature from the\n         * local server for the request.  If all is successful, the uploadId from AWS will be passed into the promise's\n         * success handler. Otherwise, an error message will ultimately be passed into the failure method.\n         *\n         * @param id The ID associated with the file\n         * @returns {qq.Promise}\n         */\n        send: function(id) {\n            var promise = new qq.Promise();\n\n            getHeaders(id).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 initiate multipart upload request for \" + id);\n\n                pendingInitiateRequests[id] = promise;\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Complete Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadComplete.html)\n * request to S3 via the REST API.\n *\n * @param o Options passed by the creator, to overwrite any default option values.\n * @constructor\n */\nqq.s3.CompleteMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingCompleteRequests = {},\n        options = {\n            method: \"POST\",\n            contentType: \"text/xml\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Complete\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId, body) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_COMPLETE, bucket, host, options.getKey(id))\n                .withUploadId(uploadId)\n                .withContent(body)\n                .withContentType(\"application/xml; charset=UTF-8\");\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Complete MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleCompleteRequestComplete(id, xhr, isError) {\n        var promise = pendingCompleteRequests[id],\n            domParser = new DOMParser(),\n            bucket = options.getBucket(id),\n            key = options.getKey(id),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            bucketEls = responseDoc.getElementsByTagName(\"Bucket\"),\n            keyEls = responseDoc.getElementsByTagName(\"Key\");\n\n        delete pendingCompleteRequests[id];\n\n        options.log(qq.format(\"Complete response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Complete Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (bucketEls.length && keyEls.length) {\n                if (bucketEls[0].textContent !== bucket) {\n                    isError = true;\n                    options.log(qq.format(\"Wrong bucket in response to Complete Multipart Upload request for {}.\", id), \"error\");\n                }\n\n                // TODO Compare key name from response w/ expected key name if AWS ever fixes the encoding of key names in this response.\n            }\n            else {\n                isError = true;\n                options.log(qq.format(\"Missing bucket and/or key in response to Complete Multipart Upload request for {}.\", id), \"error\");\n            }\n        }\n\n        if (isError) {\n            promise.failure(\"Problem combining the file parts!\", xhr);\n        }\n        else {\n            promise.success({}, xhr);\n        }\n    }\n\n    /**\n     * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n     * @returns {string} XML string containing the body to send with the \"Complete\" request\n     */\n    function getCompleteRequestBody(etagEntries) {\n        var doc = document.implementation.createDocument(null, \"CompleteMultipartUpload\", null);\n\n        // The entries MUST be sorted by part number, per the AWS API spec.\n        etagEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(etagEntries, function(idx, etagEntry) {\n            var part = etagEntry.part,\n                etag = etagEntry.etag,\n                partEl = doc.createElement(\"Part\"),\n                partNumEl = doc.createElement(\"PartNumber\"),\n                partNumTextEl = doc.createTextNode(part),\n                etagTextEl = doc.createTextNode(etag),\n                etagEl = doc.createElement(\"ETag\");\n\n            etagEl.appendChild(etagTextEl);\n            partNumEl.appendChild(partNumTextEl);\n            partEl.appendChild(partNumEl);\n            partEl.appendChild(etagEl);\n            qq(doc).children()[0].appendChild(partEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: \"application/xml; charset=UTF-8\",\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleCompleteRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Complete\" request and fulfills the returned promise when the success of this request is known.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n         * @returns {qq.Promise}\n         */\n        send: function(id, uploadId, etagEntries) {\n            var promise = new qq.Promise(),\n                body = getCompleteRequestBody(etagEntries);\n\n            getHeaders(id, uploadId, body).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 complete multipart upload request for \" + id);\n\n                pendingCompleteRequests[id] = promise;\n                delete headers[\"Content-Type\"];\n\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .withPayload(body)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Ajax requester used to send an [\"Abort Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadAbort.html)\n * request to S3 via the REST API.\n\n * @param o\n * @constructor\n */\nqq.s3.AbortMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Abort\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @param id Associated file ID\n     * @param uploadId ID of the associated upload, according to AWS\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_ABORT, bucket, host, options.getKey(id))\n                .withUploadId(uploadId);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Abort MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleAbortRequestComplete(id, xhr, isError) {\n        var domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            errorEls = responseDoc.getElementsByTagName(\"Error\"),\n            awsErrorMsg;\n\n        options.log(qq.format(\"Abort response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Abort Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (errorEls.length) {\n                isError = true;\n                awsErrorMsg = responseDoc.getElementsByTagName(\"Message\")[0].textContent;\n                options.log(qq.format(\"Failed to Abort Multipart Upload request for {}.  Error: {}\", id, awsErrorMsg), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Abort MPU request succeeded for file ID {}.\", id));\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [\"DELETE\"],\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleAbortRequestComplete,\n        successfulResponseCodes: {\n            DELETE: [204]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Abort\" request.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         */\n        send: function(id, uploadId) {\n            getHeaders(id, uploadId).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 Abort multipart upload request for \" + id);\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            });\n        }\n    });\n};\n","/*globals qq */\r\n/**\r\n * Upload handler used by the upload to S3 module that depends on File API support, and, therefore, makes use of\r\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to S3 buckets via the associated AWS API.\r\n *\r\n * If chunking is supported and enabled, the S3 Multipart Upload REST API is utilized.\r\n *\r\n * @param spec Options passed from the base handler\r\n * @param proxy Callbacks & methods used to query for or push out data/changes\r\n */\r\nqq.s3.XhrUploadHandler = function(spec, proxy) {\r\n    \"use strict\";\r\n\r\n    // need to pre-construct the workerManager\r\n    var workerManager;\r\n    if (spec.signature.workerUrl) {\r\n        workerManager = new qq.s3.RequestSignerWorkerManager({\r\n            workerUrl: spec.signature.workerUrl,\r\n            log: proxy.log,\r\n        });\r\n    }\r\n\r\n    var getName = proxy.getName,\r\n        log = proxy.log,\r\n        clockDrift = spec.clockDrift,\r\n        expectedStatus = 200,\r\n        onGetBucket = spec.getBucket,\r\n        onGetHost = spec.getHost,\r\n        onGetKeyName = spec.getKeyName,\r\n        filenameParam = spec.filenameParam,\r\n        paramsStore = spec.paramsStore,\r\n        endpointStore = spec.endpointStore,\r\n        aclStore = spec.aclStore,\r\n        reducedRedundancy = spec.objectProperties.reducedRedundancy,\r\n        region = spec.objectProperties.region,\r\n        serverSideEncryption = spec.objectProperties.serverSideEncryption,\r\n        validation = spec.validation,\r\n        signature = qq.extend({region: region, drift: clockDrift, workerManager: workerManager}, spec.signature),\r\n        handler = this,\r\n        credentialsProvider = spec.signature.credentialsProvider,\r\n\r\n        chunked = {\r\n            // Sends a \"Complete Multipart Upload\" request and then signals completion of the upload\r\n            // when the response to this request has been parsed.\r\n            combine: function(id) {\r\n                var uploadId = handler._getPersistableData(id).uploadId,\r\n                    etagMap = handler._getPersistableData(id).etags,\r\n                    result = new qq.Promise();\r\n\r\n                requesters.completeMultipart.send(id, uploadId, etagMap).then(\r\n                    result.success,\r\n\r\n                    function failure(reason, xhr) {\r\n                        result.failure(upload.done(id, xhr).response, xhr);\r\n                    }\r\n                );\r\n\r\n                return result;\r\n            },\r\n\r\n            // The last step in handling a chunked upload.  This is called after each chunk has been sent.\r\n            // The request may be successful, or not.  If it was successful, we must extract the \"ETag\" element\r\n            // in the XML response and store that along with the associated part number.\r\n            // We need these items to \"Complete\" the multipart upload after all chunks have been successfully sent.\r\n            done: function(id, xhr, chunkIdx) {\r\n                var response = upload.response.parse(id, xhr),\r\n                    etag;\r\n\r\n                if (response.success) {\r\n                    etag = xhr.getResponseHeader(\"ETag\");\r\n\r\n                    if (!handler._getPersistableData(id).etags) {\r\n                        handler._getPersistableData(id).etags = [];\r\n                    }\r\n                    handler._getPersistableData(id).etags.push({part: chunkIdx + 1, etag: etag});\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Determines headers that must be attached to the chunked (Multipart Upload) request.  One of these headers is an\r\n             * Authorization value, which must be determined by asking the local server to sign the request first.  So, this\r\n             * function returns a promise.  Once all headers are determined, the `success` method of the promise is called with\r\n             * the headers object.  If there was some problem determining the headers, we delegate to the caller's `failure`\r\n             * callback.\r\n             *\r\n             * @param id File ID\r\n             * @param chunkIdx Index of the chunk to PUT\r\n             * @returns {qq.Promise}\r\n             */\r\n            initHeaders: function(id, chunkIdx, blob) {\r\n                var headers = {},\r\n                    bucket = upload.bucket.getName(id),\r\n                    host = upload.host.getName(id),\r\n                    key = upload.key.urlSafe(id),\r\n                    promise = new qq.Promise(),\r\n                    signatureConstructor = requesters.restSignature.constructStringToSign\r\n                        (requesters.restSignature.REQUEST_TYPE.MULTIPART_UPLOAD, bucket, host, key)\r\n                        .withPartNum(chunkIdx + 1)\r\n                        .withContent(blob)\r\n                        .withUploadId(handler._getPersistableData(id).uploadId);\r\n\r\n                // Ask the local server to sign the request.  Use this signature to form the Authorization header.\r\n                requesters.restSignature.getSignature(id + \".\" + chunkIdx, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\r\n\r\n                return promise;\r\n            },\r\n\r\n            put: function(id, chunkIdx) {\r\n                var xhr = handler._createXhr(id, chunkIdx),\r\n                    chunkData = handler._getChunkData(id, chunkIdx),\r\n                    domain = spec.endpointStore.get(id),\r\n                    promise = new qq.Promise();\r\n\r\n                // Add appropriate headers to the multipart upload request.\r\n                // Once these have been determined (asynchronously) attach the headers and send the chunk.\r\n                chunked.initHeaders(id, chunkIdx, chunkData.blob).then(function(headers, endOfUrl) {\r\n                    if (xhr._cancelled) {\r\n                        log(qq.format(\"Upload of item {}.{} cancelled. Upload will not start after successful signature request.\", id, chunkIdx));\r\n                        promise.failure({error: \"Chunk upload cancelled\"});\r\n                    }\r\n                    else {\r\n                        var url = domain + \"/\" + endOfUrl;\r\n                        handler._registerProgressHandler(id, chunkIdx, chunkData.size);\r\n                        upload.track(id, xhr, chunkIdx).then(promise.success, promise.failure);\r\n                        xhr.open(\"PUT\", url, true);\r\n\r\n                        qq.each(headers, function(name, val) {\r\n                            xhr.setRequestHeader(name, val);\r\n                        });\r\n\r\n                        xhr.send(chunkData.blob);\r\n                    }\r\n                }, function() {\r\n                    promise.failure({error: \"Problem signing the chunk!\"}, xhr);\r\n                });\r\n\r\n                return promise;\r\n            },\r\n\r\n            send: function(id, chunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                chunked.setup(id).then(\r\n                    // The \"Initiate\" request succeeded.  We are ready to send the first chunk.\r\n                    function() {\r\n                        chunked.put(id, chunkIdx).then(promise.success, promise.failure);\r\n                    },\r\n\r\n                    // We were unable to initiate the chunked upload process.\r\n                    function(errorMessage, xhr) {\r\n                        promise.failure({error: errorMessage}, xhr);\r\n                    }\r\n                );\r\n\r\n                return promise;\r\n            },\r\n\r\n            /**\r\n             * Sends an \"Initiate Multipart Upload\" request to S3 via the REST API, but only if the MPU has not already been\r\n             * initiated.\r\n             *\r\n             * @param id Associated file ID\r\n             * @returns {qq.Promise} A promise that is fulfilled when the initiate request has been sent and the response has been parsed.\r\n             */\r\n            setup: function(id) {\r\n                var promise = new qq.Promise(),\r\n                    uploadId = handler._getPersistableData(id).uploadId,\r\n                    uploadIdPromise = new qq.Promise();\r\n\r\n                if (!uploadId) {\r\n                    handler._getPersistableData(id).uploadId = uploadIdPromise;\r\n                    requesters.initiateMultipart.send(id).then(\r\n                        function(uploadId) {\r\n                            handler._getPersistableData(id).uploadId = uploadId;\r\n                            uploadIdPromise.success(uploadId);\r\n                            promise.success(uploadId);\r\n                        },\r\n                        function(errorMsg, xhr) {\r\n                            handler._getPersistableData(id).uploadId = null;\r\n                            promise.failure(errorMsg, xhr);\r\n                            uploadIdPromise.failure(errorMsg, xhr);\r\n                        }\r\n                    );\r\n                }\r\n                else if (uploadId instanceof qq.Promise) {\r\n                    uploadId.then(function(uploadId) {\r\n                        promise.success(uploadId);\r\n                    });\r\n                }\r\n                else {\r\n                    promise.success(uploadId);\r\n                }\r\n\r\n                return promise;\r\n            }\r\n        },\r\n\r\n        requesters = {\r\n            abortMultipart: new qq.s3.AbortMultipartAjaxRequester({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                }\r\n            }),\r\n\r\n            completeMultipart: new qq.s3.CompleteMultipartAjaxRequester({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                }\r\n            }),\r\n\r\n            initiateMultipart: new qq.s3.InitiateMultipartAjaxRequester({\r\n                filenameParam: filenameParam,\r\n                endpointStore: endpointStore,\r\n                paramsStore: paramsStore,\r\n                signatureSpec: signature,\r\n                aclStore: aclStore,\r\n                reducedRedundancy: reducedRedundancy,\r\n                serverSideEncryption: serverSideEncryption,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getContentType: function(id) {\r\n                    return handler._getMimeType(id);\r\n                },\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                },\r\n                getName: function(id) {\r\n                    return getName(id);\r\n                }\r\n            }),\r\n\r\n            policySignature: new qq.s3.RequestSigner({\r\n                expectingPolicy: true,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log\r\n            }),\r\n\r\n            restSignature: new qq.s3.RequestSigner({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log\r\n            })\r\n        },\r\n\r\n        simple = {\r\n            /**\r\n             * Used for simple (non-chunked) uploads to determine the parameters to send along with the request.  Part of this\r\n             * process involves asking the local server to sign the request, so this function returns a promise.  The promise\r\n             * is fulfilled when all parameters are determined, or when we determine that all parameters cannot be calculated\r\n             * due to some error.\r\n             *\r\n             * @param id File ID\r\n             * @returns {qq.Promise}\r\n             */\r\n            initParams: function(id) {\r\n                /*jshint -W040 */\r\n                var customParams = paramsStore.get(id);\r\n                customParams[filenameParam] = getName(id);\r\n\r\n                return qq.s3.util.generateAwsParams({\r\n                    endpoint: endpointStore.get(id),\r\n                    clockDrift: clockDrift,\r\n                    params: customParams,\r\n                    type: handler._getMimeType(id),\r\n                    bucket: upload.bucket.getName(id),\r\n                    key: handler.getThirdPartyFileId(id),\r\n                    accessKey: credentialsProvider.get().accessKey,\r\n                    sessionToken: credentialsProvider.get().sessionToken,\r\n                    acl: aclStore.get(id),\r\n                    expectedStatus: expectedStatus,\r\n                    minFileSize: validation.minSizeLimit,\r\n                    maxFileSize: validation.maxSizeLimit,\r\n                    reducedRedundancy: reducedRedundancy,\r\n                    region: region,\r\n                    serverSideEncryption: serverSideEncryption,\r\n                    signatureVersion: signature.version,\r\n                    log: log\r\n                },\r\n                qq.bind(requesters.policySignature.getSignature, this, id));\r\n            },\r\n\r\n            send: function(id) {\r\n                var promise = new qq.Promise(),\r\n                    xhr = handler._createXhr(id),\r\n                    fileOrBlob = handler.getFile(id);\r\n\r\n                handler._registerProgressHandler(id);\r\n                upload.track(id, xhr).then(promise.success, promise.failure);\r\n\r\n                // Delegate to a function the sets up the XHR request and notifies us when it is ready to be sent, along w/ the payload.\r\n                simple.setup(id, xhr, fileOrBlob).then(function(toSend) {\r\n                    log(\"Sending upload request for \" + id);\r\n                    xhr.send(toSend);\r\n                }, promise.failure);\r\n\r\n                return promise;\r\n            },\r\n\r\n            /**\r\n             * Starts the upload process by delegating to an async function that determine parameters to be attached to the\r\n             * request.  If all params can be determined, we are called back with the params and the caller of this function is\r\n             * informed by invoking the `success` method on the promise returned by this function, passing the payload of the\r\n             * request.  If some error occurs here, we delegate to a function that signals a failure for this upload attempt.\r\n             *\r\n             * Note that this is only used by the simple (non-chunked) upload process.\r\n             *\r\n             * @param id File ID\r\n             * @param xhr XMLHttpRequest to use for the upload\r\n             * @param fileOrBlob `File` or `Blob` to send\r\n             * @returns {qq.Promise}\r\n             */\r\n            setup: function(id, xhr, fileOrBlob) {\r\n                var formData = new FormData(),\r\n                    endpoint = endpointStore.get(id),\r\n                    url = endpoint,\r\n                    promise = new qq.Promise();\r\n\r\n                simple.initParams(id).then(\r\n                    // Success - all params determined\r\n                    function(awsParams) {\r\n                        xhr.open(\"POST\", url, true);\r\n\r\n                        qq.obj2FormData(awsParams, formData);\r\n\r\n                        // AWS requires the file field be named \"file\".\r\n                        formData.append(\"file\", fileOrBlob);\r\n\r\n                        promise.success(formData);\r\n                    },\r\n\r\n                    // Failure - we couldn't determine some params (likely the signature)\r\n                    function(errorMessage) {\r\n                        promise.failure({error: errorMessage});\r\n                    }\r\n                );\r\n\r\n                return promise;\r\n            }\r\n        },\r\n\r\n        upload = {\r\n            /**\r\n             * Note that this is called when an upload has reached a termination point,\r\n             * regardless of success/failure.  For example, it is called when we have\r\n             * encountered an error during the upload or when the file may have uploaded successfully.\r\n             *\r\n             * @param id file ID\r\n             */\r\n            bucket: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        cachedBucket = handler._getFileState(id).bucket;\r\n\r\n                    if (cachedBucket) {\r\n                        promise.success(cachedBucket);\r\n                    }\r\n                    else {\r\n                        onGetBucket(id).then(function(bucket) {\r\n                            handler._getFileState(id).bucket = bucket;\r\n                            promise.success(bucket);\r\n                        }, promise.failure);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                getName: function(id) {\r\n                    return handler._getFileState(id).bucket;\r\n                }\r\n            },\r\n\r\n            host: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        cachedHost = handler._getFileState(id).host;\r\n\r\n                    if (cachedHost) {\r\n                        promise.success(cachedHost);\r\n                    }\r\n                    else {\r\n                        onGetHost(id).then(function(host) {\r\n                            handler._getFileState(id).host = host;\r\n                            promise.success(host);\r\n                        }, promise.failure);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                getName: function(id) {\r\n                    return handler._getFileState(id).host;\r\n                }\r\n            },\r\n\r\n            done: function(id, xhr) {\r\n                var response = upload.response.parse(id, xhr),\r\n                    isError = response.success !== true;\r\n\r\n                if (isError && upload.response.shouldReset(response.code)) {\r\n                    log(\"This is an unrecoverable error, we must restart the upload entirely on the next retry attempt.\", \"error\");\r\n                    response.reset = true;\r\n                }\r\n\r\n                return {\r\n                    success: !isError,\r\n                    response: response\r\n                };\r\n            },\r\n\r\n            key: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        key = handler.getThirdPartyFileId(id);\r\n\r\n                    /* jshint eqnull:true */\r\n                    if (key == null) {\r\n                        handler._setThirdPartyFileId(id, promise);\r\n                        onGetKeyName(id, getName(id)).then(\r\n                            function(keyName) {\r\n                                handler._setThirdPartyFileId(id, keyName);\r\n                                promise.success(keyName);\r\n                            },\r\n                            function(errorReason) {\r\n                                handler._setThirdPartyFileId(id, null);\r\n                                promise.failure(errorReason);\r\n                            }\r\n                        );\r\n                    }\r\n                    else if (qq.isGenericPromise(key)) {\r\n                        key.then(promise.success, promise.failure);\r\n                    }\r\n                    else {\r\n                        promise.success(key);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                urlSafe: function(id) {\r\n                    var encodedKey = handler.getThirdPartyFileId(id);\r\n                    return qq.s3.util.uriEscapePath(encodedKey);\r\n                }\r\n            },\r\n\r\n            response: {\r\n                parse: function(id, xhr) {\r\n                    var response = {},\r\n                        parsedErrorProps;\r\n\r\n                    try {\r\n                        log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\r\n\r\n                        if (xhr.status === expectedStatus) {\r\n                            response.success = true;\r\n                        }\r\n                        else {\r\n                            parsedErrorProps = upload.response.parseError(xhr.responseText);\r\n\r\n                            if (parsedErrorProps) {\r\n                                response.error = parsedErrorProps.message;\r\n                                response.code = parsedErrorProps.code;\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\r\n                    }\r\n\r\n                    return response;\r\n                },\r\n\r\n                /**\r\n                 * This parses an XML response by extracting the \"Message\" and \"Code\" elements that accompany AWS error responses.\r\n                 *\r\n                 * @param awsResponseXml XML response from AWS\r\n                 * @returns {object} Object w/ `code` and `message` properties, or undefined if we couldn't find error info in the XML document.\r\n                 */\r\n                parseError: function(awsResponseXml) {\r\n                    var parser = new DOMParser(),\r\n                        parsedDoc = parser.parseFromString(awsResponseXml, \"application/xml\"),\r\n                        errorEls = parsedDoc.getElementsByTagName(\"Error\"),\r\n                        errorDetails = {},\r\n                        codeEls, messageEls;\r\n\r\n                    if (errorEls.length) {\r\n                        codeEls = parsedDoc.getElementsByTagName(\"Code\");\r\n                        messageEls = parsedDoc.getElementsByTagName(\"Message\");\r\n\r\n                        if (messageEls.length) {\r\n                            errorDetails.message = messageEls[0].textContent;\r\n                        }\r\n\r\n                        if (codeEls.length) {\r\n                            errorDetails.code = codeEls[0].textContent;\r\n                        }\r\n\r\n                        return errorDetails;\r\n                    }\r\n                },\r\n\r\n                // Determine if the upload should be restarted on the next retry attempt\r\n                // based on the error code returned in the response from AWS.\r\n                shouldReset: function(errorCode) {\r\n                    /*jshint -W014 */\r\n                    return errorCode === \"EntityTooSmall\"\r\n                        || errorCode === \"InvalidPart\"\r\n                        || errorCode === \"InvalidPartOrder\"\r\n                        || errorCode === \"NoSuchUpload\";\r\n                }\r\n            },\r\n\r\n            start: function(id, optChunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                upload.key.promise(id).then(function() {\r\n                    upload.bucket.promise(id).then(function() {\r\n                        upload.host.promise(id).then(function() {\r\n                            /* jshint eqnull:true */\r\n                            if (optChunkIdx == null) {\r\n                                simple.send(id).then(promise.success, promise.failure);\r\n                            }\r\n                            else {\r\n                                chunked.send(id, optChunkIdx).then(promise.success, promise.failure);\r\n                            }\r\n                        });\r\n                    });\r\n                },\r\n                function(errorReason) {\r\n                    promise.failure({error: errorReason});\r\n                });\r\n\r\n                return promise;\r\n            },\r\n\r\n            track: function(id, xhr, optChunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                xhr.onreadystatechange = function() {\r\n                    if (xhr.readyState === 4) {\r\n                        var result;\r\n\r\n                        /* jshint eqnull:true */\r\n                        if (optChunkIdx == null) {\r\n                            result = upload.done(id, xhr);\r\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\r\n                        }\r\n                        else {\r\n                            chunked.done(id, xhr, optChunkIdx);\r\n                            result = upload.done(id, xhr);\r\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                return promise;\r\n            }\r\n        };\r\n\r\n    qq.extend(this, {\r\n        uploadChunk: upload.start,\r\n        uploadFile: upload.start\r\n    });\r\n\r\n    qq.extend(this, new qq.XhrUploadHandler({\r\n        options: qq.extend({namespace: \"s3\"}, spec),\r\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\r\n    }));\r\n\r\n    qq.override(this, function(super_) {\r\n        return {\r\n            expunge: function(id) {\r\n                var uploadId = handler._getPersistableData(id) && handler._getPersistableData(id).uploadId,\r\n                    existedInLocalStorage = handler._maybeDeletePersistedChunkData(id);\r\n\r\n                if (uploadId !== undefined && existedInLocalStorage) {\r\n                    requesters.abortMultipart.send(id, uploadId);\r\n                }\r\n\r\n                super_.expunge(id);\r\n            },\r\n\r\n            finalizeChunks: function(id) {\r\n                return chunked.combine(id);\r\n            },\r\n\r\n            _getLocalStorageId: function(id) {\r\n                var baseStorageId = super_._getLocalStorageId(id),\r\n                    bucketName = upload.bucket.getName(id);\r\n\r\n                return baseStorageId + \"-\" + bucketName;\r\n            }\r\n        };\r\n    });\r\n};\r\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to S3 buckets via the associated\n * AWS API.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        clockDrift = options.clockDrift,\n        onUuidChanged = proxy.onUuidChanged,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        onGetBucket = options.getBucket,\n        onGetKeyName = options.getKeyName,\n        filenameParam = options.filenameParam,\n        paramsStore = options.paramsStore,\n        endpointStore = options.endpointStore,\n        aclStore = options.aclStore,\n        reducedRedundancy = options.objectProperties.reducedRedundancy,\n        region = options.objectProperties.region,\n        serverSideEncryption = options.objectProperties.serverSideEncryption,\n        validation = options.validation,\n        signature = options.signature,\n        successRedirectUrl = options.iframeSupport.localBlankPagePath,\n        credentialsProvider = options.signature.credentialsProvider,\n        getSignatureAjaxRequester = new qq.s3.RequestSigner({\n            signatureSpec: signature,\n            cors: options.cors,\n            log: log\n        });\n\n    if (successRedirectUrl === undefined) {\n        throw new Error(\"successRedirectEndpoint MUST be defined if you intend to use browsers that do not support the File API!\");\n    }\n\n    /**\n     * Attempt to parse the contents of an iframe after receiving a response from the server.  If the contents cannot be\n     * read (perhaps due to a security error) it is safe to assume that the upload was not successful since Amazon should\n     * have redirected to a known endpoint that should provide a parseable response.\n     *\n     * @param id ID of the associated file\n     * @param iframe target of the form submit\n     * @returns {boolean} true if the contents can be read, false otherwise\n     */\n    function isValidResponse(id, iframe) {\n        var response,\n            endpoint = options.endpointStore.get(id),\n            bucket = handler._getFileState(id).bucket,\n            doc,\n            innerHtml,\n            responseData;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            responseData = qq.s3.util.parseIframeResponse(iframe);\n            if (responseData.bucket === bucket &&\n                responseData.key === qq.s3.util.encodeQueryStringParam(handler.getThirdPartyFileId(id))) {\n\n                return true;\n            }\n\n            log(\"Response from AWS included an unexpected bucket or key name.\", \"error\");\n\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n        }\n\n        return false;\n    }\n\n    function generateAwsParams(id) {\n        /*jshint -W040 */\n        var customParams = paramsStore.get(id);\n\n        customParams[filenameParam] = getName(id);\n\n        return qq.s3.util.generateAwsParams({\n            endpoint: endpointStore.get(id),\n            clockDrift: clockDrift,\n            params: customParams,\n            bucket: handler._getFileState(id).bucket,\n            key: handler.getThirdPartyFileId(id),\n            accessKey: credentialsProvider.get().accessKey,\n            sessionToken: credentialsProvider.get().sessionToken,\n            acl: aclStore.get(id),\n            minFileSize: validation.minSizeLimit,\n            maxFileSize: validation.maxSizeLimit,\n            successRedirectUrl: successRedirectUrl,\n            reducedRedundancy: reducedRedundancy,\n            region: region,\n            serverSideEncryption: serverSideEncryption,\n            signatureVersion: signature.version,\n            log: log\n        },\n        qq.bind(getSignatureAjaxRequester.getSignature, this, id));\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            endpoint = options.endpointStore.get(id),\n            fileName = getName(id);\n\n        generateAwsParams(id).then(function(params) {\n            var form = handler._initFormForUpload({\n                method: method,\n                endpoint: endpoint,\n                params: params,\n                paramsInBody: true,\n                targetName: iframe.name\n            });\n\n            promise.success(form);\n        }, function(errorMessage) {\n            promise.failure(errorMessage);\n            handleFinishedUpload(id, iframe, fileName, {error: errorMessage});\n        });\n\n        return promise;\n    }\n\n    function handleUpload(id) {\n        var iframe = handler._createIframe(id),\n            input = handler.getInput(id),\n            promise = new qq.Promise();\n\n        createForm(id, iframe).then(function(form) {\n            form.appendChild(input);\n\n            // Register a callback when the response comes in from S3\n            handler._attachLoadEvent(iframe, function(response) {\n                log(\"iframe loaded\");\n\n                // If the common response handler has determined success or failure immediately\n                if (response) {\n                    // If there is something fundamentally wrong with the response (such as iframe content is not accessible)\n                    if (response.success === false) {\n                        log(\"Amazon likely rejected the upload request\", \"error\");\n                        promise.failure(response);\n                    }\n                }\n                // The generic response (iframe onload) handler was not able to make a determination regarding the success of the request\n                else {\n                    response = {};\n                    response.success = isValidResponse(id, iframe);\n\n                    // If the more specific response handle detected a problem with the response from S3\n                    if (response.success === false) {\n                        log(\"A success response was received by Amazon, but it was invalid in some way.\", \"error\");\n                        promise.failure(response);\n                    }\n                    else {\n                        qq.extend(response, qq.s3.util.parseIframeResponse(iframe));\n                        promise.success(response);\n                    }\n                }\n\n                handleFinishedUpload(id, iframe);\n            });\n\n            log(\"Sending upload request for \" + id);\n            form.submit();\n            qq(form).remove();\n        }, promise.failure);\n\n        return promise;\n    }\n\n    function handleFinishedUpload(id, iframe) {\n        handler._detachLoadEvent(id);\n        iframe && qq(iframe).remove();\n    }\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: false,\n            inputName: \"file\"\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            onUuidChanged: onUuidChanged,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n\n    qq.extend(this, {\n        uploadFile: function(id) {\n            var name = getName(id),\n                promise = new qq.Promise();\n\n            if (handler.getThirdPartyFileId(id)) {\n                if (handler._getFileState(id).bucket) {\n                    handleUpload(id).then(promise.success, promise.failure);\n                }\n                else {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handleUpload(id).then(promise.success, promise.failure);\n                    });\n                }\n            }\n            else {\n                // The S3 uploader module will either calculate the key or ask the server for it\n                // and will call us back once it is known.\n                onGetKeyName(id, name).then(function(key) {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handler._setThirdPartyFileId(id, key);\n                        handleUpload(id).then(promise.success, promise.failure);\n                    }, function(errorReason) {\n                        promise.failure({error: errorReason});\n                    });\n                }, function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n            }\n\n            return promise;\n        }\n    });\n};\n","\n        qq.s3.createS3InlineWorkerUrl = function () {\n            return URL.createObjectURL(new Blob([\"// Fine Uploader 5.14.0-beta3 - (c) 2013-present Widen Enterprises, Inc. MIT licensed. http://fineuploader.com\\nfunction doTask(t,r){\\\"use strict\\\";var n=new FileReader;n.onloadend=function(t){if(t.target.readyState===FileReader.DONE)if(t.target.error)r(JSON.parse(JSON.stringify(t.target.error,null,2)));else{var n=qq.CryptoJS.lib.WordArray.create(t.target.result);r(null,qq.CryptoJS.SHA256(n).toString())}},n.readAsArrayBuffer(t)}qq={},qq.CryptoJS=function(t,r){var n={},e=n.lib={},i=e.Base=function(){function t(){}return{extend:function(r){t.prototype=this;var n=new t;return r&&n.mixIn(r),n.hasOwnProperty(\\\"init\\\")||(n.init=function(){n.$super.init.apply(this,arguments)}),n.init.prototype=n,n.$super=this,n},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var r in t)t.hasOwnProperty(r)&&(this[r]=t[r]);t.hasOwnProperty(\\\"toString\\\")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),s=e.WordArray=i.extend({init:function(t,n){t=this.words=t||[],n!=r?this.sigBytes=n:this.sigBytes=4*t.length},toString:function(t){return(t||o).stringify(this)},concat:function(t){var r=this.words,n=t.words,e=this.sigBytes,i=t.sigBytes;if(this.clamp(),e%4)for(var s=0;s<i;s++){var a=n[s>>>2]>>>24-s%4*8&255;r[e+s>>>2]|=a<<24-(e+s)%4*8}else if(n.length>65535)for(var s=0;s<i;s+=4)r[e+s>>>2]=n[s>>>2];else r.push.apply(r,n);return this.sigBytes+=i,this},clamp:function(){var r=this.words,n=this.sigBytes;r[n>>>2]&=4294967295<<32-n%4*8,r.length=t.ceil(n/4)},clone:function(){var t=i.clone.call(this);return t.words=this.words.slice(0),t},random:function(r){for(var n=[],e=0;e<r;e+=4)n.push(4294967296*t.random()|0);return new s.init(n,r)}}),a=n.enc={},o=a.Hex={stringify:function(t){for(var r=t.words,n=t.sigBytes,e=[],i=0;i<n;i++){var s=r[i>>>2]>>>24-i%4*8&255;e.push((s>>>4).toString(16)),e.push((15&s).toString(16))}return e.join(\\\"\\\")},parse:function(t){for(var r=t.length,n=[],e=0;e<r;e+=2)n[e>>>3]|=parseInt(t.substr(e,2),16)<<24-e%8*4;return new s.init(n,r/2)}},c=a.Latin1={stringify:function(t){for(var r=t.words,n=t.sigBytes,e=[],i=0;i<n;i++){var s=r[i>>>2]>>>24-i%4*8&255;e.push(String.fromCharCode(s))}return e.join(\\\"\\\")},parse:function(t){for(var r=t.length,n=[],e=0;e<r;e++)n[e>>>2]|=(255&t.charCodeAt(e))<<24-e%4*8;return new s.init(n,r)}},f=a.Utf8={stringify:function(t){try{return decodeURIComponent(escape(c.stringify(t)))}catch(t){throw new Error(\\\"Malformed UTF-8 data\\\")}},parse:function(t){return c.parse(unescape(encodeURIComponent(t)))}},h=e.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(t){\\\"string\\\"==typeof t&&(t=f.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(r){var n=this._data,e=n.words,i=n.sigBytes,a=this.blockSize,o=4*a,c=i/o;c=r?t.ceil(c):t.max((0|c)-this._minBufferSize,0);var f=c*a,h=t.min(4*f,i);if(f){for(var u=0;u<f;u+=a)this._doProcessBlock(e,u);var l=e.splice(0,f);n.sigBytes-=h}return new s.init(l,h)},clone:function(){var t=i.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),u=(e.Hasher=h.extend({cfg:i.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){h.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){t&&this._append(t);var r=this._doFinalize();return r},blockSize:16,_createHelper:function(t){return function(r,n){return new t.init(n).finalize(r)}},_createHmacHelper:function(t){return function(r,n){return new u.HMAC.init(t,n).finalize(r)}}}),n.algo={});return n}(Math),function(){var t=qq.CryptoJS,r=t.lib,n=r.WordArray,e=t.enc;e.Base64={stringify:function(t){var r=t.words,n=t.sigBytes,e=this._map;t.clamp();for(var i=[],s=0;s<n;s+=3)for(var a=r[s>>>2]>>>24-s%4*8&255,o=r[s+1>>>2]>>>24-(s+1)%4*8&255,c=r[s+2>>>2]>>>24-(s+2)%4*8&255,f=a<<16|o<<8|c,h=0;h<4&&s+.75*h<n;h++)i.push(e.charAt(f>>>6*(3-h)&63));var u=e.charAt(64);if(u)for(;i.length%4;)i.push(u);return i.join(\\\"\\\")},parse:function(t){var r=t.length,e=this._map,i=e.charAt(64);if(i){var s=t.indexOf(i);s!=-1&&(r=s)}for(var a=[],o=0,c=0;c<r;c++)if(c%4){var f=e.indexOf(t.charAt(c-1))<<c%4*2,h=e.indexOf(t.charAt(c))>>>6-c%4*2;a[o>>>2]|=(f|h)<<24-o%4*8,o++}return n.create(a,o)},_map:\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\\"}}(),function(){var t=qq.CryptoJS,r=t.lib,n=r.Base,e=t.enc,i=e.Utf8,s=t.algo;s.HMAC=n.extend({init:function(t,r){t=this._hasher=new t.init,\\\"string\\\"==typeof r&&(r=i.parse(r));var n=t.blockSize,e=4*n;r.sigBytes>e&&(r=t.finalize(r)),r.clamp();for(var s=this._oKey=r.clone(),a=this._iKey=r.clone(),o=s.words,c=a.words,f=0;f<n;f++)o[f]^=1549556828,c[f]^=909522486;s.sigBytes=a.sigBytes=e,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var r=this._hasher,n=r.finalize(t);r.reset();var e=r.finalize(this._oKey.clone().concat(n));return e}})}(),function(){var t=qq.CryptoJS,r=t.lib,n=r.WordArray,e=r.Hasher,i=t.algo,s=[],a=i.SHA1=e.extend({_doReset:function(){this._hash=new n.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,r){for(var n=this._hash.words,e=n[0],i=n[1],a=n[2],o=n[3],c=n[4],f=0;f<80;f++){if(f<16)s[f]=0|t[r+f];else{var h=s[f-3]^s[f-8]^s[f-14]^s[f-16];s[f]=h<<1|h>>>31}var u=(e<<5|e>>>27)+c+s[f];u+=f<20?(i&a|~i&o)+1518500249:f<40?(i^a^o)+1859775393:f<60?(i&a|i&o|a&o)-1894007588:(i^a^o)-899497514,c=o,o=a,a=i<<30|i>>>2,i=e,e=u}n[0]=n[0]+e|0,n[1]=n[1]+i|0,n[2]=n[2]+a|0,n[3]=n[3]+o|0,n[4]=n[4]+c|0},_doFinalize:function(){var t=this._data,r=t.words,n=8*this._nDataBytes,e=8*t.sigBytes;return r[e>>>5]|=128<<24-e%32,r[(e+64>>>9<<4)+14]=Math.floor(n/4294967296),r[(e+64>>>9<<4)+15]=n,t.sigBytes=4*r.length,this._process(),this._hash},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t}});t.SHA1=e._createHelper(a),t.HmacSHA1=e._createHmacHelper(a)}(),function(t){var r=qq.CryptoJS,n=r.lib,e=n.WordArray,i=n.Hasher,s=r.algo,a=[],o=[];!function(){function r(r){for(var n=t.sqrt(r),e=2;e<=n;e++)if(!(r%e))return!1;return!0}function n(t){return 4294967296*(t-(0|t))|0}for(var e=2,i=0;i<64;)r(e)&&(i<8&&(a[i]=n(t.pow(e,.5))),o[i]=n(t.pow(e,1/3)),i++),e++}();var c=[],f=s.SHA256=i.extend({_doReset:function(){this._hash=new e.init(a.slice(0))},_doProcessBlock:function(t,r){for(var n=this._hash.words,e=n[0],i=n[1],s=n[2],a=n[3],f=n[4],h=n[5],u=n[6],l=n[7],p=0;p<64;p++){if(p<16)c[p]=0|t[r+p];else{var d=c[p-15],y=(d<<25|d>>>7)^(d<<14|d>>>18)^d>>>3,g=c[p-2],v=(g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10;c[p]=y+c[p-7]+v+c[p-16]}var _=f&h^~f&u,w=e&i^e&s^i&s,A=(e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22),B=(f<<26|f>>>6)^(f<<21|f>>>11)^(f<<7|f>>>25),S=l+B+_+o[p]+c[p],m=A+w;l=u,u=h,h=f,f=a+S|0,a=s,s=i,i=e,e=S+m|0}n[0]=n[0]+e|0,n[1]=n[1]+i|0,n[2]=n[2]+s|0,n[3]=n[3]+a|0,n[4]=n[4]+f|0,n[5]=n[5]+h|0,n[6]=n[6]+u|0,n[7]=n[7]+l|0},_doFinalize:function(){var r=this._data,n=r.words,e=8*this._nDataBytes,i=8*r.sigBytes;return n[i>>>5]|=128<<24-i%32,n[(i+64>>>9<<4)+14]=t.floor(e/4294967296),n[(i+64>>>9<<4)+15]=e,r.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});r.SHA256=i._createHelper(f),r.HmacSHA256=i._createHmacHelper(f)}(Math),function(){if(\\\"function\\\"==typeof ArrayBuffer){var t=qq.CryptoJS,r=t.lib,n=r.WordArray,e=n.init,i=n.init=function(t){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),(t instanceof Int8Array||t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)&&(t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)),t instanceof Uint8Array){for(var r=t.byteLength,n=[],i=0;i<r;i++)n[i>>>2]|=t[i]<<24-i%4*8;e.call(this,n,r)}else e.apply(this,arguments)};i.prototype=n}}(),onmessage=function(t){\\\"use strict\\\";doTask(t.data.file,function(r,n){postMessage({err:r,resp:n,id:t.data.id})})};\\n//# sourceMappingURL=s3.fine-uploader.worker.js.map\"], {type: \"application/javascript\"}));\n        };\n    ","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to S3.\n * This module inherits all logic from FineUploader mode and FineUploaderBasicS3 mode and adds some UI-related logic\n * specific to the upload-to-S3 workflow.  Some inherited options and API methods have a special meaning\n * in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from s3.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"s3\");\n\n        if (!qq.supportedFeatures.ajaxUploading && options.iframeSupport.localBlankPagePath === undefined) {\n            this._options.element.innerHTML = \"<div>You MUST set the <code>localBlankPagePath</code> property \" +\n                \"of the <code>iframeSupport</code> option since this browser does not support the File API!</div>\";\n        }\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.s3.FineUploader.prototype, qq.s3.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPrivateApi);\n}());\n","/*globals qq */\nqq.azure = qq.azure || {};\nqq.azure.util = qq.azure.util || (function() {\n    \"use strict\";\n\n    return {\n        AZURE_PARAM_PREFIX: \"x-ms-meta-\",\n\n        /** Test if a request header is actually a known Azure parameter. See: https://msdn.microsoft.com/en-us/library/azure/dd179451.aspx\n         *\n         * @param name Name of the Request Header parameter.\n         * @returns {Boolean} Test result.\n         */\n        _paramNameMatchesAzureParameter: function(name) {\n            switch (name) {\n                case \"Cache-Control\":\n                case \"Content-Disposition\":\n                case \"Content-Encoding\":\n                case \"Content-MD5\":\n                case \"x-ms-blob-content-encoding\":\n                case \"x-ms-blob-content-disposition\":\n                case \"x-ms-blob-content-md5\":\n                case \"x-ms-blob-cache-control\":\n                    return true;\n                default:\n                    return false;\n            }\n        },\n\n        /** Create Prefixed request headers which are appropriate for Azure.\n         *\n         * If the request header is appropriate for Azure (e.g. Cache-Control) then it should be\n         * passed along without a metadata prefix. For all other request header parameter names,\n         * qq.azure.util.AZURE_PARAM_PREFIX should be prepended.\n         *\n         * @param name Name of the Request Header parameter to construct a (possibly) prefixed name.\n         * @returns {String} A valid Request Header parameter name.\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                return name;\n            }\n            else {\n                return qq.azure.util.AZURE_PARAM_PREFIX + name;\n            }\n        },\n\n        getParamsAsHeaders: function(params) {\n            var headers = {};\n\n            qq.each(params, function(name, val) {\n                var headerName = qq.azure.util._getPrefixedParamName(name),\n                    value = null;\n\n                if (qq.isFunction(val)) {\n                    value = String(val());\n                }\n                else if (qq.isObject(val)) {\n                    qq.extend(headers, qq.azure.util.getParamsAsHeaders(val));\n                }\n                else {\n                    value = String(val);\n                }\n\n                if (value !== null) {\n                    if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                        headers[headerName] = value;\n                    } else {\n                        headers[headerName] = encodeURIComponent(value);\n                    }\n                }\n            });\n\n            return headers;\n        },\n\n        parseAzureError: function(responseText, log) {\n            var domParser = new DOMParser(),\n                responseDoc = domParser.parseFromString(responseText, \"application/xml\"),\n                errorTag = responseDoc.getElementsByTagName(\"Error\")[0],\n                errorDetails = {},\n                codeTag, messageTag;\n\n            log(\"Received error response: \" + responseText, \"error\");\n\n            if (errorTag) {\n                messageTag = errorTag.getElementsByTagName(\"Message\")[0];\n                if (messageTag) {\n                    errorDetails.message = messageTag.textContent;\n                }\n\n                codeTag = errorTag.getElementsByTagName(\"Code\")[0];\n                if (codeTag) {\n                    errorDetails.code = codeTag.textContent;\n                }\n\n                log(\"Parsed Azure error: \" + JSON.stringify(errorDetails), \"error\");\n\n                return errorDetails;\n            }\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to Azure.\n * Some inherited options and API methods have a special meaning in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploaderBasic = function(o) {\n        if (!qq.supportedFeatures.ajaxUploading) {\n            throw new qq.Error(\"Uploading directly to Azure is not possible in this browser.\");\n        }\n\n        var options = {\n            signature: {\n                endpoint: null,\n\n                customHeaders: {}\n            },\n\n            // 'uuid', 'filename', or a function which may be promissory\n            blobProperties: {\n                name: \"uuid\"\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            chunking: {\n                // If this is increased, Azure may respond with a 413\n                partSize: 4000000,\n                // Don't chunk files less than this size\n                minFileSize: 4000001\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds blob names for file representations constructed from a session request.\n        this._cannedBlobNames = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, {\n        getBlobName: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedBlobNames[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n            return this._cannedBlobNames[id];\n        },\n\n        _getEndpointSpecificParams: function(id) {\n            return {\n                blob: this.getBlobName(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                container: this._endpointStore.get(id)\n            };\n        },\n\n        _createUploadHandler: function() {\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this,\n                {\n                    signature: this._options.signature,\n                    onGetBlobName: qq.bind(this._determineBlobName, this),\n                    deleteBlob: qq.bind(this._deleteBlob, this, true)\n                },\n                \"azure\");\n        },\n\n        _determineBlobName: function(id) {\n            var self = this,\n                blobNameOptionValue = this._options.blobProperties.name,\n                uuid = this.getUuid(id),\n                filename = this.getName(id),\n                fileExtension = qq.getExtension(filename),\n                blobNameToUse = uuid;\n\n            if (qq.isString(blobNameOptionValue)) {\n                switch (blobNameOptionValue) {\n                    case \"uuid\":\n                        if (fileExtension !== undefined) {\n                            blobNameToUse += \".\" + fileExtension;\n                        }\n                        return new qq.Promise().success(blobNameToUse);\n                    case \"filename\":\n                        return new qq.Promise().success(filename);\n                    default:\n                        return new qq.Promise.failure(\"Invalid blobName option value - \" + blobNameOptionValue);\n                }\n            }\n            else {\n                return blobNameOptionValue.call(this, id);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.blobName == null) {\n                throw new qq.Error(\"Did not find blob name property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedBlobNames[id] = sessionData.blobName;\n            }\n\n            return id;\n        },\n\n        _deleteBlob: function(relatedToCancel, id) {\n            var self = this,\n                deleteBlobSasUri = {},\n                blobUriStore = {\n                    get: function(id) {\n                        return self._endpointStore.get(id) + \"/\" + self.getBlobName(id);\n                    }\n                },\n                deleteFileEndpointStore = {\n                    get: function(id) {\n                        return deleteBlobSasUri[id];\n                    }\n                },\n                getSasSuccess = function(id, sasUri) {\n                    deleteBlobSasUri[id] = sasUri;\n                    deleteBlob.send(id);\n                },\n                getSasFailure = function(id, reason, xhr) {\n                    if (relatedToCancel) {\n                        self.log(\"Will cancel upload, but cannot remove uncommitted parts from Azure due to issue retrieving SAS\", \"error\");\n                        qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                    }\n                    else {\n                        self._onDeleteComplete(id, xhr, true);\n                        self._options.callbacks.onDeleteComplete(id, xhr, true);\n                    }\n                },\n                deleteBlob = new qq.azure.DeleteBlob({\n                    endpointStore: deleteFileEndpointStore,\n                    log: qq.bind(self.log, self),\n                    onDelete: function(id) {\n                        self._onDelete(id);\n                        self._options.callbacks.onDelete(id);\n                    },\n                    onDeleteComplete: function(id, xhrOrXdr, isError) {\n                        delete deleteBlobSasUri[id];\n\n                        if (isError) {\n                            if (relatedToCancel) {\n                                self.log(\"Will cancel upload, but failed to remove uncommitted parts from Azure.\", \"error\");\n                            }\n                            else {\n                                qq.azure.util.parseAzureError(xhrOrXdr.responseText, qq.bind(self.log, self));\n                            }\n                        }\n\n                        if (relatedToCancel) {\n                            qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                            self.log(\"Deleted uncommitted blob chunks for \" + id);\n                        }\n                        else {\n                            self._onDeleteComplete(id, xhrOrXdr, isError);\n                            self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                        }\n                    }\n                }),\n                getSas = new qq.azure.GetSas({\n                    cors: this._options.cors,\n                    customHeaders: this._options.signature.customHeaders,\n                    endpointStore: {\n                        get: function() {\n                            return self._options.signature.endpoint;\n                        }\n                    },\n                    restRequestVerb: deleteBlob.method,\n                    log: qq.bind(self.log, self)\n                });\n\n            getSas.request(id, blobUriStore.get(id)).then(\n                qq.bind(getSasSuccess, self, id),\n                qq.bind(getSasFailure, self, id));\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return {\n                sendDelete: function(id, uuid) {\n                    self._deleteBlob(false, id);\n                }\n            };\n        }\n    });\n}());\n","/*globals qq */\n/**\n * Upload handler used by the upload to Azure module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to Azure Blob Storage containers via the\n * associated Azure API.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\n// TODO l18n for error messages returned to UI\nqq.azure.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        log = proxy.log,\n        cors = spec.cors,\n        endpointStore = spec.endpointStore,\n        paramsStore = spec.paramsStore,\n        signature = spec.signature,\n        filenameParam = spec.filenameParam,\n        minFileSizeForChunking = spec.chunking.minFileSize,\n        deleteBlob = spec.deleteBlob,\n        onGetBlobName = spec.onGetBlobName,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n\n        getBlobMetadata = function(id) {\n            var params = paramsStore.get(id);\n            params[filenameParam] = getName(id);\n            return params;\n        },\n\n        api = {\n            putBlob: new qq.azure.PutBlob({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            putBlock: new qq.azure.PutBlock({\n                log: log\n            }),\n\n            putBlockList: new qq.azure.PutBlockList({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            getSasForPutBlobOrBlock: new qq.azure.GetSas({\n                cors: cors,\n                customHeaders: signature.customHeaders,\n                endpointStore: {\n                    get: function() {\n                        return signature.endpoint;\n                    }\n                },\n                log: log,\n                restRequestVerb: \"PUT\"\n            })\n        };\n\n    function combineChunks(id) {\n        var promise = new qq.Promise();\n\n        getSignedUrl(id).then(function(sasUri) {\n            var mimeType = handler._getMimeType(id),\n                blockIdEntries = handler._getPersistableData(id).blockIdEntries;\n\n            api.putBlockList.send(id, sasUri, blockIdEntries, mimeType, function(xhr) {\n                handler._registerXhr(id, null, xhr, api.putBlockList);\n            })\n                .then(function(xhr) {\n                    log(\"Success combining chunks for id \" + id);\n                    promise.success({}, xhr);\n                }, function(xhr) {\n                    log(\"Attempt to combine chunks failed for id \" + id, \"error\");\n                    handleFailure(xhr, promise);\n                });\n\n        },\n        promise.failure);\n\n        return promise;\n    }\n\n    function determineBlobUrl(id) {\n        var containerUrl = endpointStore.get(id),\n            promise = new qq.Promise(),\n            getBlobNameSuccess = function(blobName) {\n                handler._setThirdPartyFileId(id, blobName);\n                promise.success(containerUrl + \"/\" + blobName);\n            },\n            getBlobNameFailure = function(reason) {\n                promise.failure(reason);\n            };\n\n        onGetBlobName(id).then(getBlobNameSuccess, getBlobNameFailure);\n\n        return promise;\n    }\n\n    function getSignedUrl(id, optChunkIdx) {\n        // We may have multiple SAS requests in progress for the same file, so we must include the chunk idx\n        // as part of the ID when communicating with the SAS ajax requester to avoid collisions.\n        var getSasId = optChunkIdx == null ? id : id + \".\" + optChunkIdx,\n\n            promise = new qq.Promise(),\n            getSasSuccess = function(sasUri) {\n                log(\"GET SAS request succeeded.\");\n                promise.success(sasUri);\n            },\n            getSasFailure = function(reason, getSasXhr) {\n                log(\"GET SAS request failed: \" + reason, \"error\");\n                promise.failure({error: \"Problem communicating with local server\"}, getSasXhr);\n            },\n            determineBlobUrlSuccess = function(blobUrl) {\n                api.getSasForPutBlobOrBlock.request(getSasId, blobUrl).then(\n                    getSasSuccess,\n                    getSasFailure\n                );\n            },\n            determineBlobUrlFailure = function(reason) {\n                log(qq.format(\"Failed to determine blob name for ID {} - {}\", id, reason), \"error\");\n                promise.failure({error: reason});\n            };\n\n        determineBlobUrl(id).then(determineBlobUrlSuccess, determineBlobUrlFailure);\n\n        return promise;\n    }\n\n    function handleFailure(xhr, promise) {\n        var azureError = qq.azure.util.parseAzureError(xhr.responseText, log),\n            errorMsg = \"Problem sending file to Azure\";\n\n        promise.failure({error: errorMsg,\n            azureError: azureError && azureError.message,\n            reset: xhr.status === 403\n        });\n    }\n\n    qq.extend(this, {\n        uploadChunk: function(id, chunkIdx) {\n            var promise = new qq.Promise();\n\n            getSignedUrl(id, chunkIdx).then(\n                function(sasUri) {\n                    var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx);\n\n                    handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                    handler._registerXhr(id, chunkIdx, xhr, api.putBlock);\n\n                    // We may have multiple put block requests in progress for the same file, so we must include the chunk idx\n                    // as part of the ID when communicating with the put block ajax requester to avoid collisions.\n                    api.putBlock.upload(id + \".\" + chunkIdx, xhr, sasUri, chunkIdx, chunkData.blob).then(\n                        function(blockIdEntry) {\n                            if (!handler._getPersistableData(id).blockIdEntries) {\n                                handler._getPersistableData(id).blockIdEntries = [];\n                            }\n\n                            handler._getPersistableData(id).blockIdEntries.push(blockIdEntry);\n                            log(\"Put Block call succeeded for \" + id);\n                            promise.success({}, xhr);\n                        },\n                        function() {\n                            log(qq.format(\"Put Block call failed for ID {} on part {}\", id, chunkIdx), \"error\");\n                            handleFailure(xhr, promise);\n                        }\n                    );\n                },\n                promise.failure\n            );\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var promise = new qq.Promise(),\n                fileOrBlob = handler.getFile(id);\n\n            getSignedUrl(id).then(function(sasUri) {\n                var xhr = handler._createXhr(id);\n\n                handler._registerProgressHandler(id);\n\n                api.putBlob.upload(id, xhr, sasUri, fileOrBlob).then(\n                    function() {\n                        log(\"Put Blob call succeeded for \" + id);\n                        promise.success({}, xhr);\n                    },\n                    function() {\n                        log(\"Put Blob call failed for \" + id, \"error\");\n                        handleFailure(xhr, promise);\n                    }\n                );\n            },\n            promise.failure);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this,\n        new qq.XhrUploadHandler({\n            options: qq.extend({namespace: \"azure\"}, spec),\n            proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n        }\n    ));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var relatedToCancel = handler._wasCanceled(id),\n                    chunkingData = handler._getPersistableData(id),\n                    blockIdEntries = (chunkingData && chunkingData.blockIdEntries) || [];\n\n                if (relatedToCancel && blockIdEntries.length > 0) {\n                    deleteBlob(id);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return combineChunks(id);\n            },\n\n            _shouldChunkThisFile: function(id) {\n                var maybePossible = super_._shouldChunkThisFile(id);\n                return maybePossible && getSize(id) >= minFileSizeForChunking;\n            }\n        };\n    });\n};\n","/* globals qq */\n/**\n * Sends a GET request to the integrator's server, which should return a Shared Access Signature URI used to\n * make a specific request on a Blob via the Azure REST API.\n */\nqq.azure.GetSas = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            customHeaders: {},\n            restRequestVerb: \"PUT\",\n            endpointStore: null,\n            log: function(str, level) {}\n        },\n        requestPromises = {};\n\n    qq.extend(options, o);\n\n    function sasResponseReceived(id, xhr, isError) {\n        var promise = requestPromises[id];\n\n        if (isError) {\n            promise.failure(\"Received response code \" + xhr.status, xhr);\n        }\n        else {\n            if (xhr.responseText.length) {\n                promise.success(xhr.responseText);\n            }\n            else {\n                promise.failure(\"Empty response.\", xhr);\n            }\n        }\n\n        delete requestPromises[id];\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        successfulResponseCodes: {\n            GET: [200]\n        },\n        contentType: null,\n        customHeaders: options.customHeaders,\n        endpointStore: options.endpointStore,\n        cors: options.cors,\n        log: options.log,\n        onComplete: sasResponseReceived\n    }));\n\n    qq.extend(this, {\n        request: function(id, blobUri) {\n            var requestPromise = new qq.Promise(),\n                restVerb = options.restRequestVerb;\n\n            options.log(qq.format(\"Submitting GET SAS request for a {} REST request related to file ID {}.\", restVerb, id));\n\n            requestPromises[id] = requestPromise;\n\n            requester.initTransport(id)\n                .withParams({\n                    bloburi: blobUri,\n                    _method: restVerb\n                })\n                .withCacheBuster()\n                .send();\n\n            return requestPromise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Delete Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179413.aspx.\n */\nqq.azure.DeleteBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"DELETE\",\n        options = {\n            endpointStore: {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhr, isError) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [202];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: options.endpointStore,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete\n    }));\n\n    qq.extend(this, {\n        method: method,\n        send: function(id) {\n            options.log(\"Submitting Delete Blob request for \" + id);\n\n            return requester.initTransport(id)\n                .send();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179451.aspx.\n */\nqq.azure.PutBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id),\n                headers = qq.azure.util.getParamsAsHeaders(params);\n\n            headers[\"x-ms-blob-type\"] = \"BlockBlob\";\n\n            return headers;\n        },\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success();\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, url, file) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting Put Blob request for \" + id);\n\n            promises[id] = promise;\n            endpoints[id] = url;\n\n            requester.initTransport(id)\n                .withPayload(file)\n                .withHeaders({\"Content-Type\": file.type})\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd135726.aspx.\n */\nqq.azure.PutBlock = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        blockIdEntries = {},\n        promises = {},\n        options = {\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id],\n                blockIdEntry = blockIdEntries[id];\n\n            delete endpoints[id];\n            delete promises[id];\n            delete blockIdEntries[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success(blockIdEntry);\n            }\n        }\n    }));\n\n    function createBlockId(partNum) {\n        var digits = 5,\n            zeros = new Array(digits + 1).join(\"0\"),\n            paddedPartNum = (zeros + partNum).slice(-digits);\n\n        return btoa(paddedPartNum);\n    }\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, sasUri, partNum, blob) {\n            var promise = new qq.Promise(),\n                blockId = createBlockId(partNum);\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block request for {} = part {}\", id, partNum));\n\n            endpoints[id] = qq.format(\"{}&comp=block&blockid={}\", sasUri, encodeURIComponent(blockId));\n            blockIdEntries[id] = {part: partNum, id: blockId};\n\n            requester.initTransport(id)\n                .withPayload(blob)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block List Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179467.aspx.\n */\nqq.azure.PutBlockList = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        promises = {},\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id);\n\n            return qq.azure.util.getParamsAsHeaders(params);\n        },\n        contentType: \"text/plain\",\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: function() {},\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n\n        }\n    }));\n\n    function createRequestBody(blockIdEntries) {\n        var doc = document.implementation.createDocument(null, \"BlockList\", null);\n\n        // If we don't sort the block ID entries by part number, the file will be combined incorrectly by Azure\n        blockIdEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(blockIdEntries, function(idx, blockIdEntry) {\n            var latestEl = doc.createElement(\"Latest\"),\n                latestTextEl = doc.createTextNode(blockIdEntry.id);\n\n            latestEl.appendChild(latestTextEl);\n            qq(doc).children()[0].appendChild(latestEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    qq.extend(this, {\n        method: method,\n        send: function(id, sasUri, blockIdEntries, fileMimeType, registerXhrCallback) {\n            var promise = new qq.Promise(),\n                blockIdsXml = createRequestBody(blockIdEntries),\n                xhr;\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block List request for {}\", id));\n\n            endpoints[id] = qq.format(\"{}&comp=blocklist\", sasUri);\n\n            xhr = requester.initTransport(id)\n                .withPayload(blockIdsXml)\n                .withHeaders({\"x-ms-blob-content-type\": fileMimeType})\n                .send();\n            registerXhrCallback(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to Azure.\n * This module inherits all logic from UI & core mode and adds some UI-related logic\n * specific to the upload-to-Azure workflow.  Some inherited options and API methods have a special meaning\n * in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from azure.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"azure\");\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.azure.FineUploader.prototype, qq.azure.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploader.prototype, {\n    });\n}());\n"]}