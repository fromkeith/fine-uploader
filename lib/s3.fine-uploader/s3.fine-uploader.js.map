{"version":3,"sources":["?","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/third-party/crypto-js/core.js","../client/js/third-party/crypto-js/enc-base64.js","../client/js/third-party/crypto-js/hmac.js","../client/js/third-party/crypto-js/sha1.js","../client/js/third-party/crypto-js/sha256.js","../client/js/third-party/crypto-js/lib-typedarrays.js","../client/js/s3/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/s3/uploader.basic.js","../client/js/s3/request-signer.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/s3/multipart.initiate.ajax.requester.js","../client/js/s3/multipart.complete.ajax.requester.js","../client/js/s3/multipart.abort.ajax.requester.js","../client/js/s3/s3.xhr.upload.handler.js","../client/js/s3/s3.form.upload.handler.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/s3/uploader.js"],"names":["global","qq","element","hide","style","display","this","attach","type","fn","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","name","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","each","idx","val","push","getFirstByClass","children","child","firstChild","nodeType","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","exec","getAttribute","undefined","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","data","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","length","Uint8Array","character","charCodeAt","log","message","level","console","isObject","variable","Object","prototype","toString","call","isFunction","isArray","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","Array","slice","arguments","newStr","nextIdxToReplace","strBefore","substring","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","toLowerCase","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","error","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","prop","override","target","sourceFn","super_","source","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","retVal","Storage","key","getItem","charAt","bind","oldFunc","context","newArgs","concat","apply","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","match","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","self","disposeSupport","options","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","index","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","params","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","_options","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","callbacks","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","toUpperCase","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_onDeleteComplete","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","namespace","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","UploadHandlerController","_fileOrBlobRejected","_formatSize","max","toFixed","sizeSymbols","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","expunge","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","errorMessage","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","paramsInBody","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partIndex","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","alreadyInWaiting","alreadyInOpen","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","el","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","CryptoJS","C","C_lib","lib","Base","F","overrides","subtype","mixIn","init","$super","instance","properties","propertyName","clone","WordArray","words","sigBytes","encoder","Hex","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","nBytes","C_enc","enc","hexChars","bite","hexStr","hexStrLength","Latin1","latin1Chars","fromCharCode","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","utf8Str","unescape","BufferedBlockAlgorithm","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","_minBufferSize","nWordsReady","nBytesReady","min","_doProcessBlock","processedWords","Hasher","cfg","_doReset","update","messageUpdate","hash","_doFinalize","_createHelper","hasher","_createHmacHelper","C_algo","HMAC","algo","Base64","map","_map","base64Chars","byte1","byte2","byte3","triplet","j","paddingChar","base64Str","base64StrLength","paddingIndex","bits1","bits2","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac","W","SHA1","_hash","M","H","n","t","nBitsTotal","nBitsLeft","floor","HmacSHA1","K","isPrime","sqrtN","factor","getFractionalBits","nPrime","SHA256","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","HmacSHA256","superInit","subInit","typedArray","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","byteOffset","byteLength","typedArrayByteLength","s3","util","ALGORITHM_PARAM_NAME","AWS_PARAM_PREFIX","CREDENTIAL_PARAM_NAME","DATE_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_VALUE","SERVER_SIDE_ENCRYPTION_PARAM_NAME","SERVER_SIDE_ENCRYPTION_PARAM_VALUE","SESSION_TOKEN_PARAM_NAME","V4_ALGORITHM_PARAM_VALUE","V4_SIGNATURE_PARAM_NAME","CASE_SENSITIVE_PARAM_NAMES","UNSIGNABLE_REST_HEADER_NAMES","UNPREFIXED_PARAM_NAMES","getBucket","patterns","bucket","pattern","_getPrefixedParamName","getPolicy","policy","conditions","date","drift","clockDrift","accessKey","acl","expectedStatus","sessionToken","successRedirectUrl","getSuccessRedirectAbsoluteUrl","minFileSize","maxFileSize","reducedRedundancy","region","serverSideEncryption","signatureVersion","expiration","getPolicyExpirationDate","Content-Type","success_action_status","success_action_redirect","getV4CredentialsString","getV4PolicyDate","awsParamName","enforceSizeLimits","refreshPolicyCredentials","newSessionToken","sessionTokenFound","oldCondIdx","oldCondObj","oldCondName","oldCondVal","generateAwsParams","signPolicyCallback","awsParams","customParams","policyJson","AWSAccessKeyId","policyAndSignature","updatedAccessKey","updatedSessionToken","signature","minSize","adjustedMinSize","adjustedMaxSize","adjustedDate","getPolicyDate","getCredentialsDate","getUTCFullYear","getUTCMonth","getUTCDate","_minutesToAdd_","minutesToAdd","pad","setMinutes","getMinutes","toISOString","number","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseIframeResponse","doc","contentWindow","queryString","search","etag","targetAnchorContainer","encodeQueryStringParam","percentEncoded","uriEscape","uriEscapePath","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","objectProperties","host","credentials","secretKey","iframeSupport","localBlankPagePath","onCredentialsExpired","setCredentials","_currentCredentials","_aclStore","_cannedKeys","_cannedBuckets","_buckets","_hosts","getKey","ignoreEmpty","setAcl","aclStore","_determineBucket","getHost","_determineHost","getKeyName","_determineKeyName","maxSizeLimit","oldParams","modifiedParams","paramName","credentialsProvider","onExpired","updateCredentials","_determineObjectPropertyValue","property","maybe","keynameLogic","onGetKeynameFailure","onGetKeynameSuccess","keyname","keynameToUse","_handleKeynameFunction","keynameFunc","successCallback","failureCallback","getResponseHeader","s3Key","s3Bucket","RequestSigner","thisSignatureRequester","pendingSignatures","expectingPolicy","signatureSpec","useWorker","generateHeaders","signatureConstructor","getHeaders","Authorization","getRequestDate","getSignedHeaders","getEndOfUrl","v2","getStringToSign","contentMd5","headersStr","endOfUrl","signApiRequest","signatureEffort","headersWordArray","headersHmacSha1","headersHmacSha1Base64","signPolicy","policyStr","policyWordArray","base64Policy","policyHmacSha1","policyHmacSha1Base64","v4","getCanonicalQueryString","endOfUri","queryParamIdx","canonicalQueryString","encodedQueryParams","encodedQueryParamNames","queryStrings","nameAndVal","paramVal","forEach","encodedQueryParamName","getCanonicalRequest","getCanonicalUri","headerNames","hashedContent","getEncodedHashedPayload","_worker","workerUrl","worker","Worker","_workerPromises","onmessage","resp","task","onloadend","DONE","getScope","canonicalRequest","hashedRequest","scope","stringToSignTemplate","hashed","raw","signedHeaders","headerName","headersPattern","matches","dateKey","dateRegionKey","dateRegionServiceKey","signingKey","credentialPattern","credentialCondition","credential","condition","handleSignatureReceived","responseJson","pendingSignatureData","invalid","getStringToSignArtifacts","requestInfo","toSign","generateStringToSign","headerIndexesToRemove","headerIdx","toSignRaw","REQUEST_TYPE","MULTIPART_ABORT","uploadId","MULTIPART_INITIATE","MULTIPART_COMPLETE","MULTIPART_UPLOAD","partNum","content","Host","determineSignatureClientSide","toBeSigned","updatedHeaders","getToSign","signatureArtifacts","stringToSign","getSignature","queryParams","stringToSignRaw","constructStringToSign","artifacts","theHeaders","withUploadId","theUploadId","withContent","theContent","withContentType","theContentType","withPartNum","thePartNum","toUTCString","_artifacts_","pendingRequests","handleSuccessResponse","successIndicator","failureIndicator","parsedResponse","InitiateMultipartAjaxRequester","pendingInitiateRequests","getContentType","getSignatureAjaxRequester","handleInitiateRequestComplete","domParser","DOMParser","responseDoc","parseFromString","uploadIdElements","messageElements","CompleteMultipartAjaxRequester","pendingCompleteRequests","handleCompleteRequestComplete","bucketEls","keyEls","getCompleteRequestBody","etagEntries","implementation","createDocument","etagEntry","partEl","partNumEl","partNumTextEl","createTextNode","etagTextEl","etagEl","XMLSerializer","serializeToString","AbortMultipartAjaxRequester","handleAbortRequestComplete","errorEls","awsErrorMsg","onGetBucket","onGetHost","onGetKeyName","combine","etagMap","etags","requesters","completeMultipart","initHeaders","urlSafe","restSignature","put","domain","track","setup","uploadIdPromise","initiateMultipart","abortMultipart","policySignature","initParams","toSend","cachedBucket","cachedHost","shouldReset","keyName","encodedKey","parsedErrorProps","parseError","awsResponseXml","parsedDoc","errorDetails","codeEls","messageEls","existedInLocalStorage","baseStorageId","bucketName","isValidResponse","innerHtml","responseData","createForm","handleFinishedUpload","handleUpload","DragAndDrop","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","dropZoneElements","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","FineUploader","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","createDocumentFragment","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","uploader","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"s3.fine-uploader.js","sourcesContent":[null,"/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.11.9patchs\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\r\n/**\r\n * Defines the public API for FineUploaderBasic mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.basePublicApi = {\r\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\r\n        addBlobs: function(blobDataOrArray, params, endpoint) {\r\n            this.addFiles(blobDataOrArray, params, endpoint);\r\n        },\r\n\r\n        addInitialFiles: function(cannedFileList) {\r\n            var self = this;\r\n\r\n            qq.each(cannedFileList, function(index, cannedFile) {\r\n                self._addCannedFile(cannedFile);\r\n            });\r\n        },\r\n\r\n        addFiles: function(data, params, endpoint) {\r\n            this._maybeHandleIos8SafariWorkaround();\r\n\r\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\r\n\r\n                processBlob = qq.bind(function(blob) {\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processBlobData = qq.bind(function(blobData) {\r\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvas = qq.bind(function(canvas) {\r\n                    var blob = qq.canvasToBlob(canvas);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName + \".png\"\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvasData = qq.bind(function(canvasData) {\r\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\r\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: canvasData.name\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processFileOrInput = qq.bind(function(fileOrInput) {\r\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\r\n                        var files = Array.prototype.slice.call(fileOrInput.files),\r\n                            self = this;\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            self._handleNewFile(file, batchId, verifiedFiles);\r\n                        });\r\n                    }\r\n                    else {\r\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\r\n                    }\r\n                }, this),\r\n\r\n                normalizeData = function() {\r\n                    if (qq.isFileList(data)) {\r\n                        data = Array.prototype.slice.call(data);\r\n                    }\r\n                    data = [].concat(data);\r\n                },\r\n\r\n                self = this,\r\n                verifiedFiles = [];\r\n\r\n            this._currentBatchId = batchId;\r\n\r\n            if (data) {\r\n                normalizeData();\r\n\r\n                qq.each(data, function(idx, fileContainer) {\r\n                    if (qq.isFileOrInput(fileContainer)) {\r\n                        processFileOrInput(fileContainer);\r\n                    }\r\n                    else if (qq.isBlob(fileContainer)) {\r\n                        processBlob(fileContainer);\r\n                    }\r\n                    else if (qq.isObject(fileContainer)) {\r\n                        if (fileContainer.blob && fileContainer.name) {\r\n                            processBlobData(fileContainer);\r\n                        }\r\n                        else if (fileContainer.canvas && fileContainer.name) {\r\n                            processCanvasData(fileContainer);\r\n                        }\r\n                    }\r\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\r\n                        processCanvas(fileContainer);\r\n                    }\r\n                    else {\r\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\r\n                    }\r\n                });\r\n\r\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\r\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\r\n            }\r\n        },\r\n\r\n        cancel: function(id) {\r\n            this._handler.cancel(id);\r\n        },\r\n\r\n        cancelAll: function() {\r\n            var storedIdsCopy = [],\r\n                self = this;\r\n\r\n            qq.extend(storedIdsCopy, this._storedIds);\r\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\r\n                self.cancel(storedFileId);\r\n            });\r\n\r\n            this._handler.cancelAll();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._storedIds = [];\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (uploadData.status === qq.status.PAUSED) {\r\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\r\n                this._uploadFile(id);\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        deleteFile: function(id) {\r\n            return this._onSubmitDelete(id);\r\n        },\r\n\r\n        // TODO document?\r\n        doesExist: function(fileOrBlobId) {\r\n            return this._handler.isValid(fileOrBlobId);\r\n        },\r\n\r\n        // Generate a variable size thumbnail on an img or canvas,\r\n        // returning a promise that is fulfilled when the attempt completes.\r\n        // Thumbnail can either be based off of a URL for an image returned\r\n        // by the server in the upload response, or the associated `Blob`.\r\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\r\n            var promiseToReturn = new qq.Promise(),\r\n                fileOrUrl, options;\r\n\r\n            if (this._imageGenerator) {\r\n                fileOrUrl = this._thumbnailUrls[fileId];\r\n                options = {\r\n                    customResizeFunction: customResizeFunction,\r\n                    maxSize: maxSize > 0 ? maxSize : null,\r\n                    scale: maxSize > 0\r\n                };\r\n\r\n                // If client-side preview generation is possible\r\n                // and we are not specifically looking for the image URl returned by the server...\r\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\r\n                    fileOrUrl = this.getFile(fileId);\r\n                }\r\n\r\n                /* jshint eqeqeq:false,eqnull:true */\r\n                if (fileOrUrl == null) {\r\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\r\n                }\r\n                else {\r\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\r\n                        function success(modifiedContainer) {\r\n                            promiseToReturn.success(modifiedContainer);\r\n                        },\r\n\r\n                        function failure(container, reason) {\r\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n            else {\r\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\r\n            }\r\n\r\n            return promiseToReturn;\r\n        },\r\n\r\n        getButton: function(fileId) {\r\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\r\n        },\r\n\r\n        getEndpoint: function(fileId) {\r\n            return this._endpointStore.get(fileId);\r\n        },\r\n\r\n        getFile: function(fileOrBlobId) {\r\n            return this._handler.getFile(fileOrBlobId) || null;\r\n        },\r\n\r\n        getInProgress: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        getName: function(id) {\r\n            return this._uploadData.retrieve({id: id}).name;\r\n        },\r\n\r\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\r\n        getParentId: function(id) {\r\n            var uploadDataEntry = this.getUploads({id: id}),\r\n                parentId = null;\r\n\r\n            if (uploadDataEntry) {\r\n                if (uploadDataEntry.parentId !== undefined) {\r\n                    parentId = uploadDataEntry.parentId;\r\n                }\r\n            }\r\n\r\n            return parentId;\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            return this._handler.getResumableFilesData();\r\n        },\r\n\r\n        getSize: function(id) {\r\n            return this._uploadData.retrieve({id: id}).size;\r\n        },\r\n\r\n        getNetUploads: function() {\r\n            return this._netUploaded;\r\n        },\r\n\r\n        getRemainingAllowedItems: function() {\r\n            var allowedItems = this._currentItemLimit;\r\n\r\n            if (allowedItems > 0) {\r\n                return allowedItems - this._netUploadedOrQueued;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        getUploads: function(optionalFilter) {\r\n            return this._uploadData.retrieve(optionalFilter);\r\n        },\r\n\r\n        getUuid: function(id) {\r\n            return this._uploadData.retrieve({id: id}).uuid;\r\n        },\r\n\r\n        log: function(str, level) {\r\n            if (this._options.debug && (!level || level === \"info\")) {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\r\n            }\r\n            else if (level && level !== \"info\") {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\r\n\r\n            }\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            // Pause only really makes sense if the file is uploading or retrying\r\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\r\n                if (this._handler.pause(id)) {\r\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\r\n                }\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        reset: function() {\r\n            this.log(\"Resetting uploader...\");\r\n\r\n            this._handler.reset();\r\n            this._storedIds = [];\r\n            this._autoRetries = [];\r\n            this._retryTimeouts = [];\r\n            this._preventRetries = [];\r\n            this._thumbnailUrls = [];\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n\r\n            this._paramsStore.reset();\r\n            this._endpointStore.reset();\r\n            this._netUploadedOrQueued = 0;\r\n            this._netUploaded = 0;\r\n            this._uploadData.reset();\r\n            this._buttonIdsForFileIds = [];\r\n\r\n            this._pasteHandler && this._pasteHandler.reset();\r\n            this._options.session.refreshOnReset && this._refreshSessionData();\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n\r\n            this._totalProgress && this._totalProgress.reset();\r\n        },\r\n\r\n        retry: function(id) {\r\n            return this._manualRetry(id);\r\n        },\r\n\r\n        scaleImage: function(id, specs) {\r\n            var self = this;\r\n\r\n            return qq.Scaler.prototype.scaleImage(id, specs, {\r\n                log: qq.bind(self.log, self),\r\n                getFile: qq.bind(self.getFile, self),\r\n                uploadData: self._uploadData\r\n            });\r\n        },\r\n\r\n        setCustomHeaders: function(headers, id) {\r\n            this._customHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileCustomHeaders: function(headers, id) {\r\n            this._deleteFileCustomHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileEndpoint: function(endpoint, id) {\r\n            this._deleteFileEndpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setDeleteFileParams: function(params, id) {\r\n            this._deleteFileParamsStore.set(params, id);\r\n        },\r\n\r\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\r\n        setEndpoint: function(endpoint, id) {\r\n            this._endpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setForm: function(elementOrId) {\r\n            this._updateFormSupportAndParams(elementOrId);\r\n        },\r\n\r\n        setItemLimit: function(newItemLimit) {\r\n            this._currentItemLimit = newItemLimit;\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            this._uploadData.updateName(id, newName);\r\n        },\r\n\r\n        setParams: function(params, id) {\r\n            this._paramsStore.set(params, id);\r\n        },\r\n\r\n        setUuid: function(id, newUuid) {\r\n            return this._uploadData.uuidChanged(id, newUuid);\r\n        },\r\n\r\n        uploadStoredFiles: function() {\r\n            if (this._storedIds.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n            }\r\n            else {\r\n                this._uploadStoredFiles();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploaderBasic mode.\r\n     */\r\n    qq.basePrivateApi = {\r\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._uploadData.addFile({\r\n                uuid: sessionData.uuid,\r\n                name: sessionData.name,\r\n                size: sessionData.size,\r\n                status: qq.status.UPLOAD_SUCCESSFUL\r\n            });\r\n\r\n            sessionData.deleteFileEndpoint && this.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\r\n            sessionData.deleteFileParams && this.setDeleteFileParams(sessionData.deleteFileParams, id);\r\n\r\n            if (sessionData.thumbnailUrl) {\r\n                this._thumbnailUrls[id] = sessionData.thumbnailUrl;\r\n            }\r\n\r\n            this._netUploaded++;\r\n            this._netUploadedOrQueued++;\r\n\r\n            return id;\r\n        },\r\n\r\n        _annotateWithButtonId: function(file, associatedInput) {\r\n            if (qq.isFile(file)) {\r\n                file.qqButtonId = this._getButtonId(associatedInput);\r\n            }\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._options.callbacks.onError(null, null, message, undefined);\r\n        },\r\n\r\n        _createDeleteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.DeleteFileAjaxRequester({\r\n                method: this._options.deleteFile.method.toUpperCase(),\r\n                maxConnections: this._options.maxConnections,\r\n                uuidParamName: this._options.request.uuidName,\r\n                customHeaders: this._deleteFileCustomHeadersStore,\r\n                paramsStore: this._deleteFileParamsStore,\r\n                endpointStore: this._deleteFileEndpointStore,\r\n                cors: this._options.cors,\r\n                log: qq.bind(self.log, self),\r\n                onDelete: function(id) {\r\n                    self._onDelete(id);\r\n                    self._options.callbacks.onDelete(id);\r\n                },\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\r\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        _createPasteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.PasteSupport({\r\n                targetElement: this._options.paste.targetElement,\r\n                callbacks: {\r\n                    log: qq.bind(self.log, self),\r\n                    pasteReceived: function(blob) {\r\n                        self._handleCheckedCallback({\r\n                            name: \"onPasteReceived\",\r\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\r\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\r\n                            identifier: \"pasted image\"\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _createStore: function(initialValue, _readOnlyValues_) {\r\n            var store = {},\r\n                catchall = initialValue,\r\n                perIdReadOnlyValues = {},\r\n                readOnlyValues = _readOnlyValues_,\r\n                copy = function(orig) {\r\n                    if (qq.isObject(orig)) {\r\n                        return qq.extend({}, orig);\r\n                    }\r\n                    return orig;\r\n                },\r\n                getReadOnlyValues = function() {\r\n                    if (qq.isFunction(readOnlyValues)) {\r\n                        return readOnlyValues();\r\n                    }\r\n                    return readOnlyValues;\r\n                },\r\n                includeReadOnlyValues = function(id, existing) {\r\n                    if (readOnlyValues && qq.isObject(existing)) {\r\n                        qq.extend(existing, getReadOnlyValues());\r\n                    }\r\n\r\n                    if (perIdReadOnlyValues[id]) {\r\n                        qq.extend(existing, perIdReadOnlyValues[id]);\r\n                    }\r\n                };\r\n\r\n            return {\r\n                set: function(val, id) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id == null) {\r\n                        store = {};\r\n                        catchall = copy(val);\r\n                    }\r\n                    else {\r\n                        store[id] = copy(val);\r\n                    }\r\n                },\r\n\r\n                get: function(id) {\r\n                    var values;\r\n\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id != null && store[id]) {\r\n                        values = store[id];\r\n                    }\r\n                    else {\r\n                        values = copy(catchall);\r\n                    }\r\n\r\n                    includeReadOnlyValues(id, values);\r\n\r\n                    return copy(values);\r\n                },\r\n\r\n                addReadOnly: function(id, values) {\r\n                    // Only applicable to Object stores\r\n                    if (qq.isObject(store)) {\r\n                        // If null ID, apply readonly values to all files\r\n                        if (id === null) {\r\n                            if (qq.isFunction(values)) {\r\n                                readOnlyValues = values;\r\n                            }\r\n                            else {\r\n                                readOnlyValues = readOnlyValues || {};\r\n                                qq.extend(readOnlyValues, values);\r\n                            }\r\n                        }\r\n                        else {\r\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\r\n                            qq.extend(perIdReadOnlyValues[id], values);\r\n                        }\r\n                    }\r\n                },\r\n\r\n                remove: function(fileId) {\r\n                    return delete store[fileId];\r\n                },\r\n\r\n                reset: function() {\r\n                    store = {};\r\n                    perIdReadOnlyValues = {};\r\n                    catchall = initialValue;\r\n                }\r\n            };\r\n        },\r\n\r\n        _createUploadDataTracker: function() {\r\n            var self = this;\r\n\r\n            return new qq.UploadData({\r\n                getName: function(id) {\r\n                    return self.getName(id);\r\n                },\r\n                getUuid: function(id) {\r\n                    return self.getUuid(id);\r\n                },\r\n                getSize: function(id) {\r\n                    return self.getSize(id);\r\n                },\r\n                onStatusChange: function(id, oldStatus, newStatus) {\r\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\r\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\r\n                    self._maybeAllComplete(id, newStatus);\r\n\r\n                    if (self._totalProgress) {\r\n                        setTimeout(function() {\r\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\r\n                        }, 0);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Generate a tracked upload button.\r\n         *\r\n         * @param spec Object containing a required `element` property\r\n         * along with optional `multiple`, `accept`, and `folders`.\r\n         * @returns {qq.UploadButton}\r\n         * @private\r\n         */\r\n        _createUploadButton: function(spec) {\r\n            var self = this,\r\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\r\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\r\n                button;\r\n\r\n            function allowMultiple() {\r\n                if (qq.supportedFeatures.ajaxUploading) {\r\n                    // Workaround for bug in iOS7+ (see #1039)\r\n                    if (self._options.workarounds.iosEmptyVideos &&\r\n                        qq.ios() &&\r\n                        !qq.ios6() &&\r\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\r\n\r\n                        return false;\r\n                    }\r\n\r\n                    if (spec.multiple === undefined) {\r\n                        return self._options.multiple;\r\n                    }\r\n\r\n                    return spec.multiple;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            button = new qq.UploadButton({\r\n                acceptFiles: acceptFiles,\r\n                element: spec.element,\r\n                focusClass: this._options.classes.buttonFocus,\r\n                folders: spec.folders,\r\n                hoverClass: this._options.classes.buttonHover,\r\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\r\n                multiple: allowMultiple(),\r\n                name: this._options.request.inputName,\r\n                onChange: function(input) {\r\n                    self._onInputChange(input);\r\n                },\r\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\r\n            });\r\n\r\n            this._disposeSupport.addDisposer(function() {\r\n                button.dispose();\r\n            });\r\n\r\n            self._buttons.push(button);\r\n\r\n            return button;\r\n        },\r\n\r\n        _createUploadHandler: function(additionalOptions, namespace) {\r\n            var self = this,\r\n                lastOnProgress = {},\r\n                options = {\r\n                    debug: this._options.debug,\r\n                    maxConnections: this._options.maxConnections,\r\n                    cors: this._options.cors,\r\n                    paramsStore: this._paramsStore,\r\n                    endpointStore: this._endpointStore,\r\n                    chunking: this._options.chunking,\r\n                    resume: this._options.resume,\r\n                    blobs: this._options.blobs,\r\n                    log: qq.bind(self.log, self),\r\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\r\n                    onProgress: function(id, name, loaded, total) {\r\n                        if (loaded < 0 || total < 0) {\r\n                            return;\r\n                        }\r\n\r\n                        if (lastOnProgress[id]) {\r\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\r\n                                self._onProgress(id, name, loaded, total);\r\n                                self._options.callbacks.onProgress(id, name, loaded, total);\r\n                            }\r\n                        }\r\n                        else {\r\n                            self._onProgress(id, name, loaded, total);\r\n                            self._options.callbacks.onProgress(id, name, loaded, total);\r\n                        }\r\n\r\n                        lastOnProgress[id] = {loaded: loaded, total: total};\r\n\r\n                    },\r\n                    onComplete: function(id, name, result, xhr) {\r\n                        delete lastOnProgress[id];\r\n\r\n                        var status = self.getUploads({id: id}).status,\r\n                            retVal;\r\n\r\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\r\n                        // invoked by the browser multiple times for the same XHR instance with the same state\r\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\r\n                        // done this.\r\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\r\n                            return;\r\n                        }\r\n\r\n                        retVal = self._onComplete(id, name, result, xhr);\r\n\r\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\r\n                        // until the promise has been fulfilled.\r\n                        if (retVal instanceof  qq.Promise) {\r\n                            retVal.done(function() {\r\n                                self._options.callbacks.onComplete(id, name, result, xhr);\r\n                            });\r\n                        }\r\n                        else {\r\n                            self._options.callbacks.onComplete(id, name, result, xhr);\r\n                        }\r\n                    },\r\n                    onCancel: function(id, name, cancelFinalizationEffort) {\r\n                        var promise = new qq.Promise();\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onCancel\",\r\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\r\n                            onFailure: promise.failure,\r\n                            onSuccess: function() {\r\n                                cancelFinalizationEffort.then(function() {\r\n                                    self._onCancel(id, name);\r\n                                });\r\n\r\n                                promise.success();\r\n                            },\r\n                            identifier: id\r\n                        });\r\n\r\n                        return promise;\r\n                    },\r\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\r\n                    onUpload: function(id, name) {\r\n                        self._onUpload(id, name);\r\n                        self._options.callbacks.onUpload(id, name);\r\n                    },\r\n                    onUploadChunk: function(id, name, chunkData) {\r\n                        self._onUploadChunk(id, chunkData);\r\n                        self._options.callbacks.onUploadChunk(id, name, chunkData);\r\n                    },\r\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\r\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\r\n                    },\r\n                    onResume: function(id, name, chunkData) {\r\n                        return self._options.callbacks.onResume(id, name, chunkData);\r\n                    },\r\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\r\n                        return self._onAutoRetry.apply(self, arguments);\r\n                    },\r\n                    onUuidChanged: function(id, newUuid) {\r\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\r\n                        self.setUuid(id, newUuid);\r\n                    },\r\n                    getName: qq.bind(self.getName, self),\r\n                    getUuid: qq.bind(self.getUuid, self),\r\n                    getSize: qq.bind(self.getSize, self),\r\n                    setSize: qq.bind(self._setSize, self),\r\n                    getDataByUuid: function(uuid) {\r\n                        return self.getUploads({uuid: uuid});\r\n                    },\r\n                    isQueued: function(id) {\r\n                        var status = self.getUploads({id: id}).status;\r\n                        return status === qq.status.QUEUED ||\r\n                            status === qq.status.SUBMITTED ||\r\n                            status === qq.status.UPLOAD_RETRYING ||\r\n                            status === qq.status.PAUSED;\r\n                    },\r\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\r\n                    getIdsInBatch: self._uploadData.getIdsInBatch\r\n                };\r\n\r\n            qq.each(this._options.request, function(prop, val) {\r\n                options[prop] = val;\r\n            });\r\n\r\n            options.customHeaders = this._customHeadersStore;\r\n\r\n            if (additionalOptions) {\r\n                qq.each(additionalOptions, function(key, val) {\r\n                    options[key] = val;\r\n                });\r\n            }\r\n\r\n            return new qq.UploadHandlerController(options, namespace);\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id) {\r\n            this._netUploadedOrQueued--;\r\n            this._uploadData.setStatus(id, qq.status.REJECTED);\r\n        },\r\n\r\n        _formatSize: function(bytes) {\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1000;\r\n                i++;\r\n            } while (bytes > 999);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\r\n        },\r\n\r\n        // Creates an internal object that tracks various properties of each extra button,\r\n        // and then actually creates the extra button.\r\n        _generateExtraButtonSpecs: function() {\r\n            var self = this;\r\n\r\n            this._extraButtonSpecs = {};\r\n\r\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\r\n                var multiple = extraButtonOptionEntry.multiple,\r\n                    validation = qq.extend({}, self._options.validation, true),\r\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\r\n\r\n                if (multiple === undefined) {\r\n                    multiple = self._options.multiple;\r\n                }\r\n\r\n                if (extraButtonSpec.validation) {\r\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\r\n                }\r\n\r\n                qq.extend(extraButtonSpec, {\r\n                    multiple: multiple,\r\n                    validation: validation\r\n                }, true);\r\n\r\n                self._initExtraButton(extraButtonSpec);\r\n            });\r\n        },\r\n\r\n        _getButton: function(buttonId) {\r\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            if (extraButtonsSpec) {\r\n                return extraButtonsSpec.element;\r\n            }\r\n            else if (buttonId === this._defaultButtonId) {\r\n                return this._options.button;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the internally used tracking ID for a button.\r\n         *\r\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\r\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\r\n         * @private\r\n         */\r\n        _getButtonId: function(buttonOrFileInputOrFile) {\r\n            var inputs, fileInput,\r\n                fileBlobOrInput = buttonOrFileInputOrFile;\r\n\r\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\r\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\r\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\r\n            }\r\n\r\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\r\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\r\n                if (qq.isFile(fileBlobOrInput)) {\r\n                    return fileBlobOrInput.qqButtonId;\r\n                }\r\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\r\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\r\n\r\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n\r\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\r\n\r\n                qq.each(inputs, function(idx, input) {\r\n                    if (input.getAttribute(\"type\") === \"file\") {\r\n                        fileInput = input;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                if (fileInput) {\r\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n            }\r\n        },\r\n\r\n        _getNotFinished: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED,\r\n                    qq.status.SUBMITTING,\r\n                    qq.status.SUBMITTED,\r\n                    qq.status.PAUSED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        // Get the validation options for this button.  Could be the default validation option\r\n        // or a specific one assigned to this particular button.\r\n        _getValidationBase: function(buttonId) {\r\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\r\n        },\r\n\r\n        _getValidationDescriptor: function(fileWrapper) {\r\n            if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                return {\r\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\r\n                    size: fileWrapper.file.referenceBlob.size\r\n                };\r\n            }\r\n\r\n            return {\r\n                name: this.getUploads({id: fileWrapper.id}).name,\r\n                size: this.getUploads({id: fileWrapper.id}).size\r\n            };\r\n        },\r\n\r\n        _getValidationDescriptors: function(fileWrappers) {\r\n            var self = this,\r\n                fileDescriptors = [];\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\r\n            });\r\n\r\n            return fileDescriptors;\r\n        },\r\n\r\n        // Allows camera access on either the default or an extra button for iOS devices.\r\n        _handleCameraAccess: function() {\r\n            if (this._options.camera.ios && qq.ios()) {\r\n                var acceptIosCamera = \"image/*;capture=camera\",\r\n                    button = this._options.camera.button,\r\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\r\n                    optionRoot = this._options;\r\n\r\n                // If we are not targeting the default button, it is an \"extra\" button\r\n                if (buttonId && buttonId !== this._defaultButtonId) {\r\n                    optionRoot = this._extraButtonSpecs[buttonId];\r\n                }\r\n\r\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\r\n                optionRoot.multiple = false;\r\n\r\n                // update the options\r\n                if (optionRoot.validation.acceptFiles === null) {\r\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\r\n                }\r\n                else {\r\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\r\n                }\r\n\r\n                // update the already-created button\r\n                qq.each(this._buttons, function(idx, button) {\r\n                    if (button.getButtonId() === buttonId) {\r\n                        button.setMultiple(optionRoot.multiple);\r\n                        button.setAcceptFiles(optionRoot.acceptFiles);\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        _handleCheckedCallback: function(details) {\r\n            var self = this,\r\n                callbackRetVal = details.callback();\r\n\r\n            if (qq.isGenericPromise(callbackRetVal)) {\r\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\r\n                return callbackRetVal.then(\r\n                    function(successParam) {\r\n                        self.log(details.name + \" promise success for \" + details.identifier);\r\n                        details.onSuccess(successParam);\r\n                    },\r\n                    function() {\r\n                        if (details.onFailure) {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                            details.onFailure();\r\n                        }\r\n                        else {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            if (callbackRetVal !== false) {\r\n                details.onSuccess(callbackRetVal);\r\n            }\r\n            else {\r\n                if (details.onFailure) {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\r\n                    details.onFailure();\r\n                }\r\n                else {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\r\n                }\r\n            }\r\n\r\n            return callbackRetVal;\r\n        },\r\n\r\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\r\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\r\n            var self = this,\r\n                uuid = qq.getUniqueId(),\r\n                size = -1,\r\n                name = qq.getFilename(file),\r\n                actualFile = file.blob || file,\r\n                handler = this._customNewFileHandler ?\r\n                    this._customNewFileHandler :\r\n                    qq.bind(self._handleNewFileGeneric, self);\r\n\r\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\r\n                size = actualFile.size;\r\n            }\r\n\r\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\r\n                uploadData: self._uploadData,\r\n                paramsStore: self._paramsStore,\r\n                addFileToHandler: function(id, file) {\r\n                    self._handler.add(id, file);\r\n                    self._netUploadedOrQueued++;\r\n                    self._trackButton(id);\r\n                }\r\n            });\r\n        },\r\n\r\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\r\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\r\n\r\n            this._handler.add(id, file);\r\n            this._trackButton(id);\r\n\r\n            this._netUploadedOrQueued++;\r\n\r\n            fileList.push({id: id, file: file});\r\n        },\r\n\r\n        _handlePasteSuccess: function(blob, extSuppliedName) {\r\n            var extension = blob.type.split(\"/\")[1],\r\n                name = extSuppliedName;\r\n\r\n            /*jshint eqeqeq: true, eqnull: true*/\r\n            if (name == null) {\r\n                name = this._options.paste.defaultName;\r\n            }\r\n\r\n            name += \".\" + extension;\r\n\r\n            this.addFiles({\r\n                name: name,\r\n                blob: blob\r\n            });\r\n        },\r\n\r\n        // Creates an extra button element\r\n        _initExtraButton: function(spec) {\r\n            var button = this._createUploadButton({\r\n                accept: spec.validation.acceptFiles,\r\n                allowedExtensions: spec.validation.allowedExtensions,\r\n                element: spec.element,\r\n                folders: spec.folders,\r\n                multiple: spec.multiple,\r\n                title: spec.fileInputTitle\r\n            });\r\n\r\n            this._extraButtonSpecs[button.getButtonId()] = spec;\r\n        },\r\n\r\n        _initFormSupportAndParams: function() {\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n            );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore = this._createStore(\r\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\r\n                );\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\r\n                }\r\n            }\r\n            else {\r\n                this._paramsStore = this._createStore(this._options.request.params);\r\n            }\r\n        },\r\n\r\n        _isDeletePossible: function() {\r\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (this._options.cors.expected) {\r\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\r\n                    return true;\r\n                }\r\n\r\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _isAllowedExtension: function(allowed, fileName) {\r\n            var valid = false;\r\n\r\n            if (!allowed.length) {\r\n                return true;\r\n            }\r\n\r\n            qq.each(allowed, function(idx, allowedExt) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExt)) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\r\n\r\n                    if (fileName.match(extRegex) != null) {\r\n                        valid = true;\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return valid;\r\n        },\r\n\r\n        /**\r\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\r\n         *\r\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\r\n         * @param maybeNameOrNames names of the items that have failed, if applicable\r\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\r\n         * @private\r\n         */\r\n        _itemError: function(code, maybeNameOrNames, item) {\r\n            var message = this._options.messages[code],\r\n                allowedExtensions = [],\r\n                names = [].concat(maybeNameOrNames),\r\n                name = names[0],\r\n                buttonId = this._getButtonId(item),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                extensionsForMessage, placeholderMatch;\r\n\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExtension)) {\r\n                    allowedExtensions.push(allowedExtension);\r\n                }\r\n            });\r\n\r\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\r\n\r\n            r(\"{file}\", this._options.formatFileName(name));\r\n            r(\"{extensions}\", extensionsForMessage);\r\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\r\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\r\n\r\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\r\n            if (placeholderMatch !== null) {\r\n                qq.each(placeholderMatch, function(idx, placeholder) {\r\n                    r(placeholder, names[idx]);\r\n                });\r\n            }\r\n\r\n            this._options.callbacks.onError(null, name, message, undefined);\r\n\r\n            return message;\r\n        },\r\n\r\n        /**\r\n         * Conditionally orders a manual retry of a failed upload.\r\n         *\r\n         * @param id File ID of the failed upload\r\n         * @param callback Optional callback to invoke if a retry is prudent.\r\n         * In lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if a manual retry will occur\r\n         * @private\r\n         */\r\n        _manualRetry: function(id, callback) {\r\n            if (this._onBeforeManualRetry(id)) {\r\n                this._netUploadedOrQueued++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n\r\n                if (callback) {\r\n                    callback(id);\r\n                }\r\n                else {\r\n                    this._handler.retry(id);\r\n                }\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _maybeAllComplete: function(id, status) {\r\n            var self = this,\r\n                notFinished = this._getNotFinished();\r\n\r\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\r\n                this._succeededSinceLastAllComplete.push(id);\r\n            }\r\n            else if (status === qq.status.UPLOAD_FAILED) {\r\n                this._failedSinceLastAllComplete.push(id);\r\n            }\r\n\r\n            if (notFinished === 0 &&\r\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\r\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\r\n                setTimeout(function() {\r\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _maybeHandleIos8SafariWorkaround: function() {\r\n            var self = this;\r\n\r\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\r\n                setTimeout(function() {\r\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\r\n                }, 0);\r\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\r\n            }\r\n        },\r\n\r\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\r\n            // Assuming no one will actually set the response code to something other than 200\r\n            // and still set 'success' to true...\r\n            if (!response.success) {\r\n                if (xhr && xhr.status !== 200 && !response.error) {\r\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\r\n                }\r\n                else {\r\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\r\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\r\n            var self = this;\r\n\r\n            if (items.length > index) {\r\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\r\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\r\n                    setTimeout(function() {\r\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\r\n                            buttonId = self._getButtonId(items[index].file),\r\n                            button = self._getButton(buttonId);\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onValidate\",\r\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\r\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\r\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\r\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\r\n                        });\r\n                    }, 0);\r\n                }\r\n                else if (!validItem) {\r\n                    for (; index < items.length; index++) {\r\n                        self._fileOrBlobRejected(items[index].id);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\r\n\r\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n        },\r\n\r\n        /**\r\n         * Attempt to automatically retry a failed upload.\r\n         *\r\n         * @param id The file ID of the failed upload\r\n         * @param name The name of the file associated with the failed upload\r\n         * @param responseJSON Response from the server, parsed into a javascript object\r\n         * @param xhr Ajax transport used to send the failed request\r\n         * @param callback Optional callback to be invoked if a retry is prudent.\r\n         * Invoked in lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if an auto-retry will occur\r\n         * @private\r\n         */\r\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\r\n            var self = this;\r\n\r\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\r\n\r\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\r\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\r\n\r\n                self._maybeParseAndSendUploadError.apply(self, arguments);\r\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\r\n                self._onBeforeAutoRetry(id, name);\r\n\r\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n                self._retryTimeouts[id] = setTimeout(function() {\r\n                    self.log(\"Starting retry for \" + name + \"...\");\r\n\r\n                    if (callback) {\r\n                        callback(id);\r\n                    }\r\n                    else {\r\n                        self._handler.retry(id);\r\n                    }\r\n                }, retryWaitPeriod);\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id, name) {\r\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            var itemLimit = this._currentItemLimit,\r\n                fileName;\r\n\r\n            if (this._preventRetries[id]) {\r\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\r\n                return false;\r\n            }\r\n            else if (this._handler.isValid(id)) {\r\n                fileName = this.getName(id);\r\n\r\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\r\n                    return false;\r\n                }\r\n\r\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\r\n                    this._itemError(\"retryFailTooManyItems\");\r\n                    return false;\r\n                }\r\n\r\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._netUploadedOrQueued--;\r\n\r\n            clearTimeout(this._retryTimeouts[id]);\r\n\r\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\r\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\r\n                this._storedIds.splice(storedItemIndex, 1);\r\n            }\r\n\r\n            this._uploadData.setStatus(id, qq.status.CANCELED);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            if (!result.success) {\r\n                this._netUploadedOrQueued--;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\r\n\r\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\r\n                    this._preventRetries[id] = true;\r\n                }\r\n            }\r\n            else {\r\n                if (result.thumbnailUrl) {\r\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\r\n                }\r\n\r\n                this._netUploaded++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\r\n            }\r\n\r\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\r\n\r\n            return result.success ? true : false;\r\n        },\r\n\r\n        _onDelete: function(id) {\r\n            this._uploadData.setStatus(id, qq.status.DELETING);\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n            var name = this.getName(id);\r\n\r\n            if (isError) {\r\n                this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\r\n                this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\r\n\r\n                // For error reporting, we only have access to the response status if this is not\r\n                // an `XDomainRequest`.\r\n                if (xhrOrXdr.withCredentials === undefined) {\r\n                    this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\r\n                }\r\n                else {\r\n                    this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\r\n                }\r\n            }\r\n            else {\r\n                this._netUploadedOrQueued--;\r\n                this._netUploaded--;\r\n                this._handler.expunge(id);\r\n                this._uploadData.setStatus(id, qq.status.DELETED);\r\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\r\n            }\r\n        },\r\n\r\n        _onInputChange: function(input) {\r\n            var fileIndex;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\r\n                    this._annotateWithButtonId(input.files[fileIndex], input);\r\n                }\r\n\r\n                this.addFiles(input.files);\r\n            }\r\n            // Android 2.3.x will fire `onchange` even if no file has been selected\r\n            else if (input.value.length > 0) {\r\n                this.addFiles(input);\r\n            }\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n        },\r\n\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            //nothing to do yet in core uploader\r\n        },\r\n\r\n        _onSubmitCallbackSuccess: function(id, name) {\r\n            this._onSubmit.apply(this, arguments);\r\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\r\n            this._onSubmitted.apply(this, arguments);\r\n\r\n            if (this._options.autoUpload) {\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n                this._uploadFile(id);\r\n            }\r\n            else {\r\n                this._storeForLater(id);\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\r\n            var uuid = this.getUuid(id),\r\n                adjustedOnSuccessCallback;\r\n\r\n            if (onSuccessCallback) {\r\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\r\n            }\r\n\r\n            if (this._isDeletePossible()) {\r\n                this._handleCheckedCallback({\r\n                    name: \"onSubmitDelete\",\r\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\r\n                    onSuccess: adjustedOnSuccessCallback ||\r\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\r\n                    identifier: id\r\n                });\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\r\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitted: function(id) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._options.callbacks.onTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            // nothing to do in the core uploader for now\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\r\n            if (newStatus === qq.status.PAUSED) {\r\n                clearTimeout(this._retryTimeouts[id]);\r\n            }\r\n        },\r\n\r\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\r\n            var self = this;\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                self._fileOrBlobRejected(fileWrapper.id);\r\n            });\r\n        },\r\n\r\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\r\n            var errorMessage,\r\n                itemLimit = this._currentItemLimit,\r\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\r\n\r\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\r\n                if (items.length > 0) {\r\n                    this._handleCheckedCallback({\r\n                        name: \"onValidate\",\r\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\r\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\r\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\r\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\r\n                    });\r\n                }\r\n                else {\r\n                    this._itemError(\"noFilesError\");\r\n                }\r\n            }\r\n            else {\r\n                this._onValidateBatchCallbackFailure(items);\r\n                errorMessage = this._options.messages.tooManyItemsError\r\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\r\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\r\n                this._batchError(errorMessage);\r\n            }\r\n        },\r\n\r\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\r\n            var nextIndex = index + 1;\r\n\r\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\r\n\r\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n        },\r\n\r\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\r\n            var self = this,\r\n                nextIndex = index + 1,\r\n                validationDescriptor = this._getValidationDescriptor(items[index]);\r\n\r\n            this._validateFileOrBlobData(items[index], validationDescriptor)\r\n                .then(\r\n                function() {\r\n                    self._upload(items[index].id, params, endpoint);\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\r\n                },\r\n                function() {\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n                }\r\n            );\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            if (items.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n                return;\r\n            }\r\n\r\n            var validationDescriptors = this._getValidationDescriptors(items),\r\n                buttonId = this._getButtonId(items[0].file),\r\n                button = this._getButton(buttonId);\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onValidateBatch\",\r\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\r\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\r\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\r\n                identifier: \"batch validation\"\r\n            });\r\n        },\r\n\r\n        _preventLeaveInProgress: function() {\r\n            var self = this;\r\n\r\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\r\n                if (self.getInProgress()) {\r\n                    e = e || window.event;\r\n                    // for ie, ff\r\n                    e.returnValue = self._options.messages.onLeave;\r\n                    // for webkit\r\n                    return self._options.messages.onLeave;\r\n                }\r\n            });\r\n        },\r\n\r\n        // Attempts to refresh session data only if the `qq.Session` module exists\r\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\r\n        // callback will be invoked once the refresh is complete.\r\n        _refreshSessionData: function() {\r\n            var self = this,\r\n                options = this._options.session;\r\n\r\n            /* jshint eqnull:true */\r\n            if (qq.Session && this._options.session.endpoint != null) {\r\n                if (!this._session) {\r\n                    qq.extend(options, {cors: this._options.cors});\r\n\r\n                    options.log = qq.bind(this.log, this);\r\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\r\n\r\n                    this._session = new qq.Session(options);\r\n                }\r\n\r\n                setTimeout(function() {\r\n                    self._session.refresh().then(function(response, xhrOrXdr) {\r\n                        self._sessionRequestComplete();\r\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\r\n\r\n                    }, function(response, xhrOrXdr) {\r\n\r\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\r\n                    });\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _sessionRequestComplete: function() {},\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._uploadData.updateSize(id, newSize);\r\n            this._totalProgress && this._totalProgress.onNewSize(id);\r\n        },\r\n\r\n        _shouldAutoRetry: function(id, name, responseJSON) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            /*jshint laxbreak: true */\r\n            if (!this._preventRetries[id]\r\n                && this._options.retry.enableAuto\r\n                && uploadData.status !== qq.status.PAUSED) {\r\n\r\n                if (this._autoRetries[id] === undefined) {\r\n                    this._autoRetries[id] = 0;\r\n                }\r\n\r\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\r\n                    this._autoRetries[id] += 1;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._storedIds.push(id);\r\n        },\r\n\r\n        // Maps a file with the button that was used to select it.\r\n        _trackButton: function(id) {\r\n            var buttonId;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                buttonId = this._handler.getFile(id).qqButtonId;\r\n            }\r\n            else {\r\n                buttonId = this._getButtonId(this._handler.getInput(id));\r\n            }\r\n\r\n            if (buttonId) {\r\n                this._buttonIdsForFileIds[id] = buttonId;\r\n            }\r\n        },\r\n\r\n        _updateFormSupportAndParams: function(formElementOrId) {\r\n            this._options.form.element = formElementOrId;\r\n\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n                );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this.setEndpoint(this._formSupport.newEndpoint);\r\n                }\r\n            }\r\n        },\r\n\r\n        _upload: function(id, params, endpoint) {\r\n            var name = this.getName(id);\r\n\r\n            if (params) {\r\n                this.setParams(params, id);\r\n            }\r\n\r\n            if (endpoint) {\r\n                this.setEndpoint(endpoint, id);\r\n            }\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onSubmit\",\r\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\r\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\r\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\r\n                identifier: id\r\n            });\r\n        },\r\n\r\n        _uploadFile: function(id) {\r\n            if (!this._handler.upload(id)) {\r\n                this._uploadData.setStatus(id, qq.status.QUEUED);\r\n            }\r\n        },\r\n\r\n        _uploadStoredFiles: function() {\r\n            var idToUpload, stillSubmitting,\r\n                self = this;\r\n\r\n            while (this._storedIds.length) {\r\n                idToUpload = this._storedIds.shift();\r\n                this._uploadFile(idToUpload);\r\n            }\r\n\r\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\r\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\r\n            if (stillSubmitting) {\r\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\r\n                setTimeout(function() {\r\n                    self._uploadStoredFiles();\r\n                }, 1000);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs some internal validation checks on an item, defined in the `validation` option.\r\n         *\r\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\r\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\r\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\r\n         * @private\r\n         */\r\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\r\n            var self = this,\r\n                file = (function() {\r\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                        return fileWrapper.file.referenceBlob;\r\n                    }\r\n                    return fileWrapper.file;\r\n                }()),\r\n                name = validationDescriptor.name,\r\n                size = validationDescriptor.size,\r\n                buttonId = this._getButtonId(fileWrapper.file),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                validityChecker = new qq.Promise();\r\n\r\n            validityChecker.then(\r\n                function() {},\r\n                function() {\r\n                    self._fileOrBlobRejected(fileWrapper.id, name);\r\n                });\r\n\r\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\r\n                this._itemError(\"typeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size === 0) {\r\n                this._itemError(\"emptyError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\r\n                this._itemError(\"sizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && size < validationBase.minSizeLimit) {\r\n                this._itemError(\"minSizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\r\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\r\n                    validityChecker.success,\r\n                    function(errorCode) {\r\n                        self._itemError(errorCode + \"ImageError\", name, file);\r\n                        validityChecker.failure();\r\n                    }\r\n                );\r\n            }\r\n            else {\r\n                validityChecker.success();\r\n            }\r\n\r\n            return validityChecker;\r\n        },\r\n\r\n        _wrapCallbacks: function() {\r\n            var self, safeCallback, prop;\r\n\r\n            self = this;\r\n\r\n            safeCallback = function(name, callback, args) {\r\n                var errorMsg;\r\n\r\n                try {\r\n                    return callback.apply(self, args);\r\n                }\r\n                catch (exception) {\r\n                    errorMsg = exception.message || exception.toString();\r\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\r\n                }\r\n            };\r\n\r\n            /* jshint forin: false, loopfunc: true */\r\n            for (prop in this._options.callbacks) {\r\n                (function() {\r\n                    var callbackName, callbackFunc;\r\n                    callbackName = prop;\r\n                    callbackFunc = self._options.callbacks[callbackName];\r\n                    self._options.callbacks[callbackName] = function() {\r\n                        return safeCallback(callbackName, callbackFunc, arguments);\r\n                    };\r\n                }());\r\n            }\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                params: {},\n                paramsInBody: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                }\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: 2000000,\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normaizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\n\n                    if (normaizedResponse.reset) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\n                        upload.cleanup(id, normaizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        handleFailure: function(chunkIdx, id, response, xhr) {\n            var name = options.getName(id);\n\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n            handler.clearCachedChunk(id, chunkIdx);\n\n            var responseToReport = upload.normalizeResponse(response, false),\n                inProgressIdx;\n\n            if (responseToReport.reset) {\n                chunked.reset(id);\n            }\n            else {\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\n                if (inProgressIdx >= 0) {\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                }\n            }\n\n            // We may have aborted all other in-progress chunks for this file due to a failure.\n            // If so, ignore the failures associated with those aborts.\n            if (!handler._getFileState(id).temp.ignoreFailure) {\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                // chunks since they will be explicitly aborted\n                if (concurrentChunkingPossible) {\n                    handler._getFileState(id).temp.ignoreFailure = true;\n\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                        ckXhr.abort();\n                        // Flag the transport, in case we are waiting for some other async operation\n                        // to complete before attempting to upload the chunk\n                        ckXhr._cancelled = true;\n                    });\n\n                    // We must indicate that all aborted chunks are no longer in progress\n                    handler.moveInProgressToRemaining(id);\n\n                    // Free up any connections used by these chunks, but don't allow any\n                    // other files to take up the connections (until we have exhausted all auto-retries)\n                    connectionManager.free(id, true);\n                }\n\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\n                    // is a failure or not.\n                    upload.cleanup(id, responseToReport, xhr);\n                }\n            }\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                resuming = handler._getFileState(id).attemptingResume,\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\n\n            if (handler._getFileState(id).loaded == null) {\n                handler._getFileState(id).loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                if (chunkData.blob.size === 0) {\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\n                }\n                else {\n                    handler.uploadChunk(id, chunkIdx, resuming).then(\n                        // upload chunk success\n                        function success(response, xhr) {\n                            log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                            handler.clearCachedChunk(id, chunkIdx);\n\n                            var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                                responseToReport = upload.normalizeResponse(response, true),\n                                inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                            log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                            chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                            if (inProgressChunkIdx >= 0) {\n                                inProgressChunks.splice(inProgressChunkIdx, 1);\n                            }\n\n                            handler._maybePersistChunkedState(id);\n\n                            if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                                chunked.finalize(id);\n                            }\n                            else if (chunked.hasMoreParts(id)) {\n                                chunked.sendNext(id);\n                            }\n                            else {\n                                log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                            }\n                        },\n\n                        // upload chunk failure\n                        function failure(response, xhr) {\n                            chunked.handleFailure(chunkIdx, id, response, xhr);\n                        }\n                        )\n                        .done(function() {\n                            handler.clearXhr(id, chunkIdx);\n                        });\n                }\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                var alreadyInWaiting = qq.indexOf(connectionManager._waiting, id);\n                var alreadyInOpen = qq.indexOf(connectionManager._open, id);\n                if (alreadyInWaiting === -1 && alreadyInOpen === -1) {\n                    connectionManager._waiting.push(id);\n                }\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            handler._getFileState(id).loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            options.onUpload(id, name);\n\n            if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                chunked.sendNext(id);\n            }\n            else {\n                simple.send(id, name);\n            }\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id);\n\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now()\n                };\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * CryptoJS core components.\n */\nqq.CryptoJS = (function (Math, undefined) {\n    /**\n     * CryptoJS namespace.\n     */\n    var C = {};\n\n    /**\n     * Library namespace.\n     */\n    var C_lib = C.lib = {};\n\n    /**\n     * Base object for prototypal inheritance.\n     */\n    var Base = C_lib.Base = (function () {\n        function F() {}\n\n        return {\n            /**\n             * Creates a new object that inherits from this object.\n             *\n             * @param {Object} overrides Properties to copy into the new object.\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         field: 'value',\n             *\n             *         method: function () {\n             *         }\n             *     });\n             */\n            extend: function (overrides) {\n                // Spawn\n                F.prototype = this;\n                var subtype = new F();\n\n                // Augment\n                if (overrides) {\n                    subtype.mixIn(overrides);\n                }\n\n                // Create default initializer\n                if (!subtype.hasOwnProperty('init')) {\n                    subtype.init = function () {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                }\n\n                // Initializer's prototype is the subtype object\n                subtype.init.prototype = subtype;\n\n                // Reference supertype\n                subtype.$super = this;\n\n                return subtype;\n            },\n\n            /**\n             * Extends this object and runs the init method.\n             * Arguments to create() will be passed to init().\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var instance = MyType.create();\n             */\n            create: function () {\n                var instance = this.extend();\n                instance.init.apply(instance, arguments);\n\n                return instance;\n            },\n\n            /**\n             * Initializes a newly created object.\n             * Override this method to add some logic when your objects are created.\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         init: function () {\n             *             // ...\n             *         }\n             *     });\n             */\n            init: function () {\n            },\n\n            /**\n             * Copies properties into this object.\n             *\n             * @param {Object} properties The properties to mix in.\n             *\n             * @example\n             *\n             *     MyType.mixIn({\n             *         field: 'value'\n             *     });\n             */\n            mixIn: function (properties) {\n                for (var propertyName in properties) {\n                    if (properties.hasOwnProperty(propertyName)) {\n                        this[propertyName] = properties[propertyName];\n                    }\n                }\n\n                // IE won't copy toString using the loop above\n                if (properties.hasOwnProperty('toString')) {\n                    this.toString = properties.toString;\n                }\n            },\n\n            /**\n             * Creates a copy of this object.\n             *\n             * @return {Object} The clone.\n             *\n             * @example\n             *\n             *     var clone = instance.clone();\n             */\n            clone: function () {\n                return this.init.prototype.extend(this);\n            }\n        };\n    }());\n\n    /**\n     * An array of 32-bit words.\n     *\n     * @property {Array} words The array of 32-bit words.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var WordArray = C_lib.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of 32-bit words.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.create();\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 4;\n            }\n        },\n\n        /**\n         * Converts this word array to a string.\n         *\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n         *\n         * @return {string} The stringified word array.\n         *\n         * @example\n         *\n         *     var string = wordArray + '';\n         *     var string = wordArray.toString();\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n         */\n        toString: function (encoder) {\n            return (encoder || Hex).stringify(this);\n        },\n\n        /**\n         * Concatenates a word array to this word array.\n         *\n         * @param {WordArray} wordArray The word array to append.\n         *\n         * @return {WordArray} This word array.\n         *\n         * @example\n         *\n         *     wordArray1.concat(wordArray2);\n         */\n        concat: function (wordArray) {\n            // Shortcuts\n            var thisWords = this.words;\n            var thatWords = wordArray.words;\n            var thisSigBytes = this.sigBytes;\n            var thatSigBytes = wordArray.sigBytes;\n\n            // Clamp excess bits\n            this.clamp();\n\n            // Concat\n            if (thisSigBytes % 4) {\n                // Copy one byte at a time\n                for (var i = 0; i < thatSigBytes; i++) {\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n                }\n            } else if (thatWords.length > 0xffff) {\n                // Copy one word at a time\n                for (var i = 0; i < thatSigBytes; i += 4) {\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n                }\n            } else {\n                // Copy all words at once\n                thisWords.push.apply(thisWords, thatWords);\n            }\n            this.sigBytes += thatSigBytes;\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Removes insignificant bits.\n         *\n         * @example\n         *\n         *     wordArray.clamp();\n         */\n        clamp: function () {\n            // Shortcuts\n            var words = this.words;\n            var sigBytes = this.sigBytes;\n\n            // Clamp\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n            words.length = Math.ceil(sigBytes / 4);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = wordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone.words = this.words.slice(0);\n\n            return clone;\n        },\n\n        /**\n         * Creates a word array filled with random bytes.\n         *\n         * @param {number} nBytes The number of random bytes to generate.\n         *\n         * @return {WordArray} The random word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n         */\n        random: function (nBytes) {\n            var words = [];\n            for (var i = 0; i < nBytes; i += 4) {\n                words.push((Math.random() * 0x100000000) | 0);\n            }\n\n            return new WordArray.init(words, nBytes);\n        }\n    });\n\n    /**\n     * Encoder namespace.\n     */\n    var C_enc = C.enc = {};\n\n    /**\n     * Hex encoding strategy.\n     */\n    var Hex = C_enc.Hex = {\n        /**\n         * Converts a word array to a hex string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The hex string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var hexChars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                hexChars.push((bite >>> 4).toString(16));\n                hexChars.push((bite & 0x0f).toString(16));\n            }\n\n            return hexChars.join('');\n        },\n\n        /**\n         * Converts a hex string to a word array.\n         *\n         * @param {string} hexStr The hex string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n         */\n        parse: function (hexStr) {\n            // Shortcut\n            var hexStrLength = hexStr.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < hexStrLength; i += 2) {\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n            }\n\n            return new WordArray.init(words, hexStrLength / 2);\n        }\n    };\n\n    /**\n     * Latin1 encoding strategy.\n     */\n    var Latin1 = C_enc.Latin1 = {\n        /**\n         * Converts a word array to a Latin1 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Latin1 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var latin1Chars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                latin1Chars.push(String.fromCharCode(bite));\n            }\n\n            return latin1Chars.join('');\n        },\n\n        /**\n         * Converts a Latin1 string to a word array.\n         *\n         * @param {string} latin1Str The Latin1 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n         */\n        parse: function (latin1Str) {\n            // Shortcut\n            var latin1StrLength = latin1Str.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < latin1StrLength; i++) {\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n            }\n\n            return new WordArray.init(words, latin1StrLength);\n        }\n    };\n\n    /**\n     * UTF-8 encoding strategy.\n     */\n    var Utf8 = C_enc.Utf8 = {\n        /**\n         * Converts a word array to a UTF-8 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The UTF-8 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            try {\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n            } catch (e) {\n                throw new Error('Malformed UTF-8 data');\n            }\n        },\n\n        /**\n         * Converts a UTF-8 string to a word array.\n         *\n         * @param {string} utf8Str The UTF-8 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n         */\n        parse: function (utf8Str) {\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n        }\n    };\n\n    /**\n     * Abstract buffered block algorithm template.\n     *\n     * The property blockSize must be implemented in a concrete subtype.\n     *\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n        /**\n         * Resets this block algorithm's data buffer to its initial state.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm.reset();\n         */\n        reset: function () {\n            // Initial values\n            this._data = new WordArray.init();\n            this._nDataBytes = 0;\n        },\n\n        /**\n         * Adds new data to this block algorithm's buffer.\n         *\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm._append('data');\n         *     bufferedBlockAlgorithm._append(wordArray);\n         */\n        _append: function (data) {\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof data == 'string') {\n                data = Utf8.parse(data);\n            }\n\n            // Append\n            this._data.concat(data);\n            this._nDataBytes += data.sigBytes;\n        },\n\n        /**\n         * Processes available data blocks.\n         *\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n         *\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n         *\n         * @return {WordArray} The processed data.\n         *\n         * @example\n         *\n         *     var processedData = bufferedBlockAlgorithm._process();\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n         */\n        _process: function (doFlush) {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var dataSigBytes = data.sigBytes;\n            var blockSize = this.blockSize;\n            var blockSizeBytes = blockSize * 4;\n\n            // Count blocks ready\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\n            if (doFlush) {\n                // Round up to include partial blocks\n                nBlocksReady = Math.ceil(nBlocksReady);\n            } else {\n                // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n            }\n\n            // Count words ready\n            var nWordsReady = nBlocksReady * blockSize;\n\n            // Count bytes ready\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n            // Process blocks\n            if (nWordsReady) {\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                    // Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                }\n\n                // Remove processed words\n                var processedWords = dataWords.splice(0, nWordsReady);\n                data.sigBytes -= nBytesReady;\n            }\n\n            // Return processed words\n            return new WordArray.init(processedWords, nBytesReady);\n        },\n\n        /**\n         * Creates a copy of this object.\n         *\n         * @return {Object} The clone.\n         *\n         * @example\n         *\n         *     var clone = bufferedBlockAlgorithm.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone._data = this._data.clone();\n\n            return clone;\n        },\n\n        _minBufferSize: 0\n    });\n\n    /**\n     * Abstract hasher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n     */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n        /**\n         * Configuration options.\n         */\n        cfg: Base.extend(),\n\n        /**\n         * Initializes a newly created hasher.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n         *\n         * @example\n         *\n         *     var hasher = CryptoJS.algo.SHA256.create();\n         */\n        init: function (cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this hasher to its initial state.\n         *\n         * @example\n         *\n         *     hasher.reset();\n         */\n        reset: function () {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-hasher logic\n            this._doReset();\n        },\n\n        /**\n         * Updates this hasher with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {Hasher} This hasher.\n         *\n         * @example\n         *\n         *     hasher.update('message');\n         *     hasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            // Append\n            this._append(messageUpdate);\n\n            // Update the hash\n            this._process();\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the hash computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The hash.\n         *\n         * @example\n         *\n         *     var hash = hasher.finalize();\n         *     var hash = hasher.finalize('message');\n         *     var hash = hasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Final message update\n            if (messageUpdate) {\n                this._append(messageUpdate);\n            }\n\n            // Perform concrete-hasher logic\n            var hash = this._doFinalize();\n\n            return hash;\n        },\n\n        blockSize: 512/32,\n\n        /**\n         * Creates a shortcut function to a hasher's object interface.\n         *\n         * @param {Hasher} hasher The hasher to create a helper for.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n         */\n        _createHelper: function (hasher) {\n            return function (message, cfg) {\n                return new hasher.init(cfg).finalize(message);\n            };\n        },\n\n        /**\n         * Creates a shortcut function to the HMAC's object interface.\n         *\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n         */\n        _createHmacHelper: function (hasher) {\n            return function (message, key) {\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\n            };\n        }\n    });\n\n    /**\n     * Algorithm namespace.\n     */\n    var C_algo = C.algo = {};\n\n    return C;\n}(Math));\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n     * Base64 encoding strategy.\n     */\n    var Base64 = C_enc.Base64 = {\n        /**\n         * Converts a word array to a Base64 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Base64 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n            var map = this._map;\n\n            // Clamp excess bits\n            wordArray.clamp();\n\n            // Convert\n            var base64Chars = [];\n            for (var i = 0; i < sigBytes; i += 3) {\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n                }\n            }\n\n            // Add padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                while (base64Chars.length % 4) {\n                    base64Chars.push(paddingChar);\n                }\n            }\n\n            return base64Chars.join('');\n        },\n\n        /**\n         * Converts a Base64 string to a word array.\n         *\n         * @param {string} base64Str The Base64 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n         */\n        parse: function (base64Str) {\n            // Shortcuts\n            var base64StrLength = base64Str.length;\n            var map = this._map;\n\n            // Ignore padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                var paddingIndex = base64Str.indexOf(paddingChar);\n                if (paddingIndex != -1) {\n                    base64StrLength = paddingIndex;\n                }\n            }\n\n            // Convert\n            var words = [];\n            var nBytes = 0;\n            for (var i = 0; i < base64StrLength; i++) {\n                if (i % 4) {\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n                    nBytes++;\n                }\n            }\n\n            return WordArray.create(words, nBytes);\n        },\n\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n     * HMAC algorithm.\n     */\n    var HMAC = C_algo.HMAC = Base.extend({\n        /**\n         * Initializes a newly created HMAC.\n         *\n         * @param {Hasher} hasher The hash algorithm to use.\n         * @param {WordArray|string} key The secret key.\n         *\n         * @example\n         *\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n         */\n        init: function (hasher, key) {\n            // Init hasher\n            hasher = this._hasher = new hasher.init();\n\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof key == 'string') {\n                key = Utf8.parse(key);\n            }\n\n            // Shortcuts\n            var hasherBlockSize = hasher.blockSize;\n            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n            // Allow arbitrary length keys\n            if (key.sigBytes > hasherBlockSizeBytes) {\n                key = hasher.finalize(key);\n            }\n\n            // Clamp excess bits\n            key.clamp();\n\n            // Clone key for inner and outer pads\n            var oKey = this._oKey = key.clone();\n            var iKey = this._iKey = key.clone();\n\n            // Shortcuts\n            var oKeyWords = oKey.words;\n            var iKeyWords = iKey.words;\n\n            // XOR keys with pad constants\n            for (var i = 0; i < hasherBlockSize; i++) {\n                oKeyWords[i] ^= 0x5c5c5c5c;\n                iKeyWords[i] ^= 0x36363636;\n            }\n            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this HMAC to its initial state.\n         *\n         * @example\n         *\n         *     hmacHasher.reset();\n         */\n        reset: function () {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Reset\n            hasher.reset();\n            hasher.update(this._iKey);\n        },\n\n        /**\n         * Updates this HMAC with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {HMAC} This HMAC instance.\n         *\n         * @example\n         *\n         *     hmacHasher.update('message');\n         *     hmacHasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            this._hasher.update(messageUpdate);\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the HMAC computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The HMAC.\n         *\n         * @example\n         *\n         *     var hmac = hmacHasher.finalize();\n         *     var hmac = hmacHasher.finalize('message');\n         *     var hmac = hmacHasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Compute HMAC\n            var innerHash = hasher.finalize(messageUpdate);\n            hasher.reset();\n            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n            return hmac;\n        }\n    });\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Reusable object\n    var W = [];\n\n    /**\n     * SHA-1 hash algorithm.\n     */\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\n        _doReset: function () {\n            this._hash = new WordArray.init([\n                0x67452301, 0xefcdab89,\n                0x98badcfe, 0x10325476,\n                0xc3d2e1f0\n            ]);\n        },\n\n        _doProcessBlock: function (M, offset) {\n            // Shortcut\n            var H = this._hash.words;\n\n            // Working variables\n            var a = H[0];\n            var b = H[1];\n            var c = H[2];\n            var d = H[3];\n            var e = H[4];\n\n            // Computation\n            for (var i = 0; i < 80; i++) {\n                if (i < 16) {\n                    W[i] = M[offset + i] | 0;\n                } else {\n                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n                    W[i] = (n << 1) | (n >>> 31);\n                }\n\n                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n                if (i < 20) {\n                    t += ((b & c) | (~b & d)) + 0x5a827999;\n                } else if (i < 40) {\n                    t += (b ^ c ^ d) + 0x6ed9eba1;\n                } else if (i < 60) {\n                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n                } else /* if (i < 80) */ {\n                    t += (b ^ c ^ d) - 0x359d3e2a;\n                }\n\n                e = d;\n                d = c;\n                c = (b << 30) | (b >>> 2);\n                b = a;\n                a = t;\n            }\n\n            // Intermediate hash value\n            H[0] = (H[0] + a) | 0;\n            H[1] = (H[1] + b) | 0;\n            H[2] = (H[2] + c) | 0;\n            H[3] = (H[3] + d) | 0;\n            H[4] = (H[4] + e) | 0;\n        },\n\n        _doFinalize: function () {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n\n            var nBitsTotal = this._nDataBytes * 8;\n            var nBitsLeft = data.sigBytes * 8;\n\n            // Add padding\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n            data.sigBytes = dataWords.length * 4;\n\n            // Hash final blocks\n            this._process();\n\n            // Return final computed hash\n            return this._hash;\n        },\n\n        clone: function () {\n            var clone = Hasher.clone.call(this);\n            clone._hash = this._hash.clone();\n\n            return clone;\n        }\n    });\n\n    /**\n     * Shortcut function to the hasher's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hash = CryptoJS.SHA1('message');\n     *     var hash = CryptoJS.SHA1(wordArray);\n     */\n    C.SHA1 = Hasher._createHelper(SHA1);\n\n    /**\n     * Shortcut function to the HMAC's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     * @param {WordArray|string} key The secret key.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hmac = CryptoJS.HmacSHA1(message, key);\n     */\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n}());\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function (Math) {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var Hasher = C_lib.Hasher;\r\n    var C_algo = C.algo;\r\n\r\n    // Initialization and round constants tables\r\n    var H = [];\r\n    var K = [];\r\n\r\n    // Compute constants\r\n    (function () {\r\n        function isPrime(n) {\r\n            var sqrtN = Math.sqrt(n);\r\n            for (var factor = 2; factor <= sqrtN; factor++) {\r\n                if (!(n % factor)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function getFractionalBits(n) {\r\n            return ((n - (n | 0)) * 0x100000000) | 0;\r\n        }\r\n\r\n        var n = 2;\r\n        var nPrime = 0;\r\n        while (nPrime < 64) {\r\n            if (isPrime(n)) {\r\n                if (nPrime < 8) {\r\n                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\r\n                }\r\n                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\r\n\r\n                nPrime++;\r\n            }\r\n\r\n            n++;\r\n        }\r\n    }());\r\n\r\n    // Reusable object\r\n    var W = [];\r\n\r\n    /**\r\n     * SHA-256 hash algorithm.\r\n     */\r\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\r\n        _doReset: function () {\r\n            this._hash = new WordArray.init(H.slice(0));\r\n        },\r\n\r\n        _doProcessBlock: function (M, offset) {\r\n            // Shortcut\r\n            var H = this._hash.words;\r\n\r\n            // Working variables\r\n            var a = H[0];\r\n            var b = H[1];\r\n            var c = H[2];\r\n            var d = H[3];\r\n            var e = H[4];\r\n            var f = H[5];\r\n            var g = H[6];\r\n            var h = H[7];\r\n\r\n            // Computation\r\n            for (var i = 0; i < 64; i++) {\r\n                if (i < 16) {\r\n                    W[i] = M[offset + i] | 0;\r\n                } else {\r\n                    var gamma0x = W[i - 15];\r\n                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\r\n                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\r\n                                   (gamma0x >>> 3);\r\n\r\n                    var gamma1x = W[i - 2];\r\n                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\r\n                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\r\n                                   (gamma1x >>> 10);\r\n\r\n                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\r\n                }\r\n\r\n                var ch  = (e & f) ^ (~e & g);\r\n                var maj = (a & b) ^ (a & c) ^ (b & c);\r\n\r\n                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\r\n                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\r\n\r\n                var t1 = h + sigma1 + ch + K[i] + W[i];\r\n                var t2 = sigma0 + maj;\r\n\r\n                h = g;\r\n                g = f;\r\n                f = e;\r\n                e = (d + t1) | 0;\r\n                d = c;\r\n                c = b;\r\n                b = a;\r\n                a = (t1 + t2) | 0;\r\n            }\r\n\r\n            // Intermediate hash value\r\n            H[0] = (H[0] + a) | 0;\r\n            H[1] = (H[1] + b) | 0;\r\n            H[2] = (H[2] + c) | 0;\r\n            H[3] = (H[3] + d) | 0;\r\n            H[4] = (H[4] + e) | 0;\r\n            H[5] = (H[5] + f) | 0;\r\n            H[6] = (H[6] + g) | 0;\r\n            H[7] = (H[7] + h) | 0;\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n\r\n            var nBitsTotal = this._nDataBytes * 8;\r\n            var nBitsLeft = data.sigBytes * 8;\r\n\r\n            // Add padding\r\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n            data.sigBytes = dataWords.length * 4;\r\n\r\n            // Hash final blocks\r\n            this._process();\r\n\r\n            // Return final computed hash\r\n            return this._hash;\r\n        },\r\n\r\n        clone: function () {\r\n            var clone = Hasher.clone.call(this);\r\n            clone._hash = this._hash.clone();\r\n\r\n            return clone;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Shortcut function to the hasher's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = CryptoJS.SHA256('message');\r\n     *     var hash = CryptoJS.SHA256(wordArray);\r\n     */\r\n    C.SHA256 = Hasher._createHelper(SHA256);\r\n\r\n    /**\r\n     * Shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = CryptoJS.HmacSHA256(message, key);\r\n     */\r\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\r\n}(Math));\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Check if typed arrays are supported\r\n    if (typeof ArrayBuffer != 'function') {\r\n        return;\r\n    }\r\n\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n\r\n    // Reference original init\r\n    var superInit = WordArray.init;\r\n\r\n    // Augment WordArray.init to handle typed arrays\r\n    var subInit = WordArray.init = function (typedArray) {\r\n        // Convert buffers to uint8\r\n        if (typedArray instanceof ArrayBuffer) {\r\n            typedArray = new Uint8Array(typedArray);\r\n        }\r\n\r\n        // Convert other array views to uint8\r\n        if (\r\n            typedArray instanceof Int8Array ||\r\n            typedArray instanceof Uint8ClampedArray ||\r\n            typedArray instanceof Int16Array ||\r\n            typedArray instanceof Uint16Array ||\r\n            typedArray instanceof Int32Array ||\r\n            typedArray instanceof Uint32Array ||\r\n            typedArray instanceof Float32Array ||\r\n            typedArray instanceof Float64Array\r\n        ) {\r\n            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\r\n        }\r\n\r\n        // Handle Uint8Array\r\n        if (typedArray instanceof Uint8Array) {\r\n            // Shortcut\r\n            var typedArrayByteLength = typedArray.byteLength;\r\n\r\n            // Extract bytes\r\n            var words = [];\r\n            for (var i = 0; i < typedArrayByteLength; i++) {\r\n                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            // Initialize this word array\r\n            superInit.call(this, words, typedArrayByteLength);\r\n        } else {\r\n            // Else call normal init\r\n            superInit.apply(this, arguments);\r\n        }\r\n    };\r\n\r\n    subInit.prototype = WordArray;\r\n}());\r\n","/*globals qq */\r\nqq.s3 = qq.s3 || {};\r\n\r\nqq.s3.util = qq.s3.util || (function() {\r\n    \"use strict\";\r\n\r\n    return {\r\n        ALGORITHM_PARAM_NAME: \"x-amz-algorithm\",\r\n\r\n        AWS_PARAM_PREFIX: \"x-amz-meta-\",\r\n\r\n        CREDENTIAL_PARAM_NAME: \"x-amz-credential\",\r\n\r\n        DATE_PARAM_NAME: \"x-amz-date\",\r\n\r\n        REDUCED_REDUNDANCY_PARAM_NAME: \"x-amz-storage-class\",\r\n        REDUCED_REDUNDANCY_PARAM_VALUE: \"REDUCED_REDUNDANCY\",\r\n\r\n        SERVER_SIDE_ENCRYPTION_PARAM_NAME: \"x-amz-server-side-encryption\",\r\n        SERVER_SIDE_ENCRYPTION_PARAM_VALUE: \"AES256\",\r\n\r\n        SESSION_TOKEN_PARAM_NAME: \"x-amz-security-token\",\r\n\r\n        V4_ALGORITHM_PARAM_VALUE: \"AWS4-HMAC-SHA256\",\r\n\r\n        V4_SIGNATURE_PARAM_NAME: \"x-amz-signature\",\r\n\r\n        CASE_SENSITIVE_PARAM_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\"\r\n        ],\r\n\r\n        UNSIGNABLE_REST_HEADER_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\"\r\n        ],\r\n\r\n        UNPREFIXED_PARAM_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\",\r\n            \"x-amz-server-side-encryption-customer-algorithm\",\r\n            \"x-amz-server-side-encryption-customer-key\",\r\n            \"x-amz-server-side-encryption-customer-key-MD5\"\r\n        ],\r\n\r\n        /**\r\n         * This allows for the region to be specified in the bucket's endpoint URL, or not.\r\n         *\r\n         * Examples of some valid endpoints are:\r\n         *     http://foo.s3.amazonaws.com\r\n         *     https://foo.s3.amazonaws.com\r\n         *     http://foo.s3-ap-northeast-1.amazonaws.com\r\n         *     foo.s3.amazonaws.com\r\n         *     http://foo.bar.com\r\n         *     http://s3.amazonaws.com/foo.bar.com\r\n         * ...etc\r\n         *\r\n         * @param endpoint The bucket's URL.\r\n         * @returns {String || undefined} The bucket name, or undefined if the URL cannot be parsed.\r\n         */\r\n        getBucket: function(endpoint) {\r\n            var patterns = [\r\n                    //bucket in domain\r\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)\\.s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com/i,\r\n                    //bucket in path\r\n                    /^(?:https?:\\/\\/)?s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com\\/([a-z0-9.\\-_]+)/i,\r\n                    //custom domain\r\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)/i\r\n                ],\r\n                bucket;\r\n\r\n            qq.each(patterns, function(idx, pattern) {\r\n                var match = pattern.exec(endpoint);\r\n\r\n                if (match) {\r\n                    bucket = match[1];\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            return bucket;\r\n        },\r\n\r\n        /** Create Prefixed request headers which are appropriate for S3.\r\n         *\r\n         * If the request header is appropriate for S3 (e.g. Cache-Control) then pass\r\n         * it along without a metadata prefix. For all other request header parameter names,\r\n         * apply qq.s3.util.AWS_PARAM_PREFIX before the name.\r\n         * See: http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html\r\n         */\r\n        _getPrefixedParamName: function(name) {\r\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\r\n                return name;\r\n            }\r\n            return qq.s3.util.AWS_PARAM_PREFIX + name;\r\n        },\r\n\r\n        /**\r\n         * Create a policy document to be signed and sent along with the S3 upload request.\r\n         *\r\n         * @param spec Object with properties use to construct the policy document.\r\n         * @returns {Object} Policy doc.\r\n         */\r\n        getPolicy: function(spec) {\r\n            var policy = {},\r\n                conditions = [],\r\n                bucket = spec.bucket,\r\n                date = spec.date,\r\n                drift = spec.clockDrift,\r\n                key = spec.key,\r\n                accessKey = spec.accessKey,\r\n                acl = spec.acl,\r\n                type = spec.type,\r\n                expectedStatus = spec.expectedStatus,\r\n                sessionToken = spec.sessionToken,\r\n                params = spec.params,\r\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\r\n                minFileSize = spec.minFileSize,\r\n                maxFileSize = spec.maxFileSize,\r\n                reducedRedundancy = spec.reducedRedundancy,\r\n                region = spec.region,\r\n                serverSideEncryption = spec.serverSideEncryption,\r\n                signatureVersion = spec.signatureVersion;\r\n\r\n            policy.expiration = qq.s3.util.getPolicyExpirationDate(date, drift);\r\n\r\n            conditions.push({acl: acl});\r\n            conditions.push({bucket: bucket});\r\n\r\n            if (type) {\r\n                conditions.push({\"Content-Type\": type});\r\n            }\r\n\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            if (expectedStatus) {\r\n                conditions.push({success_action_status: expectedStatus.toString()});\r\n            }\r\n\r\n            if (successRedirectUrl) {\r\n                conditions.push({success_action_redirect: successRedirectUrl});\r\n            }\r\n            // jscs:enable\r\n            if (reducedRedundancy) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\r\n            }\r\n\r\n            if (sessionToken) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\r\n            }\r\n\r\n            if (serverSideEncryption) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\r\n            }\r\n\r\n            if (signatureVersion === 2) {\r\n                conditions.push({key: key});\r\n            }\r\n            else if (signatureVersion === 4) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1].key = key;\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.CREDENTIAL_PARAM_NAME] =\r\n                    qq.s3.util.getV4CredentialsString({date: date, key: accessKey, region: region});\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.DATE_PARAM_NAME] =\r\n                    qq.s3.util.getV4PolicyDate(date, drift);\r\n            }\r\n\r\n            // user metadata\r\n            qq.each(params, function(name, val) {\r\n                var awsParamName = qq.s3.util._getPrefixedParamName(name),\r\n                    param = {};\r\n\r\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\r\n                    param[awsParamName] = val;\r\n                }\r\n                else {\r\n                    param[awsParamName] = encodeURIComponent(val);\r\n                }\r\n\r\n                conditions.push(param);\r\n            });\r\n\r\n            policy.conditions = conditions;\r\n\r\n            qq.s3.util.enforceSizeLimits(policy, minFileSize, maxFileSize);\r\n\r\n            return policy;\r\n        },\r\n\r\n        /**\r\n         * Update a previously constructed policy document with updated credentials.  Currently, this only requires we\r\n         * update the session token.  This is only relevant if requests are being signed client-side.\r\n         *\r\n         * @param policy Live policy document\r\n         * @param newSessionToken Updated session token.\r\n         */\r\n        refreshPolicyCredentials: function(policy, newSessionToken) {\r\n            var sessionTokenFound = false;\r\n\r\n            qq.each(policy.conditions, function(oldCondIdx, oldCondObj) {\r\n                qq.each(oldCondObj, function(oldCondName, oldCondVal) {\r\n                    if (oldCondName === qq.s3.util.SESSION_TOKEN_PARAM_NAME) {\r\n                        oldCondObj[oldCondName] = newSessionToken;\r\n                        sessionTokenFound = true;\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (!sessionTokenFound) {\r\n                policy.conditions.push({});\r\n                policy.conditions[policy.conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = newSessionToken;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generates all parameters to be passed along with the S3 upload request.  This includes invoking a callback\r\n         * that is expected to asynchronously retrieve a signature for the policy document.  Note that the server\r\n         * signing the request should reject a \"tainted\" policy document that includes unexpected values, since it is\r\n         * still possible for a malicious user to tamper with these values during policy document generation,\r\n         * before it is sent to the server for signing.\r\n         *\r\n         * @param spec Object with properties: `params`, `type`, `key`, `accessKey`, `acl`, `expectedStatus`, `successRedirectUrl`,\r\n         * `reducedRedundancy`, `region`, `serverSideEncryption`, `version`, and `log()`, along with any options associated with `qq.s3.util.getPolicy()`.\r\n         * @returns {qq.Promise} Promise that will be fulfilled once all parameters have been determined.\r\n         */\r\n        generateAwsParams: function(spec, signPolicyCallback) {\r\n            var awsParams = {},\r\n                customParams = spec.params,\r\n                promise = new qq.Promise(),\r\n                sessionToken = spec.sessionToken,\r\n                drift = spec.clockDrift,\r\n                type = spec.type,\r\n                key = spec.key,\r\n                accessKey = spec.accessKey,\r\n                acl = spec.acl,\r\n                expectedStatus = spec.expectedStatus,\r\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\r\n                reducedRedundancy = spec.reducedRedundancy,\r\n                region = spec.region,\r\n                serverSideEncryption = spec.serverSideEncryption,\r\n                signatureVersion = spec.signatureVersion,\r\n                now = new Date(),\r\n                log = spec.log,\r\n                policyJson;\r\n\r\n            spec.date = now;\r\n            policyJson = qq.s3.util.getPolicy(spec);\r\n\r\n            awsParams.key = key;\r\n\r\n            if (type) {\r\n                awsParams[\"Content-Type\"] = type;\r\n            }\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            if (expectedStatus) {\r\n                awsParams.success_action_status = expectedStatus;\r\n            }\r\n\r\n            if (successRedirectUrl) {\r\n                awsParams.success_action_redirect = successRedirectUrl;\r\n            }\r\n            // jscs:enable\r\n            if (reducedRedundancy) {\r\n                awsParams[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\r\n            }\r\n\r\n            if (serverSideEncryption) {\r\n                awsParams[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\r\n            }\r\n\r\n            if (sessionToken) {\r\n                awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\r\n            }\r\n\r\n            awsParams.acl = acl;\r\n\r\n            // Custom (user-supplied) params must be prefixed with the value of `qq.s3.util.AWS_PARAM_PREFIX`.\r\n            // Params such as Cache-Control or Content-Disposition will not be prefixed.\r\n            // Prefixed param values will be URI encoded as well.\r\n            qq.each(customParams, function(name, val) {\r\n                var awsParamName = qq.s3.util._getPrefixedParamName(name);\r\n\r\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\r\n                    awsParams[awsParamName] = val;\r\n                }\r\n                else {\r\n                    awsParams[awsParamName] = encodeURIComponent(val);\r\n                }\r\n            });\r\n\r\n            if (signatureVersion === 2) {\r\n                awsParams.AWSAccessKeyId = accessKey;\r\n            }\r\n            else if (signatureVersion === 4) {\r\n                awsParams[qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\r\n                awsParams[qq.s3.util.CREDENTIAL_PARAM_NAME] = qq.s3.util.getV4CredentialsString({date: now, key: accessKey, region: region});\r\n                awsParams[qq.s3.util.DATE_PARAM_NAME] = qq.s3.util.getV4PolicyDate(now, drift);\r\n            }\r\n\r\n            // Invoke a promissory callback that should provide us with a base64-encoded policy doc and an\r\n            // HMAC signature for the policy doc.\r\n            signPolicyCallback(policyJson).then(\r\n                function(policyAndSignature, updatedAccessKey, updatedSessionToken) {\r\n                    awsParams.policy = policyAndSignature.policy;\r\n\r\n                    if (spec.signatureVersion === 2) {\r\n                        awsParams.signature = policyAndSignature.signature;\r\n\r\n                        if (updatedAccessKey) {\r\n                            awsParams.AWSAccessKeyId = updatedAccessKey;\r\n                        }\r\n                    }\r\n                    else if (spec.signatureVersion === 4) {\r\n                        awsParams[qq.s3.util.V4_SIGNATURE_PARAM_NAME] = policyAndSignature.signature;\r\n                    }\r\n\r\n                    if (updatedSessionToken) {\r\n                        awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\r\n                    }\r\n\r\n                    promise.success(awsParams);\r\n                },\r\n                function(errorMessage) {\r\n                    errorMessage = errorMessage || \"Can't continue further with request to S3 as we did not receive \" +\r\n                                                   \"a valid signature and policy from the server.\";\r\n\r\n                    log(\"Policy signing failed.  \" + errorMessage, \"error\");\r\n                    promise.failure(errorMessage);\r\n                }\r\n            );\r\n\r\n            return promise;\r\n        },\r\n\r\n        /**\r\n         * Add a condition to an existing S3 upload request policy document used to ensure AWS enforces any size\r\n         * restrictions placed on files server-side.  This is important to do, in case users mess with the client-side\r\n         * checks already in place.\r\n         *\r\n         * @param policy Policy document as an `Object`, with a `conditions` property already attached\r\n         * @param minSize Minimum acceptable size, in bytes\r\n         * @param maxSize Maximum acceptable size, in bytes (0 = unlimited)\r\n         */\r\n        enforceSizeLimits: function(policy, minSize, maxSize) {\r\n            var adjustedMinSize = minSize < 0 ? 0 : minSize,\r\n                // Adjust a maxSize of 0 to the largest possible integer, since we must specify a high and a low in the request\r\n                adjustedMaxSize = maxSize <= 0 ? 9007199254740992 : maxSize;\r\n\r\n            if (minSize > 0 || maxSize > 0) {\r\n                policy.conditions.push([\"content-length-range\", adjustedMinSize.toString(), adjustedMaxSize.toString()]);\r\n            }\r\n        },\r\n\r\n        getPolicyExpirationDate: function(date, drift) {\r\n            var adjustedDate = new Date(date.getTime() + drift);\r\n            return qq.s3.util.getPolicyDate(adjustedDate, 5);\r\n        },\r\n\r\n        getCredentialsDate: function(date) {\r\n            if (!date) {\r\n                date = new Date();\r\n            }\r\n            return date.getUTCFullYear() + \"\" +\r\n                (\"0\" + (date.getUTCMonth() + 1)).slice(-2) +\r\n                (\"0\" + date.getUTCDate()).slice(-2);\r\n        },\r\n\r\n        getPolicyDate: function(date, _minutesToAdd_) {\r\n            var minutesToAdd = _minutesToAdd_ || 0,\r\n                pad, r;\r\n\r\n            /*jshint -W014 */\r\n            // Is this going to be a problem if we encounter this moments before 2 AM just before daylight savings time ends?\r\n            date.setMinutes(date.getMinutes() + (minutesToAdd || 0));\r\n\r\n            if (Date.prototype.toISOString) {\r\n                return date.toISOString();\r\n            }\r\n            else {\r\n                pad = function(number) {\r\n                    r = String(number);\r\n\r\n                    if (r.length === 1) {\r\n                        r = \"0\" + r;\r\n                    }\r\n\r\n                    return r;\r\n                };\r\n\r\n                return date.getUTCFullYear()\r\n                    + \"-\" + pad(date.getUTCMonth() + 1)\r\n                    + \"-\" + pad(date.getUTCDate())\r\n                    + \"T\" + pad(date.getUTCHours())\r\n                    + \":\" + pad(date.getUTCMinutes())\r\n                    + \":\" + pad(date.getUTCSeconds())\r\n                    + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\r\n                    + \"Z\";\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Looks at a response from S3 contained in an iframe and parses the query string in an attempt to identify\r\n         * the associated resource.\r\n         *\r\n         * @param iframe Iframe containing response\r\n         * @returns {{bucket: *, key: *, etag: *}}\r\n         */\r\n        parseIframeResponse: function(iframe) {\r\n            var doc = iframe.contentDocument || iframe.contentWindow.document,\r\n                queryString = doc.location.search,\r\n                match = /bucket=(.+)&key=(.+)&etag=(.+)/.exec(queryString);\r\n\r\n            if (match) {\r\n                return {\r\n                    bucket: match[1],\r\n                    key: match[2],\r\n                    etag: match[3].replace(/%22/g, \"\")\r\n                };\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param successRedirectUrl Relative or absolute location of success redirect page\r\n         * @returns {*|string} undefined if the parameter is undefined, otherwise the absolute location of the success redirect page\r\n         */\r\n        getSuccessRedirectAbsoluteUrl: function(successRedirectUrl) {\r\n            if (successRedirectUrl) {\r\n                var targetAnchorContainer = document.createElement(\"div\"),\r\n                    targetAnchor;\r\n\r\n                if (qq.ie7()) {\r\n                    // Note that we must make use of `innerHTML` for IE7 only instead of simply creating an anchor via\r\n                    // `document.createElement('a')` and setting the `href` attribute.  The latter approach does not allow us to\r\n                    // obtain an absolute URL in IE7 if the `endpoint` is a relative URL.\r\n                    targetAnchorContainer.innerHTML = \"<a href='\" + successRedirectUrl + \"'></a>\";\r\n                    targetAnchor = targetAnchorContainer.firstChild;\r\n                    return targetAnchor.href;\r\n                }\r\n                else {\r\n                    // IE8 and IE9 do not seem to derive an absolute URL from a relative URL using the `innerHTML`\r\n                    // approach above, so we'll just create an anchor this way and set it's `href` attribute.\r\n                    // Due to yet another quirk in IE8 and IE9, we have to set the `href` equal to itself\r\n                    // in order to ensure relative URLs will be properly parsed.\r\n                    targetAnchor = document.createElement(\"a\");\r\n                    targetAnchor.href = successRedirectUrl;\r\n                    targetAnchor.href = targetAnchor.href;\r\n                    return targetAnchor.href;\r\n                }\r\n            }\r\n        },\r\n\r\n        getV4CredentialsString: function(spec) {\r\n            return spec.key + \"/\" +\r\n                qq.s3.util.getCredentialsDate(spec.date) + \"/\" +\r\n                spec.region + \"/s3/aws4_request\";\r\n        },\r\n\r\n        getV4PolicyDate: function(date, drift) {\r\n            var adjustedDate = new Date(date.getTime() + drift);\r\n\r\n            return qq.s3.util.getCredentialsDate(adjustedDate) + \"T\" +\r\n                    (\"0\" + adjustedDate.getUTCHours()).slice(-2) +\r\n                    (\"0\" + adjustedDate.getUTCMinutes()).slice(-2) +\r\n                    (\"0\" + adjustedDate.getUTCSeconds()).slice(-2) +\r\n                    \"Z\";\r\n        },\r\n\r\n        // AWS employs a strict interpretation of [RFC 3986](http://tools.ietf.org/html/rfc3986#page-12).\r\n        // So, we must ensure all reserved characters listed in the spec are percent-encoded,\r\n        // and spaces are replaced with \"+\".\r\n        encodeQueryStringParam: function(param) {\r\n            var percentEncoded = encodeURIComponent(param);\r\n\r\n            // %-encode characters not handled by `encodeURIComponent` (to follow RFC 3986)\r\n            percentEncoded = percentEncoded.replace(/[!'()]/g, escape);\r\n\r\n            // %-encode characters not handled by `escape` (to follow RFC 3986)\r\n            percentEncoded = percentEncoded.replace(/\\*/g, \"%2A\");\r\n\r\n            // replace percent-encoded spaces with a \"+\"\r\n            return percentEncoded.replace(/%20/g, \"+\");\r\n        },\r\n        /**\r\n         * Escapes url part as for AWS requirements\r\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\r\n         */\r\n        uriEscape: function(string) {\r\n            var output = encodeURIComponent(string);\r\n            output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);\r\n            output = output.replace(/[*]/g, function(ch) {\r\n                return \"%\" + ch.charCodeAt(0).toString(16).toUpperCase();\r\n            });\r\n            return output;\r\n        },\r\n        /**\r\n         * Escapes a path as for AWS requirement\r\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\r\n         */\r\n        uriEscapePath: function(path) {\r\n            var parts = [];\r\n            qq.each(path.split(\"/\"), function(idx, item) {\r\n                parts.push(qq.s3.util.uriEscape(item));\r\n            });\r\n            return parts.join(\"/\");\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to S3.\n * Some inherited options and API methods have a special meaning in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploaderBasic = function(o) {\n        var options = {\n            request: {\n                // public key (required for server-side signing, ignored if `credentials` have been provided)\n                accessKey: null,\n\n                // padding, in milliseconds, to add to the x-amz-date header & the policy expiration date\n                clockDrift: 0\n            },\n\n            objectProperties: {\n                acl: \"private\",\n\n                // string or a function which may be promissory\n                bucket: qq.bind(function(id) {\n                    return qq.s3.util.getBucket(this.getEndpoint(id));\n                }, this),\n\n                // string or a function which may be promissory - only used for V4 multipart uploads\n                host: qq.bind(function(id) {\n                    return (/(?:http|https):\\/\\/(.+)(?:\\/.+)?/).exec(this._endpointStore.get(id))[1];\n                }, this),\n\n                // 'uuid', 'filename', or a function which may be promissory\n                key: \"uuid\",\n\n                reducedRedundancy: false,\n\n                // Defined at http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\n                region: \"us-east-1\",\n\n                serverSideEncryption: false\n            },\n\n            credentials: {\n                // Public key (required).\n                accessKey: null,\n                // Private key (required).\n                secretKey: null,\n                // Expiration date for the credentials (required).  May be an ISO string or a `Date`.\n                expiration: null,\n                // Temporary credentials session token.\n                // Only required for temporary credentials obtained via AssumeRoleWithWebIdentity.\n                sessionToken: null\n            },\n\n            // All but `version` are ignored if `credentials` is provided.\n            signature: {\n                customHeaders: {},\n                endpoint: null,\n                version: 2\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            // required if non-File-API browsers, such as IE9 and older, are used\n            iframeSupport: {\n                localBlankPagePath: null\n            },\n\n            chunking: {\n                // minimum part size is 5 MiB when uploading to S3\n                partSize: 5242880\n            },\n\n            cors: {\n                allowXdr: true\n            },\n\n            callbacks: {\n                onCredentialsExpired: function() {}\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        if (!this.setCredentials(options.credentials, true)) {\n            this._currentCredentials.accessKey = options.request.accessKey;\n        }\n\n        this._aclStore = this._createStore(options.objectProperties.acl);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds S3 keys for file representations constructed from a session request.\n        this._cannedKeys = {};\n        // Holds S3 buckets for file representations constructed from a session request.\n        this._cannedBuckets = {};\n\n        this._buckets = {};\n        this._hosts = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, {\n        getBucket: function(id) {\n            if (this._cannedBuckets[id] == null) {\n                return this._buckets[id];\n            }\n            return this._cannedBuckets[id];\n        },\n\n        /**\n         * @param id File ID\n         * @returns {*} Key name associated w/ the file, if one exists\n         */\n        getKey: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedKeys[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n\n            return this._cannedKeys[id];\n        },\n\n        /**\n         * Override the parent's reset function to cleanup various S3-related items.\n         */\n        reset: function() {\n            qq.FineUploaderBasic.prototype.reset.call(this);\n            this._failedSuccessRequestCallbacks = [];\n            this._buckets = {};\n            this._hosts = {};\n        },\n\n        setCredentials: function(credentials, ignoreEmpty) {\n            if (credentials && credentials.secretKey) {\n                if (!credentials.accessKey) {\n                    throw new qq.Error(\"Invalid credentials: no accessKey\");\n                }\n                else if (!credentials.expiration) {\n                    throw new qq.Error(\"Invalid credentials: no expiration\");\n                }\n                else {\n                    this._currentCredentials = qq.extend({}, credentials);\n\n                    // Ensure expiration is a `Date`.  If initially a string, assuming it is in ISO format.\n                    if (qq.isString(credentials.expiration)) {\n                        this._currentCredentials.expiration = new Date(credentials.expiration);\n                    }\n                }\n\n                return true;\n            }\n            else if (!ignoreEmpty) {\n                throw new qq.Error(\"Invalid credentials parameter!\");\n            }\n            else {\n                this._currentCredentials = {};\n            }\n        },\n\n        setAcl: function(acl, id) {\n            this._aclStore.set(acl, id);\n        },\n\n        /**\n         * Ensures the parent's upload handler creator passes any additional S3-specific options to the handler as well\n         * as information required to instantiate the specific handler based on the current browser's capabilities.\n         *\n         * @returns {qq.UploadHandlerController}\n         * @private\n         */\n        _createUploadHandler: function() {\n            var self = this,\n                additionalOptions = {\n                    aclStore: this._aclStore,\n                    getBucket: qq.bind(this._determineBucket, this),\n                    getHost: qq.bind(this._determineHost, this),\n                    getKeyName: qq.bind(this._determineKeyName, this),\n                    iframeSupport: this._options.iframeSupport,\n                    objectProperties: this._options.objectProperties,\n                    signature: this._options.signature,\n                    clockDrift: this._options.request.clockDrift,\n                    // pass size limit validation values to include in the request so AWS enforces this server-side\n                    validation: {\n                        minSizeLimit: this._options.validation.minSizeLimit,\n                        maxSizeLimit: this._options.validation.sizeLimit\n                    }\n                };\n\n            // We assume HTTP if it is missing from the start of the endpoint string.\n            qq.override(this._endpointStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var endpoint = super_.get(id);\n\n                        if (endpoint.indexOf(\"http\") < 0) {\n                            return \"http://\" + endpoint;\n                        }\n\n                        return endpoint;\n                    }\n                };\n            });\n\n            // Some param names should be lower case to avoid signature mismatches\n            qq.override(this._paramsStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var oldParams = super_.get(id),\n                            modifiedParams = {};\n\n                        qq.each(oldParams, function(name, val) {\n                            var paramName = name;\n\n                            if (qq.indexOf(qq.s3.util.CASE_SENSITIVE_PARAM_NAMES, paramName) < 0) {\n                                paramName = paramName.toLowerCase();\n                            }\n\n                            modifiedParams[paramName] = qq.isFunction(val) ? val() : val;\n                        });\n\n                        return modifiedParams;\n                    }\n                };\n            });\n\n            additionalOptions.signature.credentialsProvider = {\n                get: function() {\n                    return self._currentCredentials;\n                },\n\n                onExpired: function() {\n                    var updateCredentials = new qq.Promise(),\n                        callbackRetVal = self._options.callbacks.onCredentialsExpired();\n\n                    if (qq.isGenericPromise(callbackRetVal)) {\n                        callbackRetVal.then(function(credentials) {\n                            try {\n                                self.setCredentials(credentials);\n                                updateCredentials.success();\n                            }\n                            catch (error) {\n                                self.log(\"Invalid credentials returned from onCredentialsExpired callback! (\" + error.message + \")\", \"error\");\n                                updateCredentials.failure(\"onCredentialsExpired did not return valid credentials.\");\n                            }\n                        }, function(errorMsg) {\n                            self.log(\"onCredentialsExpired callback indicated failure! (\" + errorMsg + \")\", \"error\");\n                            updateCredentials.failure(\"onCredentialsExpired callback failed.\");\n                        });\n                    }\n                    else {\n                        self.log(\"onCredentialsExpired callback did not return a promise!\", \"error\");\n                        updateCredentials.failure(\"Unexpected return value for onCredentialsExpired.\");\n                    }\n\n                    return updateCredentials;\n                }\n            };\n\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this, additionalOptions, \"s3\");\n        },\n\n        _determineObjectPropertyValue: function(id, property) {\n            var maybe = this._options.objectProperties[property],\n                promise = new qq.Promise(),\n                self = this;\n\n            if (qq.isFunction(maybe)) {\n                maybe = maybe(id);\n                if (qq.isGenericPromise(maybe)) {\n                    promise = maybe;\n                }\n                else {\n                    promise.success(maybe);\n                }\n            }\n            else if (qq.isString(maybe)) {\n                promise.success(maybe);\n            }\n\n            promise.then(\n                function success(value) {\n                    self[\"_\" + property + \"s\"][id] = value;\n                },\n\n                function failure(errorMsg) {\n                    qq.log(\"Problem determining \" + property + \" for ID \" + id + \" (\" + errorMsg + \")\", \"error\");\n                }\n            );\n\n            return promise;\n        },\n\n        _determineBucket: function(id) {\n            return this._determineObjectPropertyValue(id, \"bucket\");\n        },\n\n        _determineHost: function(id) {\n            return this._determineObjectPropertyValue(id, \"host\");\n        },\n\n        /**\n         * Determine the file's key name and passes it to the caller via a promissory callback.  This also may\n         * delegate to an integrator-defined function that determines the file's key name on demand,\n         * which also may be promissory.\n         *\n         * @param id ID of the file\n         * @param filename Name of the file\n         * @returns {qq.Promise} A promise that will be fulfilled when the key name has been determined (and will be passed to the caller via the success callback).\n         * @private\n         */\n        _determineKeyName: function(id, filename) {\n            /*jshint -W015*/\n            var promise = new qq.Promise(),\n                keynameLogic = this._options.objectProperties.key,\n                extension = qq.getExtension(filename),\n                onGetKeynameFailure = promise.failure,\n                onGetKeynameSuccess = function(keyname, extension) {\n                    var keynameToUse = keyname;\n\n                    if (extension !== undefined) {\n                        keynameToUse += \".\" + extension;\n                    }\n\n                    promise.success(keynameToUse);\n                };\n\n            switch (keynameLogic) {\n                case \"uuid\":\n                    onGetKeynameSuccess(this.getUuid(id), extension);\n                    break;\n                case \"filename\":\n                    onGetKeynameSuccess(filename);\n                    break;\n                default:\n                    if (qq.isFunction(keynameLogic)) {\n                        this._handleKeynameFunction(keynameLogic, id, onGetKeynameSuccess, onGetKeynameFailure);\n                    }\n                    else {\n                        this.log(keynameLogic + \" is not a valid value for the s3.keyname option!\", \"error\");\n                        onGetKeynameFailure();\n                    }\n            }\n\n            return promise;\n        },\n\n        /**\n         * Called by the internal onUpload handler if the integrator has supplied a function to determine\n         * the file's key name.  The integrator's function may be promissory.  We also need to fulfill\n         * the promise contract associated with the caller as well.\n         *\n         * @param keynameFunc Integrator-supplied function that must be executed to determine the key name.  May be promissory.\n         * @param id ID of the associated file\n         * @param successCallback Invoke this if key name retrieval is successful, passing in the key name.\n         * @param failureCallback Invoke this if key name retrieval was unsuccessful.\n         * @private\n         */\n        _handleKeynameFunction: function(keynameFunc, id, successCallback, failureCallback) {\n            var self = this,\n                onSuccess = function(keyname) {\n                    successCallback(keyname);\n                },\n                onFailure = function(reason) {\n                    self.log(qq.format(\"Failed to retrieve key name for {}.  Reason: {}\", id, reason || \"null\"), \"error\");\n                    failureCallback(reason);\n                },\n                keyname = keynameFunc.call(this, id);\n\n            if (qq.isGenericPromise(keyname)) {\n                keyname.then(onSuccess, onFailure);\n            }\n            /*jshint -W116*/\n            else if (keyname == null) {\n                onFailure();\n            }\n            else {\n                onSuccess(keyname);\n            }\n        },\n\n        _getEndpointSpecificParams: function(id, response, maybeXhr) {\n            var params = {\n                key: this.getKey(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                bucket: this.getBucket(id)\n            };\n\n            if (maybeXhr && maybeXhr.getResponseHeader(\"ETag\")) {\n                params.etag = maybeXhr.getResponseHeader(\"ETag\");\n            }\n            else if (response.etag) {\n                params.etag = response.etag;\n            }\n\n            return params;\n        },\n\n        // Hooks into the base internal `_onSubmitDelete` to add key and bucket params to the delete file request.\n        _onSubmitDelete: function(id, onSuccessCallback) {\n            var additionalMandatedParams = {\n                key: this.getKey(id),\n                bucket: this.getBucket(id)\n            };\n\n            return qq.FineUploaderBasic.prototype._onSubmitDelete.call(this, id, onSuccessCallback, additionalMandatedParams);\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.s3Key == null) {\n                throw new qq.Error(\"Did not find s3Key property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedKeys[id] = sessionData.s3Key;\n                this._cannedBuckets[id] = sessionData.s3Bucket;\n            }\n\n            return id;\n        }\n    });\n}());\n","/* globals qq, CryptoJS */\n\n// IE 10 does not support Uint8ClampedArray. We don't need it, but CryptoJS attempts to reference it\n// inside a conditional via an instanceof check, which breaks S3 v4 signatures for chunked uploads.\nif (!window.Uint8ClampedArray) {\n    window.Uint8ClampedArray = function() {};\n}\n/**\n * Handles signature determination for HTML Form Upload requests and Multipart Uploader requests (via the S3 REST API).\n *\n * If the S3 requests are to be signed server side, this module will send a POST request to the server in an attempt\n * to solicit signatures for various S3-related requests.  This module also parses the response and attempts\n * to determine if the effort was successful.\n *\n * If the S3 requests are to be signed client-side, without the help of a server, this module will utilize CryptoJS to\n * sign the requests directly in the browser and send them off to S3.\n *\n * @param o Options associated with all such requests\n * @returns {{getSignature: Function}} API method used to initiate the signature request.\n * @constructor\n */\nqq.s3.RequestSigner = function(o) {\n    \"use strict\";\n\n    var requester,\n        thisSignatureRequester = this,\n        pendingSignatures = {},\n        options = {\n            expectingPolicy: false,\n            method: \"POST\",\n            signatureSpec: {\n                drift: 0,\n                credentialsProvider: {},\n                endpoint: null,\n                customHeaders: {},\n                version: 2,\n                useWorker: false\n            },\n            maxConnections: 3,\n            endpointStore: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        },\n        credentialsProvider,\n\n        generateHeaders = function(signatureConstructor, signature, promise) {\n            var headers = signatureConstructor.getHeaders();\n\n            if (options.signatureSpec.version === 4) {\n                headers.Authorization = qq.s3.util.V4_ALGORITHM_PARAM_VALUE +\n                    \" Credential=\" + options.signatureSpec.credentialsProvider.get().accessKey + \"/\" +\n                    qq.s3.util.getCredentialsDate(signatureConstructor.getRequestDate()) + \"/\" +\n                    options.signatureSpec.region + \"/\" +\n                    \"s3/aws4_request,\" +\n                    \"SignedHeaders=\" + signatureConstructor.getSignedHeaders() + \",\" +\n                    \"Signature=\" + signature;\n            }\n            else {\n                headers.Authorization = \"AWS \" + options.signatureSpec.credentialsProvider.get().accessKey + \":\" + signature;\n            }\n\n            promise.success(headers, signatureConstructor.getEndOfUrl());\n        },\n\n        v2 = {\n            getStringToSign: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n\\n{}/{}/{}\",\n                    signatureSpec.method,\n                    signatureSpec.contentMd5 || \"\",\n                    signatureSpec.contentType || \"\",\n                    signatureSpec.headersStr || \"\\n\",\n                    signatureSpec.bucket,\n                    signatureSpec.endOfUrl);\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var headersWordArray = qq.CryptoJS.enc.Utf8.parse(headersStr),\n                    headersHmacSha1 = qq.CryptoJS.HmacSHA1(headersWordArray, credentialsProvider.get().secretKey),\n                    headersHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(headersHmacSha1);\n\n                generateHeaders(signatureConstructor, headersHmacSha1Base64, signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    policyHmacSha1 = qq.CryptoJS.HmacSHA1(base64Policy, credentialsProvider.get().secretKey),\n                    policyHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(policyHmacSha1);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: policyHmacSha1Base64\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        },\n\n        v4 = {\n            getCanonicalQueryString: function(endOfUri) {\n                var queryParamIdx = endOfUri.indexOf(\"?\"),\n                    canonicalQueryString = \"\",\n                    encodedQueryParams, encodedQueryParamNames, queryStrings;\n\n                if (queryParamIdx >= 0) {\n                    encodedQueryParams = {};\n                    queryStrings = endOfUri.substr(queryParamIdx + 1).split(\"&\");\n\n                    qq.each(queryStrings, function(idx, queryString) {\n                        var nameAndVal = queryString.split(\"=\"),\n                            paramVal = nameAndVal[1];\n\n                        if (paramVal == null) {\n                            paramVal = \"\";\n                        }\n\n                        encodedQueryParams[encodeURIComponent(nameAndVal[0])] = encodeURIComponent(paramVal);\n                    });\n\n                    encodedQueryParamNames = Object.keys(encodedQueryParams).sort();\n                    encodedQueryParamNames.forEach(function(encodedQueryParamName, idx) {\n                        canonicalQueryString += encodedQueryParamName + \"=\" + encodedQueryParams[encodedQueryParamName];\n                        if (idx < encodedQueryParamNames.length - 1) {\n                            canonicalQueryString += \"&\";\n                        }\n                    });\n                }\n\n                return canonicalQueryString;\n            },\n\n            getCanonicalRequest: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n{}\\n{}\\n{}\",\n                    signatureSpec.method,\n                    v4.getCanonicalUri(signatureSpec.endOfUrl),\n                    v4.getCanonicalQueryString(signatureSpec.endOfUrl),\n                    signatureSpec.headersStr || \"\\n\",\n                    v4.getSignedHeaders(signatureSpec.headerNames),\n                    signatureSpec.hashedContent);\n            },\n\n            getCanonicalUri: function(endOfUri) {\n                var path = endOfUri,\n                    queryParamIdx = endOfUri.indexOf(\"?\");\n\n                if (queryParamIdx > 0) {\n                    path = endOfUri.substr(0, queryParamIdx);\n                }\n                return \"/\" + path;\n            },\n\n            getEncodedHashedPayload: function(body) {\n                var promise = new qq.Promise(),\n                    reader,\n                    self = this;\n\n                if (qq.isBlob(body)) {\n                    // Only if a worker is requested will we load it.\n                    // We will fallback to the inline reader if the worker\n                    // fails to load.\n                    if (options.signatureSpec.useWorker) {\n                        if (!this._worker) {\n                            try {\n                                // allow the worker path to be overwritten.. Eg. we aren't using an inline worker.\n                                var workerUrl = options.signatureSpec.useWorker;\n                                if (workerUrl === true) {\n                                    if (!qq.s3.worker) {\n                                        throw new Error(\"Missing inline s3 worker.\");\n                                    }\n                                    workerUrl = qq.s3.worker();\n                                }\n                                this._worker = new Worker(workerUrl);\n                                this._workerPromises = {};\n                                this._worker.onmessage = function (e) {\n                                    if (!self._workerPromises[e.data.id]) {\n                                        options.log(\"Worker returned a result for an request we dont know about.\");\n                                        return;\n                                    }\n                                    if (e.data.err) {\n                                        self._workerPromises[e.data.id].failure(e.data.err);\n                                    } else {\n                                        self._workerPromises[e.data.id].success(e.data.resp);\n                                    }\n                                    delete self._workerPromises[e.data.id];\n                                };\n                            } catch (ex) {\n                                // worker is not supported or invalid\n                                options.log(\"Worker failed to be created. Defaulting back to main thread processing.\", ex);\n                                options.signatureSpec.useWorker = false;\n                            }\n                        }\n                        if (this._worker) {\n                            var task = {file: body, id: qq.getUniqueId()};\n                            this._workerPromises[task.id] = promise;\n                            this._worker.postMessage(task);\n                            return promise;\n                        }\n                    }\n                    reader = new FileReader();\n                    reader.onloadend = function(e) {\n                        if (e.target.readyState === FileReader.DONE) {\n                            if (e.target.error) {\n                                promise.failure(e.target.error);\n                            }\n                            else {\n                                var wordArray = qq.CryptoJS.lib.WordArray.create(e.target.result);\n                                promise.success(qq.CryptoJS.SHA256(wordArray).toString());\n                            }\n                        }\n                    };\n                    reader.readAsArrayBuffer(body);\n                }\n                else {\n                    body = body || \"\";\n                    promise.success(qq.CryptoJS.SHA256(body).toString());\n                }\n\n                return promise;\n            },\n\n            getScope: function(date, region) {\n                return qq.s3.util.getCredentialsDate(date) + \"/\" +\n                    region + \"/s3/aws4_request\";\n            },\n\n            getStringToSign: function(signatureSpec) {\n                var canonicalRequest = v4.getCanonicalRequest(signatureSpec),\n                    date = qq.s3.util.getV4PolicyDate(signatureSpec.date, signatureSpec.drift),\n                    hashedRequest = qq.CryptoJS.SHA256(canonicalRequest).toString(),\n                    scope = v4.getScope(signatureSpec.date, options.signatureSpec.region),\n                    stringToSignTemplate = \"AWS4-HMAC-SHA256\\n{}\\n{}\\n{}\";\n\n                return {\n                    hashed: qq.format(stringToSignTemplate, date, scope, hashedRequest),\n                    raw: qq.format(stringToSignTemplate, date, scope, canonicalRequest)\n                };\n            },\n\n            getSignedHeaders: function(headerNames) {\n                var signedHeaders = \"\";\n\n                headerNames.forEach(function(headerName, idx) {\n                    signedHeaders += headerName.toLowerCase();\n\n                    if (idx < headerNames.length - 1) {\n                        signedHeaders += \";\";\n                    }\n                });\n\n                return signedHeaders;\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var secretKey = credentialsProvider.get().secretKey,\n                    headersPattern = /.+\\n.+\\n(\\d+)\\/(.+)\\/s3\\/.+\\n(.+)/,\n                    matches = headersPattern.exec(headersStr),\n                    dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                generateHeaders(signatureConstructor, qq.CryptoJS.HmacSHA256(headersStr, signingKey), signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    secretKey = credentialsProvider.get().secretKey,\n                    credentialPattern = /.+\\/(.+)\\/(.+)\\/s3\\/aws4_request/,\n                    credentialCondition = (function() {\n                        var credential = null;\n                        qq.each(policy.conditions, function(key, condition) {\n                            var val = condition[\"x-amz-credential\"];\n                            if (val) {\n                                credential = val;\n                                return false;\n                            }\n                        });\n                        return credential;\n                    }()),\n                    matches, dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                matches = credentialPattern.exec(credentialCondition);\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: qq.CryptoJS.HmacSHA256(base64Policy, signingKey).toString()\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        };\n\n    qq.extend(options, o, true);\n    credentialsProvider = options.signatureSpec.credentialsProvider;\n\n    function handleSignatureReceived(id, xhrOrXdr, isError) {\n        var responseJson = xhrOrXdr.responseText,\n            pendingSignatureData = pendingSignatures[id],\n            promise = pendingSignatureData.promise,\n            signatureConstructor = pendingSignatureData.signatureConstructor,\n            errorMessage, response;\n\n        delete pendingSignatures[id];\n\n        // Attempt to parse what we would expect to be a JSON response\n        if (responseJson) {\n            try {\n                response = qq.parseJson(responseJson);\n            }\n            catch (error) {\n                options.log(\"Error attempting to parse signature response: \" + error, \"error\");\n            }\n        }\n\n        // If we have received a parsable response, and it has an `invalid` property,\n        // the policy document or request headers may have been tampered with client-side.\n        if (response && response.invalid) {\n            isError = true;\n            errorMessage = \"Invalid policy document or request headers!\";\n        }\n        // Make sure the response contains policy & signature properties\n        else if (response) {\n            if (options.expectingPolicy && !response.policy) {\n                isError = true;\n                errorMessage = \"Response does not include the base64 encoded policy!\";\n            }\n            else if (!response.signature) {\n                isError = true;\n                errorMessage = \"Response does not include the signature!\";\n            }\n        }\n        // Something unknown went wrong\n        else {\n            isError = true;\n            errorMessage = \"Received an empty or invalid response from the server!\";\n        }\n\n        if (isError) {\n            if (errorMessage) {\n                options.log(errorMessage, \"error\");\n            }\n\n            promise.failure(errorMessage);\n        }\n        else if (signatureConstructor) {\n            generateHeaders(signatureConstructor, response.signature, promise);\n        }\n        else {\n            promise.success(response);\n        }\n    }\n\n    function getStringToSignArtifacts(id, version, requestInfo) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            headerNames = [],\n            headersStr = \"\",\n            now = new Date(),\n            endOfUrl, signatureSpec, toSign,\n\n            generateStringToSign = function(requestInfo) {\n                var contentMd5,\n                    headerIndexesToRemove = [];\n\n                qq.each(requestInfo.headers, function(name) {\n                    headerNames.push(name);\n                });\n                headerNames.sort();\n\n                qq.each(headerNames, function(idx, headerName) {\n                    if (qq.indexOf(qq.s3.util.UNSIGNABLE_REST_HEADER_NAMES, headerName) < 0) {\n                        headersStr += headerName.toLowerCase() + \":\" + requestInfo.headers[headerName].trim() + \"\\n\";\n                    }\n                    else if (headerName === \"Content-MD5\") {\n                        contentMd5 = requestInfo.headers[headerName];\n                    }\n                    else {\n                        headerIndexesToRemove.unshift(idx);\n                    }\n                });\n\n                qq.each(headerIndexesToRemove, function(idx, headerIdx) {\n                    headerNames.splice(headerIdx, 1);\n                });\n\n                signatureSpec = {\n                    bucket: requestInfo.bucket,\n                    contentMd5: contentMd5,\n                    contentType: requestInfo.contentType,\n                    date: now,\n                    drift: options.signatureSpec.drift,\n                    endOfUrl: endOfUrl,\n                    hashedContent: requestInfo.hashedContent,\n                    headerNames: headerNames,\n                    headersStr: headersStr,\n                    method: method\n                };\n\n                toSign = version === 2 ? v2.getStringToSign(signatureSpec) : v4.getStringToSign(signatureSpec);\n\n                return {\n                    date: now,\n                    endOfUrl: endOfUrl,\n                    signedHeaders: version === 4 ? v4.getSignedHeaders(signatureSpec.headerNames) : null,\n                    toSign: version === 4 ? toSign.hashed : toSign,\n                    toSignRaw: version === 4 ? toSign.raw : toSign\n                };\n            };\n\n        /*jshint indent:false */\n        switch (requestInfo.type) {\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_ABORT:\n                method = \"DELETE\";\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_INITIATE:\n                endOfUrl = \"uploads\";\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_COMPLETE:\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_UPLOAD:\n                method = \"PUT\";\n                endOfUrl = qq.format(\"partNumber={}&uploadId={}\", requestInfo.partNum, requestInfo.uploadId);\n                break;\n        }\n\n        endOfUrl = requestInfo.key + \"?\" + endOfUrl;\n\n        if (version === 4) {\n            v4.getEncodedHashedPayload(requestInfo.content).then(function(hashedContent) {\n                requestInfo.headers[\"x-amz-content-sha256\"] = hashedContent;\n                requestInfo.headers.Host = requestInfo.host;\n                requestInfo.headers[\"x-amz-date\"] = qq.s3.util.getV4PolicyDate(now, options.signatureSpec.drift);\n                requestInfo.hashedContent = hashedContent;\n\n                promise.success(generateStringToSign(requestInfo));\n            }, function (err) {\n                promise.failure(err);\n            });\n        }\n        else {\n            promise.success(generateStringToSign(requestInfo));\n        }\n\n        return promise;\n    }\n\n    function determineSignatureClientSide(id, toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        var updatedHeaders;\n\n        // REST API request\n        if (toBeSigned.signatureConstructor) {\n            if (updatedSessionToken) {\n                updatedHeaders = toBeSigned.signatureConstructor.getHeaders();\n                updatedHeaders[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\n                toBeSigned.signatureConstructor.withHeaders(updatedHeaders);\n            }\n\n            toBeSigned.signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                signApiRequest(toBeSigned.signatureConstructor, signatureArtifacts.stringToSign, signatureEffort);\n            }, function (err) {\n                signatureEffort.failure(err);\n            });\n        }\n        // Form upload (w/ policy document)\n        else {\n            updatedSessionToken && qq.s3.util.refreshPolicyCredentials(toBeSigned, updatedSessionToken);\n            signPolicy(toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        if (options.signatureSpec.version === 4) {\n            v4.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n        else {\n            v2.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signApiRequest(signatureConstructor, headersStr, signatureEffort) {\n        if (options.signatureSpec.version === 4) {\n            v4.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n        else {\n            v2.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        contentType: \"application/json; charset=utf-8\",\n        endpointStore: {\n            get: function() {\n                return options.signatureSpec.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.signatureSpec.customHeaders,\n        log: options.log,\n        onComplete: handleSignatureReceived,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * On success, an object containing the parsed JSON response will be passed into the success handler if the\n         * request succeeds.  Otherwise an error message will be passed into the failure method.\n         *\n         * @param id File ID.\n         * @param toBeSigned an Object that holds the item(s) to be signed\n         * @returns {qq.Promise} A promise that is fulfilled when the response has been received.\n         */\n        getSignature: function(id, toBeSigned) {\n            var params = toBeSigned,\n                signatureConstructor = toBeSigned.signatureConstructor,\n                signatureEffort = new qq.Promise(),\n                queryParams;\n\n            if (options.signatureSpec.version === 4) {\n                queryParams = {v4: true};\n            }\n\n            if (credentialsProvider.get().secretKey && qq.CryptoJS) {\n                if (credentialsProvider.get().expiration.getTime() > Date.now()) {\n                    determineSignatureClientSide(id, toBeSigned, signatureEffort);\n                }\n                // If credentials are expired, ask for new ones before attempting to sign request\n                else {\n                    credentialsProvider.onExpired().then(function() {\n                        determineSignatureClientSide(id, toBeSigned,\n                            signatureEffort,\n                            credentialsProvider.get().accessKey,\n                            credentialsProvider.get().sessionToken);\n                    }, function(errorMsg) {\n                        options.log(\"Attempt to update expired credentials apparently failed! Unable to sign request.  \", \"error\");\n                        signatureEffort.failure(\"Unable to sign request - expired credentials.\");\n                    });\n                }\n            }\n            else {\n                options.log(\"Submitting S3 signature request for \" + id);\n\n                if (signatureConstructor) {\n                    signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                        params = {headers: signatureArtifacts.stringToSignRaw};\n                        requester.initTransport(id)\n                            .withParams(params)\n                            .withQueryParams(queryParams)\n                            .send();\n                    }, function (err) {\n                        options.log(\"Failed to construct signature. \", \"error\");\n                        signatureEffort.failure(\"Failed to construct signature.\");\n                    });\n                }\n                else {\n                    requester.initTransport(id)\n                        .withParams(params)\n                        .withQueryParams(queryParams)\n                        .send();\n                }\n\n                pendingSignatures[id] = {\n                    promise: signatureEffort,\n                    signatureConstructor: signatureConstructor\n                };\n            }\n\n            return signatureEffort;\n        },\n\n        constructStringToSign: function(type, bucket, host, key) {\n            var headers = {},\n                uploadId, content, contentType, partNum, artifacts;\n\n            return {\n                withHeaders: function(theHeaders) {\n                    headers = theHeaders;\n                    return this;\n                },\n\n                withUploadId: function(theUploadId) {\n                    uploadId = theUploadId;\n                    return this;\n                },\n\n                withContent: function(theContent) {\n                    content = theContent;\n                    return this;\n                },\n\n                withContentType: function(theContentType) {\n                    contentType = theContentType;\n                    return this;\n                },\n\n                withPartNum: function(thePartNum) {\n                    partNum = thePartNum;\n                    return this;\n                },\n\n                getToSign: function(id) {\n                    var sessionToken = credentialsProvider.get().sessionToken,\n                        promise = new qq.Promise(),\n                        adjustedDate = new Date(Date.now() + options.signatureSpec.drift);\n\n                    headers[\"x-amz-date\"] = adjustedDate.toUTCString();\n\n                    if (sessionToken) {\n                        headers[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n                    }\n\n                    getStringToSignArtifacts(id, options.signatureSpec.version, {\n                        bucket: bucket,\n                        content: content,\n                        contentType: contentType,\n                        headers: headers,\n                        host: host,\n                        key: key,\n                        partNum: partNum,\n                        type: type,\n                        uploadId: uploadId\n                    }).then(function(_artifacts_) {\n                        artifacts = _artifacts_;\n                        promise.success({\n                            headers: (function() {\n                                if (contentType) {\n                                    headers[\"Content-Type\"] = contentType;\n                                }\n\n                                delete headers.Host; // we don't want this to be set on the XHR-initiated request\n                                return headers;\n                            }()),\n                            date: artifacts.date,\n                            endOfUrl: artifacts.endOfUrl,\n                            signedHeaders: artifacts.signedHeaders,\n                            stringToSign: artifacts.toSign,\n                            stringToSignRaw: artifacts.toSignRaw\n                        });\n                    }, function (err) {\n                        promise.failure(err);\n                    });\n\n                    return promise;\n                },\n\n                getHeaders: function() {\n                    return qq.extend({}, headers);\n                },\n\n                getEndOfUrl: function() {\n                    return artifacts && artifacts.endOfUrl;\n                },\n\n                getRequestDate: function() {\n                    return artifacts && artifacts.date;\n                },\n\n                getSignedHeaders: function() {\n                    return artifacts && artifacts.signedHeaders;\n                }\n            };\n        }\n    });\n};\n\nqq.s3.RequestSigner.prototype.REQUEST_TYPE = {\n    MULTIPART_INITIATE: \"multipart_initiate\",\n    MULTIPART_COMPLETE: \"multipart_complete\",\n    MULTIPART_ABORT: \"multipart_abort\",\n    MULTIPART_UPLOAD: \"multipart_upload\"\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Initiate Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadInitiate.html)\n * request to S3 via the REST API.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.s3.InitiateMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingInitiateRequests = {},\n        options = {\n            filenameParam: \"qqfilename\",\n            method: \"POST\",\n            endpointStore: null,\n            paramsStore: null,\n            signatureSpec: null,\n            aclStore: null,\n            reducedRedundancy: false,\n            serverSideEncryption: false,\n            maxConnections: 3,\n            getContentType: function(id) {},\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            getName: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Determine all headers for the \"Initiate MPU\" request, including the \"Authorization\" header, which must be determined\n     * by the local server.  This is a promissory function.  If the server responds with a signature, the headers\n     * (including the Authorization header) will be passed into the success method of the promise.  Otherwise, the failure\n     * method on the promise will be called.\n     *\n     * @param id Associated file ID\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id) {\n        var bucket = options.getBucket(id),\n            host = options.getHost(id),\n            headers = {},\n            promise = new qq.Promise(),\n            key = options.getKey(id),\n            signatureConstructor;\n\n        headers[\"x-amz-acl\"] = options.aclStore.get(id);\n\n        if (options.reducedRedundancy) {\n            headers[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n        }\n\n        if (options.serverSideEncryption) {\n            headers[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n        }\n\n        headers[qq.s3.util.AWS_PARAM_PREFIX + options.filenameParam] = encodeURIComponent(options.getName(id));\n\n        qq.each(options.paramsStore.get(id), function(name, val) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                headers[name] = val;\n            }\n            else {\n                headers[qq.s3.util.AWS_PARAM_PREFIX + name] = encodeURIComponent(val);\n            }\n        });\n\n        signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n            (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_INITIATE, bucket, host, key)\n            .withContentType(options.getContentType(id))\n            .withHeaders(headers);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Initiate MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleInitiateRequestComplete(id, xhr, isError) {\n        var promise = pendingInitiateRequests[id],\n            domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            uploadIdElements, messageElements, uploadId, errorMessage, status;\n\n        delete pendingInitiateRequests[id];\n\n        // The base ajax requester may declare the request to be a failure based on status code.\n        if (isError) {\n            status = xhr.status;\n\n            messageElements = responseDoc.getElementsByTagName(\"Message\");\n            if (messageElements.length > 0) {\n                errorMessage = messageElements[0].textContent;\n            }\n        }\n        // If the base ajax requester has not declared this a failure, make sure we can retrieve the uploadId from the response.\n        else {\n            uploadIdElements = responseDoc.getElementsByTagName(\"UploadId\");\n            if (uploadIdElements.length > 0) {\n                uploadId = uploadIdElements[0].textContent;\n            }\n            else {\n                errorMessage = \"Upload ID missing from request\";\n            }\n        }\n\n        // Either fail the promise (passing a descriptive error message) or declare it a success (passing the upload ID)\n        if (uploadId === undefined) {\n            if (errorMessage) {\n                options.log(qq.format(\"Specific problem detected initiating multipart upload request for {}: '{}'.\", id, errorMessage), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Unexplained error with initiate multipart upload request for {}.  Status code {}.\", id, status), \"error\");\n            }\n\n            promise.failure(\"Problem initiating upload request.\", xhr);\n        }\n        else {\n            options.log(qq.format(\"Initiate multipart upload request successful for {}.  Upload ID is {}\", id, uploadId));\n            promise.success(uploadId, xhr);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleInitiateRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Initiate MPU\" request to AWS via the REST API.  First, though, we must get a signature from the\n         * local server for the request.  If all is successful, the uploadId from AWS will be passed into the promise's\n         * success handler. Otherwise, an error message will ultimately be passed into the failure method.\n         *\n         * @param id The ID associated with the file\n         * @returns {qq.Promise}\n         */\n        send: function(id) {\n            var promise = new qq.Promise();\n\n            getHeaders(id).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 initiate multipart upload request for \" + id);\n\n                pendingInitiateRequests[id] = promise;\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Complete Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadComplete.html)\n * request to S3 via the REST API.\n *\n * @param o Options passed by the creator, to overwrite any default option values.\n * @constructor\n */\nqq.s3.CompleteMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingCompleteRequests = {},\n        options = {\n            method: \"POST\",\n            contentType: \"text/xml\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Complete\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId, body) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_COMPLETE, bucket, host, options.getKey(id))\n                .withUploadId(uploadId)\n                .withContent(body)\n                .withContentType(\"application/xml; charset=UTF-8\");\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Complete MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleCompleteRequestComplete(id, xhr, isError) {\n        var promise = pendingCompleteRequests[id],\n            domParser = new DOMParser(),\n            bucket = options.getBucket(id),\n            key = options.getKey(id),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            bucketEls = responseDoc.getElementsByTagName(\"Bucket\"),\n            keyEls = responseDoc.getElementsByTagName(\"Key\");\n\n        delete pendingCompleteRequests[id];\n\n        options.log(qq.format(\"Complete response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Complete Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (bucketEls.length && keyEls.length) {\n                if (bucketEls[0].textContent !== bucket) {\n                    isError = true;\n                    options.log(qq.format(\"Wrong bucket in response to Complete Multipart Upload request for {}.\", id), \"error\");\n                }\n\n                // TODO Compare key name from response w/ expected key name if AWS ever fixes the encoding of key names in this response.\n            }\n            else {\n                isError = true;\n                options.log(qq.format(\"Missing bucket and/or key in response to Complete Multipart Upload request for {}.\", id), \"error\");\n            }\n        }\n\n        if (isError) {\n            promise.failure(\"Problem combining the file parts!\", xhr);\n        }\n        else {\n            promise.success({}, xhr);\n        }\n    }\n\n    /**\n     * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n     * @returns {string} XML string containing the body to send with the \"Complete\" request\n     */\n    function getCompleteRequestBody(etagEntries) {\n        var doc = document.implementation.createDocument(null, \"CompleteMultipartUpload\", null);\n\n        // The entries MUST be sorted by part number, per the AWS API spec.\n        etagEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(etagEntries, function(idx, etagEntry) {\n            var part = etagEntry.part,\n                etag = etagEntry.etag,\n                partEl = doc.createElement(\"Part\"),\n                partNumEl = doc.createElement(\"PartNumber\"),\n                partNumTextEl = doc.createTextNode(part),\n                etagTextEl = doc.createTextNode(etag),\n                etagEl = doc.createElement(\"ETag\");\n\n            etagEl.appendChild(etagTextEl);\n            partNumEl.appendChild(partNumTextEl);\n            partEl.appendChild(partNumEl);\n            partEl.appendChild(etagEl);\n            qq(doc).children()[0].appendChild(partEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: \"application/xml; charset=UTF-8\",\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleCompleteRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Complete\" request and fulfills the returned promise when the success of this request is known.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n         * @returns {qq.Promise}\n         */\n        send: function(id, uploadId, etagEntries) {\n            var promise = new qq.Promise(),\n                body = getCompleteRequestBody(etagEntries);\n\n            getHeaders(id, uploadId, body).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 complete multipart upload request for \" + id);\n\n                pendingCompleteRequests[id] = promise;\n                delete headers[\"Content-Type\"];\n\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .withPayload(body)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Ajax requester used to send an [\"Abort Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadAbort.html)\n * request to S3 via the REST API.\n\n * @param o\n * @constructor\n */\nqq.s3.AbortMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Abort\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @param id Associated file ID\n     * @param uploadId ID of the associated upload, according to AWS\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_ABORT, bucket, host, options.getKey(id))\n                .withUploadId(uploadId);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Abort MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleAbortRequestComplete(id, xhr, isError) {\n        var domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            errorEls = responseDoc.getElementsByTagName(\"Error\"),\n            awsErrorMsg;\n\n        options.log(qq.format(\"Abort response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Abort Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (errorEls.length) {\n                isError = true;\n                awsErrorMsg = responseDoc.getElementsByTagName(\"Message\")[0].textContent;\n                options.log(qq.format(\"Failed to Abort Multipart Upload request for {}.  Error: {}\", id, awsErrorMsg), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Abort MPU request succeeded for file ID {}.\", id));\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [\"DELETE\"],\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleAbortRequestComplete,\n        successfulResponseCodes: {\n            DELETE: [204]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Abort\" request.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         */\n        send: function(id, uploadId) {\n            getHeaders(id, uploadId).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 Abort multipart upload request for \" + id);\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            });\n        }\n    });\n};\n","/*globals qq */\r\n/**\r\n * Upload handler used by the upload to S3 module that depends on File API support, and, therefore, makes use of\r\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to S3 buckets via the associated AWS API.\r\n *\r\n * If chunking is supported and enabled, the S3 Multipart Upload REST API is utilized.\r\n *\r\n * @param spec Options passed from the base handler\r\n * @param proxy Callbacks & methods used to query for or push out data/changes\r\n */\r\nqq.s3.XhrUploadHandler = function(spec, proxy) {\r\n    \"use strict\";\r\n\r\n    var getName = proxy.getName,\r\n        log = proxy.log,\r\n        clockDrift = spec.clockDrift,\r\n        expectedStatus = 200,\r\n        onGetBucket = spec.getBucket,\r\n        onGetHost = spec.getHost,\r\n        onGetKeyName = spec.getKeyName,\r\n        filenameParam = spec.filenameParam,\r\n        paramsStore = spec.paramsStore,\r\n        endpointStore = spec.endpointStore,\r\n        aclStore = spec.aclStore,\r\n        reducedRedundancy = spec.objectProperties.reducedRedundancy,\r\n        region = spec.objectProperties.region,\r\n        serverSideEncryption = spec.objectProperties.serverSideEncryption,\r\n        validation = spec.validation,\r\n        signature = qq.extend({region: region, drift: clockDrift}, spec.signature),\r\n        handler = this,\r\n        credentialsProvider = spec.signature.credentialsProvider,\r\n\r\n        chunked = {\r\n            // Sends a \"Complete Multipart Upload\" request and then signals completion of the upload\r\n            // when the response to this request has been parsed.\r\n            combine: function(id) {\r\n                var uploadId = handler._getPersistableData(id).uploadId,\r\n                    etagMap = handler._getPersistableData(id).etags,\r\n                    result = new qq.Promise();\r\n\r\n                requesters.completeMultipart.send(id, uploadId, etagMap).then(\r\n                    result.success,\r\n\r\n                    function failure(reason, xhr) {\r\n                        result.failure(upload.done(id, xhr).response, xhr);\r\n                    }\r\n                );\r\n\r\n                return result;\r\n            },\r\n\r\n            // The last step in handling a chunked upload.  This is called after each chunk has been sent.\r\n            // The request may be successful, or not.  If it was successful, we must extract the \"ETag\" element\r\n            // in the XML response and store that along with the associated part number.\r\n            // We need these items to \"Complete\" the multipart upload after all chunks have been successfully sent.\r\n            done: function(id, xhr, chunkIdx) {\r\n                var response = upload.response.parse(id, xhr),\r\n                    etag;\r\n\r\n                if (response.success) {\r\n                    etag = xhr.getResponseHeader(\"ETag\");\r\n\r\n                    if (!handler._getPersistableData(id).etags) {\r\n                        handler._getPersistableData(id).etags = [];\r\n                    }\r\n                    handler._getPersistableData(id).etags.push({part: chunkIdx + 1, etag: etag});\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Determines headers that must be attached to the chunked (Multipart Upload) request.  One of these headers is an\r\n             * Authorization value, which must be determined by asking the local server to sign the request first.  So, this\r\n             * function returns a promise.  Once all headers are determined, the `success` method of the promise is called with\r\n             * the headers object.  If there was some problem determining the headers, we delegate to the caller's `failure`\r\n             * callback.\r\n             *\r\n             * @param id File ID\r\n             * @param chunkIdx Index of the chunk to PUT\r\n             * @returns {qq.Promise}\r\n             */\r\n            initHeaders: function(id, chunkIdx, blob) {\r\n                var headers = {},\r\n                    bucket = upload.bucket.getName(id),\r\n                    host = upload.host.getName(id),\r\n                    key = upload.key.urlSafe(id),\r\n                    promise = new qq.Promise(),\r\n                    signatureConstructor = requesters.restSignature.constructStringToSign\r\n                        (requesters.restSignature.REQUEST_TYPE.MULTIPART_UPLOAD, bucket, host, key)\r\n                        .withPartNum(chunkIdx + 1)\r\n                        .withContent(blob)\r\n                        .withUploadId(handler._getPersistableData(id).uploadId);\r\n\r\n                // Ask the local server to sign the request.  Use this signature to form the Authorization header.\r\n                requesters.restSignature.getSignature(id + \".\" + chunkIdx, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\r\n\r\n                return promise;\r\n            },\r\n\r\n            put: function(id, chunkIdx) {\r\n                var xhr = handler._createXhr(id, chunkIdx),\r\n                    chunkData = handler._getChunkData(id, chunkIdx),\r\n                    domain = spec.endpointStore.get(id),\r\n                    promise = new qq.Promise();\r\n\r\n                // Add appropriate headers to the multipart upload request.\r\n                // Once these have been determined (asynchronously) attach the headers and send the chunk.\r\n                chunked.initHeaders(id, chunkIdx, chunkData.blob).then(function(headers, endOfUrl) {\r\n                    if (xhr._cancelled) {\r\n                        log(qq.format(\"Upload of item {}.{} cancelled. Upload will not start after successful signature request.\", id, chunkIdx));\r\n                        promise.failure({error: \"Chunk upload cancelled\"});\r\n                    }\r\n                    else {\r\n                        var url = domain + \"/\" + endOfUrl;\r\n                        handler._registerProgressHandler(id, chunkIdx, chunkData.size);\r\n                        upload.track(id, xhr, chunkIdx).then(promise.success, promise.failure);\r\n                        xhr.open(\"PUT\", url, true);\r\n\r\n                        qq.each(headers, function(name, val) {\r\n                            xhr.setRequestHeader(name, val);\r\n                        });\r\n\r\n                        xhr.send(chunkData.blob);\r\n                    }\r\n                }, function() {\r\n                    promise.failure({error: \"Problem signing the chunk!\"}, xhr);\r\n                });\r\n\r\n                return promise;\r\n            },\r\n\r\n            send: function(id, chunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                chunked.setup(id).then(\r\n                    // The \"Initiate\" request succeeded.  We are ready to send the first chunk.\r\n                    function() {\r\n                        chunked.put(id, chunkIdx).then(promise.success, promise.failure);\r\n                    },\r\n\r\n                    // We were unable to initiate the chunked upload process.\r\n                    function(errorMessage, xhr) {\r\n                        promise.failure({error: errorMessage}, xhr);\r\n                    }\r\n                );\r\n\r\n                return promise;\r\n            },\r\n\r\n            /**\r\n             * Sends an \"Initiate Multipart Upload\" request to S3 via the REST API, but only if the MPU has not already been\r\n             * initiated.\r\n             *\r\n             * @param id Associated file ID\r\n             * @returns {qq.Promise} A promise that is fulfilled when the initiate request has been sent and the response has been parsed.\r\n             */\r\n            setup: function(id) {\r\n                var promise = new qq.Promise(),\r\n                    uploadId = handler._getPersistableData(id).uploadId,\r\n                    uploadIdPromise = new qq.Promise();\r\n\r\n                if (!uploadId) {\r\n                    handler._getPersistableData(id).uploadId = uploadIdPromise;\r\n                    requesters.initiateMultipart.send(id).then(\r\n                        function(uploadId) {\r\n                            handler._getPersistableData(id).uploadId = uploadId;\r\n                            uploadIdPromise.success(uploadId);\r\n                            promise.success(uploadId);\r\n                        },\r\n                        function(errorMsg, xhr) {\r\n                            handler._getPersistableData(id).uploadId = null;\r\n                            promise.failure(errorMsg, xhr);\r\n                            uploadIdPromise.failure(errorMsg, xhr);\r\n                        }\r\n                    );\r\n                }\r\n                else if (uploadId instanceof qq.Promise) {\r\n                    uploadId.then(function(uploadId) {\r\n                        promise.success(uploadId);\r\n                    });\r\n                }\r\n                else {\r\n                    promise.success(uploadId);\r\n                }\r\n\r\n                return promise;\r\n            }\r\n        },\r\n\r\n        requesters = {\r\n            abortMultipart: new qq.s3.AbortMultipartAjaxRequester({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                }\r\n            }),\r\n\r\n            completeMultipart: new qq.s3.CompleteMultipartAjaxRequester({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                }\r\n            }),\r\n\r\n            initiateMultipart: new qq.s3.InitiateMultipartAjaxRequester({\r\n                filenameParam: filenameParam,\r\n                endpointStore: endpointStore,\r\n                paramsStore: paramsStore,\r\n                signatureSpec: signature,\r\n                aclStore: aclStore,\r\n                reducedRedundancy: reducedRedundancy,\r\n                serverSideEncryption: serverSideEncryption,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getContentType: function(id) {\r\n                    return handler._getMimeType(id);\r\n                },\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                },\r\n                getName: function(id) {\r\n                    return getName(id);\r\n                }\r\n            }),\r\n\r\n            policySignature: new qq.s3.RequestSigner({\r\n                expectingPolicy: true,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log\r\n            }),\r\n\r\n            restSignature: new qq.s3.RequestSigner({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log\r\n            })\r\n        },\r\n\r\n        simple = {\r\n            /**\r\n             * Used for simple (non-chunked) uploads to determine the parameters to send along with the request.  Part of this\r\n             * process involves asking the local server to sign the request, so this function returns a promise.  The promise\r\n             * is fulfilled when all parameters are determined, or when we determine that all parameters cannot be calculated\r\n             * due to some error.\r\n             *\r\n             * @param id File ID\r\n             * @returns {qq.Promise}\r\n             */\r\n            initParams: function(id) {\r\n                /*jshint -W040 */\r\n                var customParams = paramsStore.get(id);\r\n                customParams[filenameParam] = getName(id);\r\n\r\n                return qq.s3.util.generateAwsParams({\r\n                    endpoint: endpointStore.get(id),\r\n                    clockDrift: clockDrift,\r\n                    params: customParams,\r\n                    type: handler._getMimeType(id),\r\n                    bucket: upload.bucket.getName(id),\r\n                    key: handler.getThirdPartyFileId(id),\r\n                    accessKey: credentialsProvider.get().accessKey,\r\n                    sessionToken: credentialsProvider.get().sessionToken,\r\n                    acl: aclStore.get(id),\r\n                    expectedStatus: expectedStatus,\r\n                    minFileSize: validation.minSizeLimit,\r\n                    maxFileSize: validation.maxSizeLimit,\r\n                    reducedRedundancy: reducedRedundancy,\r\n                    region: region,\r\n                    serverSideEncryption: serverSideEncryption,\r\n                    signatureVersion: signature.version,\r\n                    log: log\r\n                },\r\n                qq.bind(requesters.policySignature.getSignature, this, id));\r\n            },\r\n\r\n            send: function(id) {\r\n                var promise = new qq.Promise(),\r\n                    xhr = handler._createXhr(id),\r\n                    fileOrBlob = handler.getFile(id);\r\n\r\n                handler._registerProgressHandler(id);\r\n                upload.track(id, xhr).then(promise.success, promise.failure);\r\n\r\n                // Delegate to a function the sets up the XHR request and notifies us when it is ready to be sent, along w/ the payload.\r\n                simple.setup(id, xhr, fileOrBlob).then(function(toSend) {\r\n                    log(\"Sending upload request for \" + id);\r\n                    xhr.send(toSend);\r\n                }, promise.failure);\r\n\r\n                return promise;\r\n            },\r\n\r\n            /**\r\n             * Starts the upload process by delegating to an async function that determine parameters to be attached to the\r\n             * request.  If all params can be determined, we are called back with the params and the caller of this function is\r\n             * informed by invoking the `success` method on the promise returned by this function, passing the payload of the\r\n             * request.  If some error occurs here, we delegate to a function that signals a failure for this upload attempt.\r\n             *\r\n             * Note that this is only used by the simple (non-chunked) upload process.\r\n             *\r\n             * @param id File ID\r\n             * @param xhr XMLHttpRequest to use for the upload\r\n             * @param fileOrBlob `File` or `Blob` to send\r\n             * @returns {qq.Promise}\r\n             */\r\n            setup: function(id, xhr, fileOrBlob) {\r\n                var formData = new FormData(),\r\n                    endpoint = endpointStore.get(id),\r\n                    url = endpoint,\r\n                    promise = new qq.Promise();\r\n\r\n                simple.initParams(id).then(\r\n                    // Success - all params determined\r\n                    function(awsParams) {\r\n                        xhr.open(\"POST\", url, true);\r\n\r\n                        qq.obj2FormData(awsParams, formData);\r\n\r\n                        // AWS requires the file field be named \"file\".\r\n                        formData.append(\"file\", fileOrBlob);\r\n\r\n                        promise.success(formData);\r\n                    },\r\n\r\n                    // Failure - we couldn't determine some params (likely the signature)\r\n                    function(errorMessage) {\r\n                        promise.failure({error: errorMessage});\r\n                    }\r\n                );\r\n\r\n                return promise;\r\n            }\r\n        },\r\n\r\n        upload = {\r\n            /**\r\n             * Note that this is called when an upload has reached a termination point,\r\n             * regardless of success/failure.  For example, it is called when we have\r\n             * encountered an error during the upload or when the file may have uploaded successfully.\r\n             *\r\n             * @param id file ID\r\n             */\r\n            bucket: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        cachedBucket = handler._getFileState(id).bucket;\r\n\r\n                    if (cachedBucket) {\r\n                        promise.success(cachedBucket);\r\n                    }\r\n                    else {\r\n                        onGetBucket(id).then(function(bucket) {\r\n                            handler._getFileState(id).bucket = bucket;\r\n                            promise.success(bucket);\r\n                        }, promise.failure);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                getName: function(id) {\r\n                    return handler._getFileState(id).bucket;\r\n                }\r\n            },\r\n\r\n            host: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        cachedHost = handler._getFileState(id).host;\r\n\r\n                    if (cachedHost) {\r\n                        promise.success(cachedHost);\r\n                    }\r\n                    else {\r\n                        onGetHost(id).then(function(host) {\r\n                            handler._getFileState(id).host = host;\r\n                            promise.success(host);\r\n                        }, promise.failure);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                getName: function(id) {\r\n                    return handler._getFileState(id).host;\r\n                }\r\n            },\r\n\r\n            done: function(id, xhr) {\r\n                var response = upload.response.parse(id, xhr),\r\n                    isError = response.success !== true;\r\n\r\n                if (isError && upload.response.shouldReset(response.code)) {\r\n                    log(\"This is an unrecoverable error, we must restart the upload entirely on the next retry attempt.\", \"error\");\r\n                    response.reset = true;\r\n                }\r\n\r\n                return {\r\n                    success: !isError,\r\n                    response: response\r\n                };\r\n            },\r\n\r\n            key: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        key = handler.getThirdPartyFileId(id);\r\n\r\n                    /* jshint eqnull:true */\r\n                    if (key == null) {\r\n                        handler._setThirdPartyFileId(id, promise);\r\n                        onGetKeyName(id, getName(id)).then(\r\n                            function(keyName) {\r\n                                handler._setThirdPartyFileId(id, keyName);\r\n                                promise.success(keyName);\r\n                            },\r\n                            function(errorReason) {\r\n                                handler._setThirdPartyFileId(id, null);\r\n                                promise.failure(errorReason);\r\n                            }\r\n                        );\r\n                    }\r\n                    else if (qq.isGenericPromise(key)) {\r\n                        key.then(promise.success, promise.failure);\r\n                    }\r\n                    else {\r\n                        promise.success(key);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                urlSafe: function(id) {\r\n                    var encodedKey = handler.getThirdPartyFileId(id);\r\n                    return qq.s3.util.uriEscapePath(encodedKey);\r\n                }\r\n            },\r\n\r\n            response: {\r\n                parse: function(id, xhr) {\r\n                    var response = {},\r\n                        parsedErrorProps;\r\n\r\n                    try {\r\n                        log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\r\n\r\n                        if (xhr.status === expectedStatus) {\r\n                            response.success = true;\r\n                        }\r\n                        else {\r\n                            parsedErrorProps = upload.response.parseError(xhr.responseText);\r\n\r\n                            if (parsedErrorProps) {\r\n                                response.error = parsedErrorProps.message;\r\n                                response.code = parsedErrorProps.code;\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\r\n                    }\r\n\r\n                    return response;\r\n                },\r\n\r\n                /**\r\n                 * This parses an XML response by extracting the \"Message\" and \"Code\" elements that accompany AWS error responses.\r\n                 *\r\n                 * @param awsResponseXml XML response from AWS\r\n                 * @returns {object} Object w/ `code` and `message` properties, or undefined if we couldn't find error info in the XML document.\r\n                 */\r\n                parseError: function(awsResponseXml) {\r\n                    var parser = new DOMParser(),\r\n                        parsedDoc = parser.parseFromString(awsResponseXml, \"application/xml\"),\r\n                        errorEls = parsedDoc.getElementsByTagName(\"Error\"),\r\n                        errorDetails = {},\r\n                        codeEls, messageEls;\r\n\r\n                    if (errorEls.length) {\r\n                        codeEls = parsedDoc.getElementsByTagName(\"Code\");\r\n                        messageEls = parsedDoc.getElementsByTagName(\"Message\");\r\n\r\n                        if (messageEls.length) {\r\n                            errorDetails.message = messageEls[0].textContent;\r\n                        }\r\n\r\n                        if (codeEls.length) {\r\n                            errorDetails.code = codeEls[0].textContent;\r\n                        }\r\n\r\n                        return errorDetails;\r\n                    }\r\n                },\r\n\r\n                // Determine if the upload should be restarted on the next retry attempt\r\n                // based on the error code returned in the response from AWS.\r\n                shouldReset: function(errorCode) {\r\n                    /*jshint -W014 */\r\n                    return errorCode === \"EntityTooSmall\"\r\n                        || errorCode === \"InvalidPart\"\r\n                        || errorCode === \"InvalidPartOrder\"\r\n                        || errorCode === \"NoSuchUpload\";\r\n                }\r\n            },\r\n\r\n            start: function(id, optChunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                upload.key.promise(id).then(function() {\r\n                    upload.bucket.promise(id).then(function() {\r\n                        upload.host.promise(id).then(function() {\r\n                            /* jshint eqnull:true */\r\n                            if (optChunkIdx == null) {\r\n                                simple.send(id).then(promise.success, promise.failure);\r\n                            }\r\n                            else {\r\n                                chunked.send(id, optChunkIdx).then(promise.success, promise.failure);\r\n                            }\r\n                        });\r\n                    });\r\n                },\r\n                function(errorReason) {\r\n                    promise.failure({error: errorReason});\r\n                });\r\n\r\n                return promise;\r\n            },\r\n\r\n            track: function(id, xhr, optChunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                xhr.onreadystatechange = function() {\r\n                    if (xhr.readyState === 4) {\r\n                        var result;\r\n\r\n                        /* jshint eqnull:true */\r\n                        if (optChunkIdx == null) {\r\n                            result = upload.done(id, xhr);\r\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\r\n                        }\r\n                        else {\r\n                            chunked.done(id, xhr, optChunkIdx);\r\n                            result = upload.done(id, xhr);\r\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                return promise;\r\n            }\r\n        };\r\n\r\n    qq.extend(this, {\r\n        uploadChunk: upload.start,\r\n        uploadFile: upload.start\r\n    });\r\n\r\n    qq.extend(this, new qq.XhrUploadHandler({\r\n        options: qq.extend({namespace: \"s3\"}, spec),\r\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\r\n    }));\r\n\r\n    qq.override(this, function(super_) {\r\n        return {\r\n            expunge: function(id) {\r\n                var uploadId = handler._getPersistableData(id) && handler._getPersistableData(id).uploadId,\r\n                    existedInLocalStorage = handler._maybeDeletePersistedChunkData(id);\r\n\r\n                if (uploadId !== undefined && existedInLocalStorage) {\r\n                    requesters.abortMultipart.send(id, uploadId);\r\n                }\r\n\r\n                super_.expunge(id);\r\n            },\r\n\r\n            finalizeChunks: function(id) {\r\n                return chunked.combine(id);\r\n            },\r\n\r\n            _getLocalStorageId: function(id) {\r\n                var baseStorageId = super_._getLocalStorageId(id),\r\n                    bucketName = upload.bucket.getName(id);\r\n\r\n                return baseStorageId + \"-\" + bucketName;\r\n            }\r\n        };\r\n    });\r\n};\r\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to S3 buckets via the associated\n * AWS API.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        clockDrift = options.clockDrift,\n        onUuidChanged = proxy.onUuidChanged,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        onGetBucket = options.getBucket,\n        onGetKeyName = options.getKeyName,\n        filenameParam = options.filenameParam,\n        paramsStore = options.paramsStore,\n        endpointStore = options.endpointStore,\n        aclStore = options.aclStore,\n        reducedRedundancy = options.objectProperties.reducedRedundancy,\n        region = options.objectProperties.region,\n        serverSideEncryption = options.objectProperties.serverSideEncryption,\n        validation = options.validation,\n        signature = options.signature,\n        successRedirectUrl = options.iframeSupport.localBlankPagePath,\n        credentialsProvider = options.signature.credentialsProvider,\n        getSignatureAjaxRequester = new qq.s3.RequestSigner({\n            signatureSpec: signature,\n            cors: options.cors,\n            log: log\n        });\n\n    if (successRedirectUrl === undefined) {\n        throw new Error(\"successRedirectEndpoint MUST be defined if you intend to use browsers that do not support the File API!\");\n    }\n\n    /**\n     * Attempt to parse the contents of an iframe after receiving a response from the server.  If the contents cannot be\n     * read (perhaps due to a security error) it is safe to assume that the upload was not successful since Amazon should\n     * have redirected to a known endpoint that should provide a parseable response.\n     *\n     * @param id ID of the associated file\n     * @param iframe target of the form submit\n     * @returns {boolean} true if the contents can be read, false otherwise\n     */\n    function isValidResponse(id, iframe) {\n        var response,\n            endpoint = options.endpointStore.get(id),\n            bucket = handler._getFileState(id).bucket,\n            doc,\n            innerHtml,\n            responseData;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            responseData = qq.s3.util.parseIframeResponse(iframe);\n            if (responseData.bucket === bucket &&\n                responseData.key === qq.s3.util.encodeQueryStringParam(handler.getThirdPartyFileId(id))) {\n\n                return true;\n            }\n\n            log(\"Response from AWS included an unexpected bucket or key name.\", \"error\");\n\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n        }\n\n        return false;\n    }\n\n    function generateAwsParams(id) {\n        /*jshint -W040 */\n        var customParams = paramsStore.get(id);\n\n        customParams[filenameParam] = getName(id);\n\n        return qq.s3.util.generateAwsParams({\n            endpoint: endpointStore.get(id),\n            clockDrift: clockDrift,\n            params: customParams,\n            bucket: handler._getFileState(id).bucket,\n            key: handler.getThirdPartyFileId(id),\n            accessKey: credentialsProvider.get().accessKey,\n            sessionToken: credentialsProvider.get().sessionToken,\n            acl: aclStore.get(id),\n            minFileSize: validation.minSizeLimit,\n            maxFileSize: validation.maxSizeLimit,\n            successRedirectUrl: successRedirectUrl,\n            reducedRedundancy: reducedRedundancy,\n            region: region,\n            serverSideEncryption: serverSideEncryption,\n            signatureVersion: signature.version,\n            log: log\n        },\n        qq.bind(getSignatureAjaxRequester.getSignature, this, id));\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            endpoint = options.endpointStore.get(id),\n            fileName = getName(id);\n\n        generateAwsParams(id).then(function(params) {\n            var form = handler._initFormForUpload({\n                method: method,\n                endpoint: endpoint,\n                params: params,\n                paramsInBody: true,\n                targetName: iframe.name\n            });\n\n            promise.success(form);\n        }, function(errorMessage) {\n            promise.failure(errorMessage);\n            handleFinishedUpload(id, iframe, fileName, {error: errorMessage});\n        });\n\n        return promise;\n    }\n\n    function handleUpload(id) {\n        var iframe = handler._createIframe(id),\n            input = handler.getInput(id),\n            promise = new qq.Promise();\n\n        createForm(id, iframe).then(function(form) {\n            form.appendChild(input);\n\n            // Register a callback when the response comes in from S3\n            handler._attachLoadEvent(iframe, function(response) {\n                log(\"iframe loaded\");\n\n                // If the common response handler has determined success or failure immediately\n                if (response) {\n                    // If there is something fundamentally wrong with the response (such as iframe content is not accessible)\n                    if (response.success === false) {\n                        log(\"Amazon likely rejected the upload request\", \"error\");\n                        promise.failure(response);\n                    }\n                }\n                // The generic response (iframe onload) handler was not able to make a determination regarding the success of the request\n                else {\n                    response = {};\n                    response.success = isValidResponse(id, iframe);\n\n                    // If the more specific response handle detected a problem with the response from S3\n                    if (response.success === false) {\n                        log(\"A success response was received by Amazon, but it was invalid in some way.\", \"error\");\n                        promise.failure(response);\n                    }\n                    else {\n                        qq.extend(response, qq.s3.util.parseIframeResponse(iframe));\n                        promise.success(response);\n                    }\n                }\n\n                handleFinishedUpload(id, iframe);\n            });\n\n            log(\"Sending upload request for \" + id);\n            form.submit();\n            qq(form).remove();\n        }, promise.failure);\n\n        return promise;\n    }\n\n    function handleFinishedUpload(id, iframe) {\n        handler._detachLoadEvent(id);\n        iframe && qq(iframe).remove();\n    }\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: false,\n            inputName: \"file\"\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            onUuidChanged: onUuidChanged,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n\n    qq.extend(this, {\n        uploadFile: function(id) {\n            var name = getName(id),\n                promise = new qq.Promise();\n\n            if (handler.getThirdPartyFileId(id)) {\n                if (handler._getFileState(id).bucket) {\n                    handleUpload(id).then(promise.success, promise.failure);\n                }\n                else {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handleUpload(id).then(promise.success, promise.failure);\n                    });\n                }\n            }\n            else {\n                // The S3 uploader module will either calculate the key or ask the server for it\n                // and will call us back once it is known.\n                onGetKeyName(id, name).then(function(key) {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handler._setThirdPartyFileId(id, key);\n                        handleUpload(id).then(promise.success, promise.failure);\n                    }, function(errorReason) {\n                        promise.failure({error: errorReason});\n                    });\n                }, function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n            }\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\r\n/**\r\n * Defines the public API for FineUploader mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.uiPublicApi = {\r\n        addInitialFiles: function(cannedFileList) {\r\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\r\n            this._templating.addCacheToDom();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\r\n            this._templating.clearFiles();\r\n        },\r\n\r\n        addExtraDropzone: function(element) {\r\n            this._dnd && this._dnd.setupExtraDropzone(element);\r\n        },\r\n\r\n        removeExtraDropzone: function(element) {\r\n            if (this._dnd) {\r\n                return this._dnd.removeDropzone(element);\r\n            }\r\n        },\r\n\r\n        getItemByFileId: function(id) {\r\n            if (!this._templating.isHiddenForever(id)) {\r\n                return this._templating.getFileContainer(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            this._parent.prototype.reset.apply(this, arguments);\r\n            this._templating.reset();\r\n\r\n            if (!this._options.button && this._templating.getButton()) {\r\n                this._defaultButtonId = this._createUploadButton({\r\n                    element: this._templating.getButton(),\r\n                    title: this._options.text.fileInputTitle\r\n                }).getButtonId();\r\n            }\r\n\r\n            if (this._dnd) {\r\n                this._dnd.dispose();\r\n                this._dnd = this._setupDragAndDrop();\r\n            }\r\n\r\n            this._totalFilesInBatch = 0;\r\n            this._filesInBatchAddedToUi = 0;\r\n\r\n            this._setupClickAndEditEventHandlers();\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            var formattedFilename = this._options.formatFileName(newName);\r\n\r\n            this._parent.prototype.setName.apply(this, arguments);\r\n            this._templating.updateFilename(id, formattedFilename);\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\r\n\r\n            paused && this._templating.uploadPaused(id);\r\n            return paused;\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\r\n\r\n            continued && this._templating.uploadContinued(id);\r\n            return continued;\r\n        },\r\n\r\n        getId: function(fileContainerOrChildEl) {\r\n            return this._templating.getFileId(fileContainerOrChildEl);\r\n        },\r\n\r\n        getDropTarget: function(fileId) {\r\n            var file = this.getFile(fileId);\r\n\r\n            return file.qqDropTarget;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploader mode.\r\n     */\r\n    qq.uiPrivateApi = {\r\n        _getButton: function(buttonId) {\r\n            var button = this._parent.prototype._getButton.apply(this, arguments);\r\n\r\n            if (!button) {\r\n                if (buttonId === this._defaultButtonId) {\r\n                    button = this._templating.getButton();\r\n                }\r\n            }\r\n\r\n            return button;\r\n        },\r\n\r\n        _removeFileItem: function(fileId) {\r\n            this._templating.removeFile(fileId);\r\n        },\r\n\r\n        _setupClickAndEditEventHandlers: function() {\r\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\r\n\r\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\r\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\r\n            this._focusinEventSupported = !qq.firefox();\r\n\r\n            if (this._isEditFilenameEnabled())\r\n            {\r\n                this._filenameClickHandler = this._bindFilenameClickEvent();\r\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\r\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\r\n            }\r\n        },\r\n\r\n        _setupDragAndDrop: function() {\r\n            var self = this,\r\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\r\n                templating = this._templating,\r\n                defaultDropZone = templating.getDropZone();\r\n\r\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\r\n\r\n            return new qq.DragAndDrop({\r\n                dropZoneElements: dropZoneElements,\r\n                allowMultipleItems: this._options.multiple,\r\n                classes: {\r\n                    dropActive: this._options.classes.dropActive\r\n                },\r\n                callbacks: {\r\n                    processingDroppedFiles: function() {\r\n                        templating.showDropProcessing();\r\n                    },\r\n                    processingDroppedFilesComplete: function(files, targetEl) {\r\n                        templating.hideDropProcessing();\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            file.qqDropTarget = targetEl;\r\n                        });\r\n\r\n                        if (files.length) {\r\n                            self.addFiles(files, null, null);\r\n                        }\r\n                    },\r\n                    dropError: function(code, errorData) {\r\n                        self._itemError(code, errorData);\r\n                    },\r\n                    dropLog: function(message, level) {\r\n                        self.log(message, level);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _bindFileButtonsClickEvent: function() {\r\n            var self = this;\r\n\r\n            return new qq.FileButtonsClickHandler({\r\n                templating: this._templating,\r\n\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n\r\n                onDeleteFile: function(fileId) {\r\n                    self.deleteFile(fileId);\r\n                },\r\n\r\n                onCancel: function(fileId) {\r\n                    self.cancel(fileId);\r\n                },\r\n\r\n                onRetry: function(fileId) {\r\n                    self.retry(fileId);\r\n                },\r\n\r\n                onPause: function(fileId) {\r\n                    self.pauseUpload(fileId);\r\n                },\r\n\r\n                onContinue: function(fileId) {\r\n                    self.continueUpload(fileId);\r\n                },\r\n\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                }\r\n            });\r\n        },\r\n\r\n        _isEditFilenameEnabled: function() {\r\n            /*jshint -W014 */\r\n            return this._templating.isEditFilenamePossible()\r\n                && !this._options.autoUpload\r\n                && qq.FilenameClickHandler\r\n                && qq.FilenameInputFocusHandler\r\n                && qq.FilenameInputFocusHandler;\r\n        },\r\n\r\n        _filenameEditHandler: function() {\r\n            var self = this,\r\n                templating = this._templating;\r\n\r\n            return {\r\n                templating: templating,\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n                onGetUploadStatus: function(fileId) {\r\n                    return self.getUploads({id: fileId}).status;\r\n                },\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                },\r\n                onSetName: function(id, newName) {\r\n                    self.setName(id, newName);\r\n                },\r\n                onEditingStatusChange: function(id, isEditing) {\r\n                    var qqInput = qq(templating.getEditInput(id)),\r\n                        qqFileContainer = qq(templating.getFileContainer(id));\r\n\r\n                    if (isEditing) {\r\n                        qqInput.addClass(\"qq-editing\");\r\n                        templating.hideFilename(id);\r\n                        templating.hideEditIcon(id);\r\n                    }\r\n                    else {\r\n                        qqInput.removeClass(\"qq-editing\");\r\n                        templating.showFilename(id);\r\n                        templating.showEditIcon(id);\r\n                    }\r\n\r\n                    // Force IE8 and older to repaint\r\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\r\n                }\r\n            };\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\r\n\r\n            if (this._isEditFilenameEnabled()) {\r\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\r\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\r\n                    this._templating.markFilenameEditable(id);\r\n                    this._templating.hideEditIcon(id);\r\n                }\r\n            }\r\n\r\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\r\n                this._templating.hideRetry(id);\r\n                this._templating.setStatusText(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\r\n            }\r\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\r\n                this._templating.hidePause(id);\r\n            }\r\n        },\r\n\r\n        _bindFilenameInputFocusInEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusInHandler(spec);\r\n        },\r\n\r\n        _bindFilenameInputFocusEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusHandler(spec);\r\n        },\r\n\r\n        _bindFilenameClickEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameClickHandler(spec);\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._parent.prototype._storeForLater.apply(this, arguments);\r\n            this._templating.hideSpinner(id);\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._parent.prototype._onAllComplete.apply(this, arguments);\r\n            this._templating.resetTotalProgress();\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            var file = this.getFile(id);\r\n\r\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\r\n                this._paramsStore.addReadOnly(id, {\r\n                    qqpath: file.qqPath\r\n                });\r\n            }\r\n\r\n            this._parent.prototype._onSubmit.apply(this, arguments);\r\n            this._addToList(id, name);\r\n        },\r\n\r\n        // The file item has been added to the DOM.\r\n        _onSubmitted: function(id) {\r\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\r\n            if (this._isEditFilenameEnabled()) {\r\n                this._templating.markFilenameEditable(id);\r\n                this._templating.showEditIcon(id);\r\n\r\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\r\n                if (!this._focusinEventSupported) {\r\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\r\n                }\r\n            }\r\n        },\r\n\r\n        // Update the progress bar & percentage as the file is uploaded\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._parent.prototype._onProgress.apply(this, arguments);\r\n\r\n            this._templating.updateProgress(id, loaded, total);\r\n\r\n            if (Math.round(loaded / total * 100) === 100) {\r\n                this._templating.hideCancel(id);\r\n                this._templating.hidePause(id);\r\n                this._templating.hideProgress(id);\r\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\r\n\r\n                // If ~last byte was sent, display total file size\r\n                this._displayFileSize(id);\r\n            }\r\n            else {\r\n                // If still uploading, display percentage - total size is actually the total request(s) size\r\n                this._displayFileSize(id, loaded, total);\r\n            }\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\r\n            this._templating.updateTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\r\n                templating = this._templating,\r\n                fileContainer = templating.getFileContainer(id),\r\n                self = this;\r\n\r\n            function completeUpload(result) {\r\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\r\n                // If so, don't perform any UI-related tasks related to this file.\r\n                if (!fileContainer) {\r\n                    return;\r\n                }\r\n\r\n                templating.setStatusText(id);\r\n\r\n                qq(fileContainer).removeClass(self._classes.retrying);\r\n                templating.hideProgress(id);\r\n\r\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\r\n                    templating.hideCancel(id);\r\n                }\r\n                templating.hideSpinner(id);\r\n\r\n                if (result.success) {\r\n                    self._markFileAsSuccessful(id);\r\n                }\r\n                else {\r\n                    qq(fileContainer).addClass(self._classes.fail);\r\n                    templating.showCancel(id);\r\n\r\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\r\n                        qq(fileContainer).addClass(self._classes.retryable);\r\n                        templating.showRetry(id);\r\n                    }\r\n                    self._controlFailureTextDisplay(id, result);\r\n                }\r\n            }\r\n\r\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\r\n            if (parentRetVal instanceof qq.Promise) {\r\n                parentRetVal.done(function(newResult) {\r\n                    completeUpload(newResult);\r\n                });\r\n\r\n            }\r\n            else {\r\n                completeUpload(result);\r\n            }\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _markFileAsSuccessful: function(id) {\r\n            var templating = this._templating;\r\n\r\n            if (this._isDeletePossible()) {\r\n                templating.showDeleteButton(id);\r\n            }\r\n\r\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\r\n\r\n            this._maybeUpdateThumbnail(id);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\r\n            this._templating.showSpinner(id);\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\r\n\r\n            this._templating.showSpinner(id);\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\r\n\r\n            // Only display the pause button if we have finished uploading at least one chunk\r\n            // & this file can be resumed\r\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\r\n                this._templating.allowPause(id);\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._parent.prototype._onCancel.apply(this, arguments);\r\n            this._removeFileItem(id);\r\n\r\n            if (this._getNotFinished() === 0) {\r\n                this._templating.resetTotalProgress();\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id) {\r\n            var retryNumForDisplay, maxAuto, retryNote;\r\n\r\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\r\n\r\n            this._showCancelLink(id);\r\n\r\n            if (this._options.retry.showAutoRetryNote) {\r\n                retryNumForDisplay = this._autoRetries[id];\r\n                maxAuto = this._options.retry.maxAutoAttempts;\r\n\r\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\r\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\r\n\r\n                this._templating.setStatusText(id, retryNote);\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\r\n            }\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\r\n                this._templating.resetProgress(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\r\n                this._templating.setStatusText(id);\r\n                this._templating.showSpinner(id);\r\n                this._showCancelLink(id);\r\n                return true;\r\n            }\r\n            else {\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\r\n                this._templating.showRetry(id);\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id) {\r\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\r\n\r\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\r\n        },\r\n\r\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\r\n            if (this._options.deleteFile.forceConfirm) {\r\n                this._showDeleteConfirm.apply(this, arguments);\r\n            }\r\n            else {\r\n                this._sendDeleteRequest.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhr, isError) {\r\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\r\n\r\n            this._templating.hideSpinner(id);\r\n\r\n            if (isError) {\r\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\r\n                this._templating.showDeleteButton(id);\r\n            }\r\n            else {\r\n                this._removeFileItem(id);\r\n            }\r\n        },\r\n\r\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\r\n            this._templating.hideDeleteButton(id);\r\n            this._templating.showSpinner(id);\r\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\r\n            this._deleteHandler.sendDelete.apply(this, arguments);\r\n        },\r\n\r\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\r\n            /*jshint -W004 */\r\n            var fileName = this.getName(id),\r\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\r\n                uuid = this.getUuid(id),\r\n                deleteRequestArgs = arguments,\r\n                self = this,\r\n                retVal;\r\n\r\n            retVal = this._options.showConfirm(confirmMessage);\r\n\r\n            if (qq.isGenericPromise(retVal)) {\r\n                retVal.then(function() {\r\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n                });\r\n            }\r\n            else if (retVal !== false) {\r\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n            }\r\n        },\r\n\r\n        _addToList: function(id, name, canned) {\r\n            var prependData,\r\n                prependIndex = 0,\r\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\r\n                record;\r\n\r\n            if (this._options.display.prependFiles) {\r\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\r\n                    prependIndex = this._filesInBatchAddedToUi - 1;\r\n                }\r\n\r\n                prependData = {\r\n                    index: prependIndex\r\n                };\r\n            }\r\n\r\n            if (!canned) {\r\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\r\n                    this._templating.disableCancel();\r\n                }\r\n\r\n                // Cancel all existing (previous) files and clear the list if this file is not part of\r\n                // a scaled file group that has already been accepted, or if this file is not part of\r\n                // a scaled file group at all.\r\n                if (!this._options.multiple) {\r\n                    record = this.getUploads({id: id});\r\n\r\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\r\n\r\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\r\n                        this._handler.cancelAll();\r\n                        this._clearList();\r\n                        this._handledProxyGroup = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (canned) {\r\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\r\n            }\r\n            else {\r\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\r\n            }\r\n\r\n            this._filesInBatchAddedToUi += 1;\r\n\r\n            if (canned ||\r\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\r\n\r\n                this._displayFileSize(id);\r\n            }\r\n        },\r\n\r\n        _clearList: function() {\r\n            this._templating.clearFiles();\r\n            this.clearStoredFiles();\r\n        },\r\n\r\n        _displayFileSize: function(id, loadedSize, totalSize) {\r\n            var size = this.getSize(id),\r\n                sizeForDisplay = this._formatSize(size);\r\n\r\n            if (size >= 0) {\r\n                if (loadedSize !== undefined && totalSize !== undefined) {\r\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\r\n                }\r\n\r\n                this._templating.updateSize(id, sizeForDisplay);\r\n            }\r\n        },\r\n\r\n        _formatProgress: function(uploadedSize, totalSize) {\r\n            var message = this._options.text.formatProgress;\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\r\n            r(\"{total_size}\", this._formatSize(totalSize));\r\n            return message;\r\n        },\r\n\r\n        _controlFailureTextDisplay: function(id, response) {\r\n            var mode, responseProperty, failureReason;\r\n\r\n            mode = this._options.failedUploadTextDisplay.mode;\r\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\r\n\r\n            if (mode === \"custom\") {\r\n                failureReason = response[responseProperty];\r\n                if (!failureReason) {\r\n                    failureReason = this._options.text.failUpload;\r\n                }\r\n\r\n                this._templating.setStatusText(id, failureReason);\r\n\r\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\r\n                    this._showTooltip(id, failureReason);\r\n                }\r\n            }\r\n            else if (mode === \"default\") {\r\n                this._templating.setStatusText(id, this._options.text.failUpload);\r\n            }\r\n            else if (mode !== \"none\") {\r\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\r\n            }\r\n        },\r\n\r\n        _showTooltip: function(id, text) {\r\n            this._templating.getFileContainer(id).title = text;\r\n        },\r\n\r\n        _showCancelLink: function(id) {\r\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\r\n                this._templating.showCancel(id);\r\n            }\r\n        },\r\n\r\n        _itemError: function(code, name, item) {\r\n            var message = this._parent.prototype._itemError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._parent.prototype._batchError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _setupPastePrompt: function() {\r\n            var self = this;\r\n\r\n            this._options.callbacks.onPasteReceived = function() {\r\n                var message = self._options.paste.namePromptMessage,\r\n                    defaultVal = self._options.paste.defaultName;\r\n\r\n                return self._options.showPrompt(message, defaultVal);\r\n            };\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id, name) {\r\n            this._totalFilesInBatch -= 1;\r\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            this._totalFilesInBatch = items.length;\r\n            this._filesInBatchAddedToUi = 0;\r\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\r\n        },\r\n\r\n        _maybeUpdateThumbnail: function(fileId) {\r\n            var thumbnailUrl = this._thumbnailUrls[fileId],\r\n                fileStatus = this.getUploads({id: fileId}).status;\r\n\r\n            if (fileStatus !== qq.status.DELETED &&\r\n                (thumbnailUrl ||\r\n                this._options.thumbnails.placeholders.waitUntilResponse ||\r\n                !qq.supportedFeatures.imagePreviews)) {\r\n\r\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\r\n                // if called with a null thumbnailUrl.\r\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\r\n            }\r\n        },\r\n\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\r\n\r\n            this._addToList(id, this.getName(id), true);\r\n            this._templating.hideSpinner(id);\r\n            this._templating.hideCancel(id);\r\n            this._markFileAsSuccessful(id);\r\n\r\n            return id;\r\n        },\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._parent.prototype._setSize.apply(this, arguments);\r\n\r\n            this._templating.updateSize(id, this._formatSize(newSize));\r\n        },\r\n\r\n        _sessionRequestComplete: function() {\r\n            this._templating.addCacheToDom();\r\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\r\n        }\r\n    };\r\n}());\r\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to S3.\n * This module inherits all logic from FineUploader mode and FineUploaderBasicS3 mode and adds some UI-related logic\n * specific to the upload-to-S3 workflow.  Some inherited options and API methods have a special meaning\n * in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from s3.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"s3\");\n\n        if (!qq.supportedFeatures.ajaxUploading && options.iframeSupport.localBlankPagePath === undefined) {\n            this._options.element.innerHTML = \"<div>You MUST set the <code>localBlankPagePath</code> property \" +\n                \"of the <code>iframeSupport</code> option since this browser does not support the File API!</div>\";\n        }\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.s3.FineUploader.prototype, qq.s3.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPrivateApi);\n}());\n"]}