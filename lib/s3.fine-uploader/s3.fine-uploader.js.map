{"version":3,"sources":["?","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/third-party/crypto-js/core.js","../client/js/third-party/crypto-js/enc-base64.js","../client/js/third-party/crypto-js/hmac.js","../client/js/third-party/crypto-js/sha1.js","../client/js/third-party/crypto-js/sha256.js","../client/js/third-party/crypto-js/lib-typedarrays.js","../client/js/s3/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/s3/uploader.basic.js","../client/js/s3/request-signer.worker-manager.js","../client/js/s3/request-signer.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/s3/multipart.initiate.ajax.requester.js","../client/js/s3/multipart.complete.ajax.requester.js","../client/js/s3/multipart.abort.ajax.requester.js","../client/js/s3/s3.xhr.upload.handler.js","../client/js/s3/s3.form.upload.handler.js","s3.fine-uploader.worker-inline.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/s3/uploader.js"],"names":["global","qq","element","hide","style","display","this","attach","type","fn","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","name","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","each","idx","val","push","getFirstByClass","children","child","firstChild","nodeType","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","exec","getAttribute","undefined","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","data","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","length","Uint8Array","character","charCodeAt","log","message","level","console","isObject","variable","Object","prototype","toString","call","isFunction","isArray","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","Array","slice","arguments","newStr","nextIdxToReplace","strBefore","substring","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","toLowerCase","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","error","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","prop","override","target","sourceFn","super_","source","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","retVal","Storage","key","getItem","charAt","bind","oldFunc","context","newArgs","concat","apply","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","match","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","self","disposeSupport","options","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","index","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","params","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","_options","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","callbacks","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","toUpperCase","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","namespace","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","paramsInBody","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partIndex","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","alreadyInWaiting","alreadyInOpen","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","el","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","CryptoJS","C","C_lib","lib","Base","F","overrides","subtype","mixIn","init","$super","instance","properties","propertyName","clone","WordArray","words","sigBytes","encoder","Hex","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","nBytes","C_enc","enc","hexChars","bite","hexStr","hexStrLength","Latin1","latin1Chars","fromCharCode","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","utf8Str","unescape","BufferedBlockAlgorithm","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","_minBufferSize","nWordsReady","nBytesReady","min","_doProcessBlock","processedWords","Hasher","cfg","_doReset","update","messageUpdate","hash","_doFinalize","_createHelper","hasher","_createHmacHelper","C_algo","HMAC","algo","Base64","map","_map","base64Chars","byte1","byte2","byte3","triplet","j","paddingChar","base64Str","base64StrLength","paddingIndex","bits1","bits2","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac","W","SHA1","_hash","M","H","n","t","nBitsTotal","nBitsLeft","floor","HmacSHA1","K","isPrime","sqrtN","factor","getFractionalBits","nPrime","SHA256","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","HmacSHA256","superInit","subInit","typedArray","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","byteOffset","byteLength","typedArrayByteLength","s3","util","ALGORITHM_PARAM_NAME","AWS_PARAM_PREFIX","CREDENTIAL_PARAM_NAME","DATE_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_VALUE","SERVER_SIDE_ENCRYPTION_PARAM_NAME","SERVER_SIDE_ENCRYPTION_PARAM_VALUE","SESSION_TOKEN_PARAM_NAME","V4_ALGORITHM_PARAM_VALUE","V4_SIGNATURE_PARAM_NAME","CASE_SENSITIVE_PARAM_NAMES","UNSIGNABLE_REST_HEADER_NAMES","UNPREFIXED_PARAM_NAMES","getBucket","patterns","bucket","pattern","_getPrefixedParamName","getPolicy","policy","conditions","date","drift","clockDrift","accessKey","acl","expectedStatus","sessionToken","successRedirectUrl","getSuccessRedirectAbsoluteUrl","minFileSize","maxFileSize","reducedRedundancy","region","serverSideEncryption","signatureVersion","expiration","getPolicyExpirationDate","Content-Type","success_action_status","success_action_redirect","getV4CredentialsString","getV4PolicyDate","awsParamName","enforceSizeLimits","refreshPolicyCredentials","newSessionToken","sessionTokenFound","oldCondIdx","oldCondObj","oldCondName","oldCondVal","generateAwsParams","signPolicyCallback","awsParams","customParams","policyJson","AWSAccessKeyId","policyAndSignature","updatedAccessKey","updatedSessionToken","signature","minSize","adjustedMinSize","adjustedMaxSize","adjustedDate","getPolicyDate","getCredentialsDate","getUTCFullYear","getUTCMonth","getUTCDate","_minutesToAdd_","minutesToAdd","pad","setMinutes","getMinutes","toISOString","number","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseIframeResponse","doc","contentWindow","queryString","search","etag","targetAnchorContainer","encodeQueryStringParam","percentEncoded","uriEscape","uriEscapePath","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","objectProperties","host","credentials","secretKey","iframeSupport","localBlankPagePath","onCredentialsExpired","setCredentials","_currentCredentials","_aclStore","_cannedKeys","_cannedBuckets","_buckets","_hosts","getKey","ignoreEmpty","setAcl","aclStore","_determineBucket","getHost","_determineHost","getKeyName","_determineKeyName","maxSizeLimit","oldParams","modifiedParams","paramName","credentialsProvider","onExpired","updateCredentials","_determineObjectPropertyValue","property","maybe","keynameLogic","onGetKeynameFailure","onGetKeynameSuccess","keyname","keynameToUse","_handleKeynameFunction","keynameFunc","successCallback","failureCallback","getResponseHeader","s3Key","s3Bucket","RequestSignerWorkerManager","worker","workerPromises","workerUrl","createS3InlineWorkerUrl","Worker","outstandingRequests","onmessage","resp","generateSignature","task","RequestSigner","thisSignatureRequester","pendingSignatures","expectingPolicy","signatureSpec","generateHeaders","signatureConstructor","getHeaders","Authorization","getRequestDate","getSignedHeaders","getEndOfUrl","v2","getStringToSign","contentMd5","headersStr","endOfUrl","signApiRequest","signatureEffort","headersWordArray","headersHmacSha1","headersHmacSha1Base64","signPolicy","policyStr","policyWordArray","base64Policy","policyHmacSha1","policyHmacSha1Base64","v4","getCanonicalQueryString","endOfUri","queryParamIdx","canonicalQueryString","encodedQueryParams","encodedQueryParamNames","queryStrings","nameAndVal","paramVal","forEach","encodedQueryParamName","getCanonicalRequest","getCanonicalUri","headerNames","hashedContent","getEncodedHashedPayload","workerManager","onloadend","DONE","getScope","canonicalRequest","hashedRequest","scope","stringToSignTemplate","hashed","raw","signedHeaders","headerName","headersPattern","matches","dateKey","dateRegionKey","dateRegionServiceKey","signingKey","credentialPattern","credentialCondition","credential","condition","handleSignatureReceived","responseJson","pendingSignatureData","invalid","getStringToSignArtifacts","requestInfo","toSign","generateStringToSign","headerIndexesToRemove","headerIdx","toSignRaw","REQUEST_TYPE","MULTIPART_ABORT","uploadId","MULTIPART_INITIATE","MULTIPART_COMPLETE","MULTIPART_UPLOAD","partNum","content","Host","determineSignatureClientSide","toBeSigned","updatedHeaders","getToSign","signatureArtifacts","stringToSign","getSignature","queryParams","stringToSignRaw","constructStringToSign","artifacts","theHeaders","withUploadId","theUploadId","withContent","theContent","withContentType","theContentType","withPartNum","thePartNum","toUTCString","_artifacts_","pendingRequests","handleSuccessResponse","successIndicator","failureIndicator","parsedResponse","InitiateMultipartAjaxRequester","pendingInitiateRequests","getContentType","getSignatureAjaxRequester","handleInitiateRequestComplete","domParser","DOMParser","responseDoc","parseFromString","uploadIdElements","messageElements","CompleteMultipartAjaxRequester","pendingCompleteRequests","handleCompleteRequestComplete","bucketEls","keyEls","getCompleteRequestBody","etagEntries","implementation","createDocument","etagEntry","partEl","partNumEl","partNumTextEl","createTextNode","etagTextEl","etagEl","XMLSerializer","serializeToString","AbortMultipartAjaxRequester","handleAbortRequestComplete","errorEls","awsErrorMsg","onGetBucket","onGetHost","onGetKeyName","combine","etagMap","etags","requesters","completeMultipart","initHeaders","urlSafe","restSignature","put","domain","track","setup","uploadIdPromise","initiateMultipart","abortMultipart","policySignature","initParams","toSend","cachedBucket","cachedHost","shouldReset","keyName","encodedKey","parsedErrorProps","parseError","awsResponseXml","parsedDoc","errorDetails","codeEls","messageEls","existedInLocalStorage","baseStorageId","bucketName","isValidResponse","innerHtml","responseData","createForm","handleFinishedUpload","handleUpload","DragAndDrop","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","dropZoneElements","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","FineUploader","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","createDocumentFragment","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","uploader","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"s3.fine-uploader.js","sourcesContent":[null,"/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\r\nqq.version = \"5.14.4\";\r\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\r\nqq.UploadData = function(uploaderProxy) {\r\n    \"use strict\";\r\n\r\n    var data = [],\r\n        byUuid = {},\r\n        byStatus = {},\r\n        byProxyGroupId = {},\r\n        byBatchId = {};\r\n\r\n    function getDataByIds(idOrIds) {\r\n        if (qq.isArray(idOrIds)) {\r\n            var entries = [];\r\n\r\n            qq.each(idOrIds, function(idx, id) {\r\n                entries.push(data[id]);\r\n            });\r\n\r\n            return entries;\r\n        }\r\n\r\n        return data[idOrIds];\r\n    }\r\n\r\n    function getDataByUuids(uuids) {\r\n        if (qq.isArray(uuids)) {\r\n            var entries = [];\r\n\r\n            qq.each(uuids, function(idx, uuid) {\r\n                entries.push(data[byUuid[uuid]]);\r\n            });\r\n\r\n            return entries;\r\n        }\r\n\r\n        return data[byUuid[uuids]];\r\n    }\r\n\r\n    function getDataByStatus(status) {\r\n        var statusResults = [],\r\n            statuses = [].concat(status);\r\n\r\n        qq.each(statuses, function(index, statusEnum) {\r\n            var statusResultIndexes = byStatus[statusEnum];\r\n\r\n            if (statusResultIndexes !== undefined) {\r\n                qq.each(statusResultIndexes, function(i, dataIndex) {\r\n                    statusResults.push(data[dataIndex]);\r\n                });\r\n            }\r\n        });\r\n\r\n        return statusResults;\r\n    }\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Adds a new file to the data cache for tracking purposes.\r\n         *\r\n         * @param spec Data that describes this file.  Possible properties are:\r\n         *\r\n         * - uuid: Initial UUID for this file.\r\n         * - name: Initial name of this file.\r\n         * - size: Size of this file, omit if this cannot be determined\r\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\r\n         * - batchId: ID of the batch this file belongs to\r\n         * - proxyGroupId: ID of the proxy group associated with this file\r\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\r\n         *\r\n         * @returns {number} Internal ID for this file.\r\n         */\r\n        addFile: function(spec) {\r\n            var status = spec.status || qq.status.SUBMITTING,\r\n                id = data.push({\r\n                    name: spec.name,\r\n                    originalName: spec.name,\r\n                    uuid: spec.uuid,\r\n                    size: spec.size == null ? -1 : spec.size,\r\n                    status: status\r\n                }) - 1;\r\n\r\n            if (spec.batchId) {\r\n                data[id].batchId = spec.batchId;\r\n\r\n                if (byBatchId[spec.batchId] === undefined) {\r\n                    byBatchId[spec.batchId] = [];\r\n                }\r\n                byBatchId[spec.batchId].push(id);\r\n            }\r\n\r\n            if (spec.proxyGroupId) {\r\n                data[id].proxyGroupId = spec.proxyGroupId;\r\n\r\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\r\n                    byProxyGroupId[spec.proxyGroupId] = [];\r\n                }\r\n                byProxyGroupId[spec.proxyGroupId].push(id);\r\n            }\r\n\r\n            data[id].id = id;\r\n            byUuid[spec.uuid] = id;\r\n\r\n            if (byStatus[status] === undefined) {\r\n                byStatus[status] = [];\r\n            }\r\n            byStatus[status].push(id);\r\n\r\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\r\n            uploaderProxy.onStatusChange(id, null, status);\r\n\r\n            return id;\r\n        },\r\n\r\n        retrieve: function(optionalFilter) {\r\n            if (qq.isObject(optionalFilter) && data.length)  {\r\n                if (optionalFilter.id !== undefined) {\r\n                    return getDataByIds(optionalFilter.id);\r\n                }\r\n\r\n                else if (optionalFilter.uuid !== undefined) {\r\n                    return getDataByUuids(optionalFilter.uuid);\r\n                }\r\n\r\n                else if (optionalFilter.status) {\r\n                    return getDataByStatus(optionalFilter.status);\r\n                }\r\n            }\r\n            else {\r\n                return qq.extend([], data, true);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            data = [];\r\n            byUuid = {};\r\n            byStatus = {};\r\n            byBatchId = {};\r\n        },\r\n\r\n        setStatus: function(id, newStatus) {\r\n            var oldStatus = data[id].status,\r\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\r\n\r\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\r\n\r\n            data[id].status = newStatus;\r\n\r\n            if (byStatus[newStatus] === undefined) {\r\n                byStatus[newStatus] = [];\r\n            }\r\n            byStatus[newStatus].push(id);\r\n\r\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\r\n        },\r\n\r\n        uuidChanged: function(id, newUuid) {\r\n            var oldUuid = data[id].uuid;\r\n\r\n            data[id].uuid = newUuid;\r\n            byUuid[newUuid] = id;\r\n            delete byUuid[oldUuid];\r\n        },\r\n\r\n        updateName: function(id, newName) {\r\n            data[id].name = newName;\r\n        },\r\n\r\n        updateSize: function(id, newSize) {\r\n            data[id].size = newSize;\r\n        },\r\n\r\n        // Only applicable if this file has a parent that we may want to reference later.\r\n        setParentId: function(targetId, parentId) {\r\n            data[targetId].parentId = parentId;\r\n        },\r\n\r\n        getIdsInProxyGroup: function(id) {\r\n            var proxyGroupId = data[id].proxyGroupId;\r\n\r\n            if (proxyGroupId) {\r\n                return byProxyGroupId[proxyGroupId];\r\n            }\r\n            return [];\r\n        },\r\n\r\n        getIdsInBatch: function(id) {\r\n            var batchId = data[id].batchId;\r\n\r\n            return byBatchId[batchId];\r\n        }\r\n    });\r\n};\r\n\r\nqq.status = {\r\n    SUBMITTING: \"submitting\",\r\n    SUBMITTED: \"submitted\",\r\n    REJECTED: \"rejected\",\r\n    QUEUED: \"queued\",\r\n    CANCELED: \"canceled\",\r\n    PAUSED: \"paused\",\r\n    UPLOADING: \"uploading\",\r\n    UPLOAD_RETRYING: \"retrying upload\",\r\n    UPLOAD_SUCCESSFUL: \"upload successful\",\r\n    UPLOAD_FAILED: \"upload failed\",\r\n    DELETE_FAILED: \"delete failed\",\r\n    DELETING: \"deleting\",\r\n    DELETED: \"deleted\"\r\n};\r\n","/*globals qq*/\r\n/**\r\n * Defines the public API for FineUploaderBasic mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.basePublicApi = {\r\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\r\n        addBlobs: function(blobDataOrArray, params, endpoint) {\r\n            this.addFiles(blobDataOrArray, params, endpoint);\r\n        },\r\n\r\n        addInitialFiles: function(cannedFileList) {\r\n            var self = this;\r\n\r\n            qq.each(cannedFileList, function(index, cannedFile) {\r\n                self._addCannedFile(cannedFile);\r\n            });\r\n        },\r\n\r\n        addFiles: function(data, params, endpoint) {\r\n            this._maybeHandleIos8SafariWorkaround();\r\n\r\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\r\n\r\n                processBlob = qq.bind(function(blob) {\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processBlobData = qq.bind(function(blobData) {\r\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvas = qq.bind(function(canvas) {\r\n                    var blob = qq.canvasToBlob(canvas);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName + \".png\"\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvasData = qq.bind(function(canvasData) {\r\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\r\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: canvasData.name\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processFileOrInput = qq.bind(function(fileOrInput) {\r\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\r\n                        var files = Array.prototype.slice.call(fileOrInput.files),\r\n                            self = this;\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            self._handleNewFile(file, batchId, verifiedFiles);\r\n                        });\r\n                    }\r\n                    else {\r\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\r\n                    }\r\n                }, this),\r\n\r\n                normalizeData = function() {\r\n                    if (qq.isFileList(data)) {\r\n                        data = Array.prototype.slice.call(data);\r\n                    }\r\n                    data = [].concat(data);\r\n                },\r\n\r\n                self = this,\r\n                verifiedFiles = [];\r\n\r\n            this._currentBatchId = batchId;\r\n\r\n            if (data) {\r\n                normalizeData();\r\n\r\n                qq.each(data, function(idx, fileContainer) {\r\n                    if (qq.isFileOrInput(fileContainer)) {\r\n                        processFileOrInput(fileContainer);\r\n                    }\r\n                    else if (qq.isBlob(fileContainer)) {\r\n                        processBlob(fileContainer);\r\n                    }\r\n                    else if (qq.isObject(fileContainer)) {\r\n                        if (fileContainer.blob && fileContainer.name) {\r\n                            processBlobData(fileContainer);\r\n                        }\r\n                        else if (fileContainer.canvas && fileContainer.name) {\r\n                            processCanvasData(fileContainer);\r\n                        }\r\n                    }\r\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\r\n                        processCanvas(fileContainer);\r\n                    }\r\n                    else {\r\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\r\n                    }\r\n                });\r\n\r\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\r\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\r\n            }\r\n        },\r\n\r\n        cancel: function(id) {\r\n            this._handler.cancel(id);\r\n        },\r\n\r\n        cancelAll: function() {\r\n            var storedIdsCopy = [],\r\n                self = this;\r\n\r\n            qq.extend(storedIdsCopy, this._storedIds);\r\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\r\n                self.cancel(storedFileId);\r\n            });\r\n\r\n            this._handler.cancelAll();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._storedIds = [];\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (uploadData.status === qq.status.PAUSED) {\r\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\r\n                this._uploadFile(id);\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        deleteFile: function(id) {\r\n            return this._onSubmitDelete(id);\r\n        },\r\n\r\n        // TODO document?\r\n        doesExist: function(fileOrBlobId) {\r\n            return this._handler.isValid(fileOrBlobId);\r\n        },\r\n\r\n        // Generate a variable size thumbnail on an img or canvas,\r\n        // returning a promise that is fulfilled when the attempt completes.\r\n        // Thumbnail can either be based off of a URL for an image returned\r\n        // by the server in the upload response, or the associated `Blob`.\r\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\r\n            var promiseToReturn = new qq.Promise(),\r\n                fileOrUrl, options;\r\n\r\n            if (this._imageGenerator) {\r\n                fileOrUrl = this._thumbnailUrls[fileId];\r\n                options = {\r\n                    customResizeFunction: customResizeFunction,\r\n                    maxSize: maxSize > 0 ? maxSize : null,\r\n                    scale: maxSize > 0\r\n                };\r\n\r\n                // If client-side preview generation is possible\r\n                // and we are not specifically looking for the image URl returned by the server...\r\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\r\n                    fileOrUrl = this.getFile(fileId);\r\n                }\r\n\r\n                /* jshint eqeqeq:false,eqnull:true */\r\n                if (fileOrUrl == null) {\r\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\r\n                }\r\n                else {\r\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\r\n                        function success(modifiedContainer) {\r\n                            promiseToReturn.success(modifiedContainer);\r\n                        },\r\n\r\n                        function failure(container, reason) {\r\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n            else {\r\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\r\n            }\r\n\r\n            return promiseToReturn;\r\n        },\r\n\r\n        getButton: function(fileId) {\r\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\r\n        },\r\n\r\n        getEndpoint: function(fileId) {\r\n            return this._endpointStore.get(fileId);\r\n        },\r\n\r\n        getFile: function(fileOrBlobId) {\r\n            return this._handler.getFile(fileOrBlobId) || null;\r\n        },\r\n\r\n        getInProgress: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        getName: function(id) {\r\n            return this._uploadData.retrieve({id: id}).name;\r\n        },\r\n\r\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\r\n        getParentId: function(id) {\r\n            var uploadDataEntry = this.getUploads({id: id}),\r\n                parentId = null;\r\n\r\n            if (uploadDataEntry) {\r\n                if (uploadDataEntry.parentId !== undefined) {\r\n                    parentId = uploadDataEntry.parentId;\r\n                }\r\n            }\r\n\r\n            return parentId;\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            return this._handler.getResumableFilesData();\r\n        },\r\n\r\n        getSize: function(id) {\r\n            return this._uploadData.retrieve({id: id}).size;\r\n        },\r\n\r\n        getNetUploads: function() {\r\n            return this._netUploaded;\r\n        },\r\n\r\n        getRemainingAllowedItems: function() {\r\n            var allowedItems = this._currentItemLimit;\r\n\r\n            if (allowedItems > 0) {\r\n                return allowedItems - this._netUploadedOrQueued;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        getUploads: function(optionalFilter) {\r\n            return this._uploadData.retrieve(optionalFilter);\r\n        },\r\n\r\n        getUuid: function(id) {\r\n            return this._uploadData.retrieve({id: id}).uuid;\r\n        },\r\n\r\n        log: function(str, level) {\r\n            if (this._options.debug && (!level || level === \"info\")) {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\r\n            }\r\n            else if (level && level !== \"info\") {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\r\n\r\n            }\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            // Pause only really makes sense if the file is uploading or retrying\r\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\r\n                if (this._handler.pause(id)) {\r\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\r\n                }\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        removeFileRef: function(id) {\r\n            this._handler.expunge(id);\r\n        },\r\n\r\n        reset: function() {\r\n            this.log(\"Resetting uploader...\");\r\n\r\n            this._handler.reset();\r\n            this._storedIds = [];\r\n            this._autoRetries = [];\r\n            this._retryTimeouts = [];\r\n            this._preventRetries = [];\r\n            this._thumbnailUrls = [];\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n\r\n            this._paramsStore.reset();\r\n            this._endpointStore.reset();\r\n            this._netUploadedOrQueued = 0;\r\n            this._netUploaded = 0;\r\n            this._uploadData.reset();\r\n            this._buttonIdsForFileIds = [];\r\n\r\n            this._pasteHandler && this._pasteHandler.reset();\r\n            this._options.session.refreshOnReset && this._refreshSessionData();\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n\r\n            this._totalProgress && this._totalProgress.reset();\r\n        },\r\n\r\n        retry: function(id) {\r\n            return this._manualRetry(id);\r\n        },\r\n\r\n        scaleImage: function(id, specs) {\r\n            var self = this;\r\n\r\n            return qq.Scaler.prototype.scaleImage(id, specs, {\r\n                log: qq.bind(self.log, self),\r\n                getFile: qq.bind(self.getFile, self),\r\n                uploadData: self._uploadData\r\n            });\r\n        },\r\n\r\n        setCustomHeaders: function(headers, id) {\r\n            this._customHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileCustomHeaders: function(headers, id) {\r\n            this._deleteFileCustomHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileEndpoint: function(endpoint, id) {\r\n            this._deleteFileEndpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setDeleteFileParams: function(params, id) {\r\n            this._deleteFileParamsStore.set(params, id);\r\n        },\r\n\r\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\r\n        setEndpoint: function(endpoint, id) {\r\n            this._endpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setForm: function(elementOrId) {\r\n            this._updateFormSupportAndParams(elementOrId);\r\n        },\r\n\r\n        setItemLimit: function(newItemLimit) {\r\n            this._currentItemLimit = newItemLimit;\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            this._uploadData.updateName(id, newName);\r\n        },\r\n\r\n        setParams: function(params, id) {\r\n            this._paramsStore.set(params, id);\r\n        },\r\n\r\n        setUuid: function(id, newUuid) {\r\n            return this._uploadData.uuidChanged(id, newUuid);\r\n        },\r\n\r\n        /**\r\n         * Expose the internal status of a file id to the public api for manual state changes\r\n         * @public\r\n         *\r\n         * @param {Number} id,\r\n         * @param {String} newStatus\r\n         *\r\n         * @todo Implement the remaining methods\r\n         */\r\n        setStatus: function(id, newStatus) {\r\n            var fileRecord = this.getUploads({id: id});\r\n            if (!fileRecord) {\r\n                throw new qq.Error(id + \" is not a valid file ID.\");\r\n            }\r\n\r\n            switch (newStatus) {\r\n                case qq.status.DELETED:\r\n                    this._onDeleteComplete(id, null, false);\r\n                    break;\r\n                case qq.status.DELETE_FAILED:\r\n                    this._onDeleteComplete(id, null, true);\r\n                    break;\r\n                default:\r\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\r\n                    this.log(errorMessage);\r\n                    throw new qq.Error(errorMessage);\r\n            }\r\n        },\r\n\r\n        uploadStoredFiles: function() {\r\n            if (this._storedIds.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n            }\r\n            else {\r\n                this._uploadStoredFiles();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploaderBasic mode.\r\n     */\r\n    qq.basePrivateApi = {\r\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\r\n        _addCannedFile: function(sessionData) {\r\n            var self = this;\r\n\r\n            return this._uploadData.addFile({\r\n                uuid: sessionData.uuid,\r\n                name: sessionData.name,\r\n                size: sessionData.size,\r\n                status: qq.status.UPLOAD_SUCCESSFUL,\r\n                onBeforeStatusChange: function(id) {\r\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\r\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\r\n\r\n                    if (sessionData.thumbnailUrl) {\r\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\r\n                    }\r\n\r\n                    self._netUploaded++;\r\n                    self._netUploadedOrQueued++;\r\n                }\r\n            });\r\n        },\r\n\r\n        _annotateWithButtonId: function(file, associatedInput) {\r\n            if (qq.isFile(file)) {\r\n                file.qqButtonId = this._getButtonId(associatedInput);\r\n            }\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._options.callbacks.onError(null, null, message, undefined);\r\n        },\r\n\r\n        _createDeleteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.DeleteFileAjaxRequester({\r\n                method: this._options.deleteFile.method.toUpperCase(),\r\n                maxConnections: this._options.maxConnections,\r\n                uuidParamName: this._options.request.uuidName,\r\n                customHeaders: this._deleteFileCustomHeadersStore,\r\n                paramsStore: this._deleteFileParamsStore,\r\n                endpointStore: this._deleteFileEndpointStore,\r\n                cors: this._options.cors,\r\n                log: qq.bind(self.log, self),\r\n                onDelete: function(id) {\r\n                    self._onDelete(id);\r\n                    self._options.callbacks.onDelete(id);\r\n                },\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\r\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        _createPasteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.PasteSupport({\r\n                targetElement: this._options.paste.targetElement,\r\n                callbacks: {\r\n                    log: qq.bind(self.log, self),\r\n                    pasteReceived: function(blob) {\r\n                        self._handleCheckedCallback({\r\n                            name: \"onPasteReceived\",\r\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\r\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\r\n                            identifier: \"pasted image\"\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _createStore: function(initialValue, _readOnlyValues_) {\r\n            var store = {},\r\n                catchall = initialValue,\r\n                perIdReadOnlyValues = {},\r\n                readOnlyValues = _readOnlyValues_,\r\n                copy = function(orig) {\r\n                    if (qq.isObject(orig)) {\r\n                        return qq.extend({}, orig);\r\n                    }\r\n                    return orig;\r\n                },\r\n                getReadOnlyValues = function() {\r\n                    if (qq.isFunction(readOnlyValues)) {\r\n                        return readOnlyValues();\r\n                    }\r\n                    return readOnlyValues;\r\n                },\r\n                includeReadOnlyValues = function(id, existing) {\r\n                    if (readOnlyValues && qq.isObject(existing)) {\r\n                        qq.extend(existing, getReadOnlyValues());\r\n                    }\r\n\r\n                    if (perIdReadOnlyValues[id]) {\r\n                        qq.extend(existing, perIdReadOnlyValues[id]);\r\n                    }\r\n                };\r\n\r\n            return {\r\n                set: function(val, id) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id == null) {\r\n                        store = {};\r\n                        catchall = copy(val);\r\n                    }\r\n                    else {\r\n                        store[id] = copy(val);\r\n                    }\r\n                },\r\n\r\n                get: function(id) {\r\n                    var values;\r\n\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id != null && store[id]) {\r\n                        values = store[id];\r\n                    }\r\n                    else {\r\n                        values = copy(catchall);\r\n                    }\r\n\r\n                    includeReadOnlyValues(id, values);\r\n\r\n                    return copy(values);\r\n                },\r\n\r\n                addReadOnly: function(id, values) {\r\n                    // Only applicable to Object stores\r\n                    if (qq.isObject(store)) {\r\n                        // If null ID, apply readonly values to all files\r\n                        if (id === null) {\r\n                            if (qq.isFunction(values)) {\r\n                                readOnlyValues = values;\r\n                            }\r\n                            else {\r\n                                readOnlyValues = readOnlyValues || {};\r\n                                qq.extend(readOnlyValues, values);\r\n                            }\r\n                        }\r\n                        else {\r\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\r\n                            qq.extend(perIdReadOnlyValues[id], values);\r\n                        }\r\n                    }\r\n                },\r\n\r\n                remove: function(fileId) {\r\n                    return delete store[fileId];\r\n                },\r\n\r\n                reset: function() {\r\n                    store = {};\r\n                    perIdReadOnlyValues = {};\r\n                    catchall = initialValue;\r\n                }\r\n            };\r\n        },\r\n\r\n        _createUploadDataTracker: function() {\r\n            var self = this;\r\n\r\n            return new qq.UploadData({\r\n                getName: function(id) {\r\n                    return self.getName(id);\r\n                },\r\n                getUuid: function(id) {\r\n                    return self.getUuid(id);\r\n                },\r\n                getSize: function(id) {\r\n                    return self.getSize(id);\r\n                },\r\n                onStatusChange: function(id, oldStatus, newStatus) {\r\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\r\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\r\n                    self._maybeAllComplete(id, newStatus);\r\n\r\n                    if (self._totalProgress) {\r\n                        setTimeout(function() {\r\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\r\n                        }, 0);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Generate a tracked upload button.\r\n         *\r\n         * @param spec Object containing a required `element` property\r\n         * along with optional `multiple`, `accept`, and `folders`.\r\n         * @returns {qq.UploadButton}\r\n         * @private\r\n         */\r\n        _createUploadButton: function(spec) {\r\n            var self = this,\r\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\r\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\r\n                button;\r\n\r\n            function allowMultiple() {\r\n                if (qq.supportedFeatures.ajaxUploading) {\r\n                    // Workaround for bug in iOS7+ (see #1039)\r\n                    if (self._options.workarounds.iosEmptyVideos &&\r\n                        qq.ios() &&\r\n                        !qq.ios6() &&\r\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\r\n\r\n                        return false;\r\n                    }\r\n\r\n                    if (spec.multiple === undefined) {\r\n                        return self._options.multiple;\r\n                    }\r\n\r\n                    return spec.multiple;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            button = new qq.UploadButton({\r\n                acceptFiles: acceptFiles,\r\n                element: spec.element,\r\n                focusClass: this._options.classes.buttonFocus,\r\n                folders: spec.folders,\r\n                hoverClass: this._options.classes.buttonHover,\r\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\r\n                multiple: allowMultiple(),\r\n                name: this._options.request.inputName,\r\n                onChange: function(input) {\r\n                    self._onInputChange(input);\r\n                },\r\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\r\n            });\r\n\r\n            this._disposeSupport.addDisposer(function() {\r\n                button.dispose();\r\n            });\r\n\r\n            self._buttons.push(button);\r\n\r\n            return button;\r\n        },\r\n\r\n        _createUploadHandler: function(additionalOptions, namespace) {\r\n            var self = this,\r\n                lastOnProgress = {},\r\n                options = {\r\n                    debug: this._options.debug,\r\n                    maxConnections: this._options.maxConnections,\r\n                    cors: this._options.cors,\r\n                    paramsStore: this._paramsStore,\r\n                    endpointStore: this._endpointStore,\r\n                    chunking: this._options.chunking,\r\n                    resume: this._options.resume,\r\n                    blobs: this._options.blobs,\r\n                    log: qq.bind(self.log, self),\r\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\r\n                    onProgress: function(id, name, loaded, total) {\r\n                        if (loaded < 0 || total < 0) {\r\n                            return;\r\n                        }\r\n\r\n                        if (lastOnProgress[id]) {\r\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\r\n                                self._onProgress(id, name, loaded, total);\r\n                                self._options.callbacks.onProgress(id, name, loaded, total);\r\n                            }\r\n                        }\r\n                        else {\r\n                            self._onProgress(id, name, loaded, total);\r\n                            self._options.callbacks.onProgress(id, name, loaded, total);\r\n                        }\r\n\r\n                        lastOnProgress[id] = {loaded: loaded, total: total};\r\n\r\n                    },\r\n                    onComplete: function(id, name, result, xhr) {\r\n                        delete lastOnProgress[id];\r\n\r\n                        var status = self.getUploads({id: id}).status,\r\n                            retVal;\r\n\r\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\r\n                        // invoked by the browser multiple times for the same XHR instance with the same state\r\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\r\n                        // done this.\r\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\r\n                            return;\r\n                        }\r\n\r\n                        retVal = self._onComplete(id, name, result, xhr);\r\n\r\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\r\n                        // until the promise has been fulfilled.\r\n                        if (retVal instanceof  qq.Promise) {\r\n                            retVal.done(function() {\r\n                                self._options.callbacks.onComplete(id, name, result, xhr);\r\n                            });\r\n                        }\r\n                        else {\r\n                            self._options.callbacks.onComplete(id, name, result, xhr);\r\n                        }\r\n                    },\r\n                    onCancel: function(id, name, cancelFinalizationEffort) {\r\n                        var promise = new qq.Promise();\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onCancel\",\r\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\r\n                            onFailure: promise.failure,\r\n                            onSuccess: function() {\r\n                                cancelFinalizationEffort.then(function() {\r\n                                    self._onCancel(id, name);\r\n                                });\r\n\r\n                                promise.success();\r\n                            },\r\n                            identifier: id\r\n                        });\r\n\r\n                        return promise;\r\n                    },\r\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\r\n                    onUpload: function(id, name) {\r\n                        self._onUpload(id, name);\r\n                        self._options.callbacks.onUpload(id, name);\r\n                    },\r\n                    onUploadChunk: function(id, name, chunkData) {\r\n                        self._onUploadChunk(id, chunkData);\r\n                        self._options.callbacks.onUploadChunk(id, name, chunkData);\r\n                    },\r\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\r\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\r\n                    },\r\n                    onResume: function(id, name, chunkData) {\r\n                        return self._options.callbacks.onResume(id, name, chunkData);\r\n                    },\r\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\r\n                        return self._onAutoRetry.apply(self, arguments);\r\n                    },\r\n                    onUuidChanged: function(id, newUuid) {\r\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\r\n                        self.setUuid(id, newUuid);\r\n                    },\r\n                    getName: qq.bind(self.getName, self),\r\n                    getUuid: qq.bind(self.getUuid, self),\r\n                    getSize: qq.bind(self.getSize, self),\r\n                    setSize: qq.bind(self._setSize, self),\r\n                    getDataByUuid: function(uuid) {\r\n                        return self.getUploads({uuid: uuid});\r\n                    },\r\n                    isQueued: function(id) {\r\n                        var status = self.getUploads({id: id}).status;\r\n                        return status === qq.status.QUEUED ||\r\n                            status === qq.status.SUBMITTED ||\r\n                            status === qq.status.UPLOAD_RETRYING ||\r\n                            status === qq.status.PAUSED;\r\n                    },\r\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\r\n                    getIdsInBatch: self._uploadData.getIdsInBatch\r\n                };\r\n\r\n            qq.each(this._options.request, function(prop, val) {\r\n                options[prop] = val;\r\n            });\r\n\r\n            options.customHeaders = this._customHeadersStore;\r\n\r\n            if (additionalOptions) {\r\n                qq.each(additionalOptions, function(key, val) {\r\n                    options[key] = val;\r\n                });\r\n            }\r\n\r\n            return new qq.UploadHandlerController(options, namespace);\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id) {\r\n            this._netUploadedOrQueued--;\r\n            this._uploadData.setStatus(id, qq.status.REJECTED);\r\n        },\r\n\r\n        _formatSize: function(bytes) {\r\n            if (bytes === 0) {\r\n                return bytes + this._options.text.sizeSymbols[0];\r\n            }\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1000;\r\n                i++;\r\n            } while (bytes > 999);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\r\n        },\r\n\r\n        // Creates an internal object that tracks various properties of each extra button,\r\n        // and then actually creates the extra button.\r\n        _generateExtraButtonSpecs: function() {\r\n            var self = this;\r\n\r\n            this._extraButtonSpecs = {};\r\n\r\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\r\n                var multiple = extraButtonOptionEntry.multiple,\r\n                    validation = qq.extend({}, self._options.validation, true),\r\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\r\n\r\n                if (multiple === undefined) {\r\n                    multiple = self._options.multiple;\r\n                }\r\n\r\n                if (extraButtonSpec.validation) {\r\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\r\n                }\r\n\r\n                qq.extend(extraButtonSpec, {\r\n                    multiple: multiple,\r\n                    validation: validation\r\n                }, true);\r\n\r\n                self._initExtraButton(extraButtonSpec);\r\n            });\r\n        },\r\n\r\n        _getButton: function(buttonId) {\r\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            if (extraButtonsSpec) {\r\n                return extraButtonsSpec.element;\r\n            }\r\n            else if (buttonId === this._defaultButtonId) {\r\n                return this._options.button;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the internally used tracking ID for a button.\r\n         *\r\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\r\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\r\n         * @private\r\n         */\r\n        _getButtonId: function(buttonOrFileInputOrFile) {\r\n            var inputs, fileInput,\r\n                fileBlobOrInput = buttonOrFileInputOrFile;\r\n\r\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\r\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\r\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\r\n            }\r\n\r\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\r\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\r\n                if (qq.isFile(fileBlobOrInput)) {\r\n                    return fileBlobOrInput.qqButtonId;\r\n                }\r\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\r\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\r\n\r\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n\r\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\r\n\r\n                qq.each(inputs, function(idx, input) {\r\n                    if (input.getAttribute(\"type\") === \"file\") {\r\n                        fileInput = input;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                if (fileInput) {\r\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n            }\r\n        },\r\n\r\n        _getNotFinished: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED,\r\n                    qq.status.SUBMITTING,\r\n                    qq.status.SUBMITTED,\r\n                    qq.status.PAUSED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        // Get the validation options for this button.  Could be the default validation option\r\n        // or a specific one assigned to this particular button.\r\n        _getValidationBase: function(buttonId) {\r\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\r\n        },\r\n\r\n        _getValidationDescriptor: function(fileWrapper) {\r\n            if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                return {\r\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\r\n                    size: fileWrapper.file.referenceBlob.size\r\n                };\r\n            }\r\n\r\n            return {\r\n                name: this.getUploads({id: fileWrapper.id}).name,\r\n                size: this.getUploads({id: fileWrapper.id}).size\r\n            };\r\n        },\r\n\r\n        _getValidationDescriptors: function(fileWrappers) {\r\n            var self = this,\r\n                fileDescriptors = [];\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\r\n            });\r\n\r\n            return fileDescriptors;\r\n        },\r\n\r\n        // Allows camera access on either the default or an extra button for iOS devices.\r\n        _handleCameraAccess: function() {\r\n            if (this._options.camera.ios && qq.ios()) {\r\n                var acceptIosCamera = \"image/*;capture=camera\",\r\n                    button = this._options.camera.button,\r\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\r\n                    optionRoot = this._options;\r\n\r\n                // If we are not targeting the default button, it is an \"extra\" button\r\n                if (buttonId && buttonId !== this._defaultButtonId) {\r\n                    optionRoot = this._extraButtonSpecs[buttonId];\r\n                }\r\n\r\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\r\n                optionRoot.multiple = false;\r\n\r\n                // update the options\r\n                if (optionRoot.validation.acceptFiles === null) {\r\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\r\n                }\r\n                else {\r\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\r\n                }\r\n\r\n                // update the already-created button\r\n                qq.each(this._buttons, function(idx, button) {\r\n                    if (button.getButtonId() === buttonId) {\r\n                        button.setMultiple(optionRoot.multiple);\r\n                        button.setAcceptFiles(optionRoot.acceptFiles);\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        _handleCheckedCallback: function(details) {\r\n            var self = this,\r\n                callbackRetVal = details.callback();\r\n\r\n            if (qq.isGenericPromise(callbackRetVal)) {\r\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\r\n                return callbackRetVal.then(\r\n                    function(successParam) {\r\n                        self.log(details.name + \" promise success for \" + details.identifier);\r\n                        details.onSuccess(successParam);\r\n                    },\r\n                    function() {\r\n                        if (details.onFailure) {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                            details.onFailure();\r\n                        }\r\n                        else {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            if (callbackRetVal !== false) {\r\n                details.onSuccess(callbackRetVal);\r\n            }\r\n            else {\r\n                if (details.onFailure) {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\r\n                    details.onFailure();\r\n                }\r\n                else {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\r\n                }\r\n            }\r\n\r\n            return callbackRetVal;\r\n        },\r\n\r\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\r\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\r\n            var self = this,\r\n                uuid = qq.getUniqueId(),\r\n                size = -1,\r\n                name = qq.getFilename(file),\r\n                actualFile = file.blob || file,\r\n                handler = this._customNewFileHandler ?\r\n                    this._customNewFileHandler :\r\n                    qq.bind(self._handleNewFileGeneric, self);\r\n\r\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\r\n                size = actualFile.size;\r\n            }\r\n\r\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\r\n                uploadData: self._uploadData,\r\n                paramsStore: self._paramsStore,\r\n                addFileToHandler: function(id, file) {\r\n                    self._handler.add(id, file);\r\n                    self._netUploadedOrQueued++;\r\n                    self._trackButton(id);\r\n                }\r\n            });\r\n        },\r\n\r\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\r\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\r\n\r\n            this._handler.add(id, file);\r\n            this._trackButton(id);\r\n\r\n            this._netUploadedOrQueued++;\r\n\r\n            fileList.push({id: id, file: file});\r\n        },\r\n\r\n        _handlePasteSuccess: function(blob, extSuppliedName) {\r\n            var extension = blob.type.split(\"/\")[1],\r\n                name = extSuppliedName;\r\n\r\n            /*jshint eqeqeq: true, eqnull: true*/\r\n            if (name == null) {\r\n                name = this._options.paste.defaultName;\r\n            }\r\n\r\n            name += \".\" + extension;\r\n\r\n            this.addFiles({\r\n                name: name,\r\n                blob: blob\r\n            });\r\n        },\r\n\r\n        _handleDeleteSuccess: function(id) {\r\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\r\n                var name = this.getName(id);\r\n\r\n                this._netUploadedOrQueued--;\r\n                this._netUploaded--;\r\n                this._handler.expunge(id);\r\n                this._uploadData.setStatus(id, qq.status.DELETED);\r\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\r\n            }\r\n        },\r\n\r\n        _handleDeleteFailed: function(id, xhrOrXdr) {\r\n            var name = this.getName(id);\r\n\r\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\r\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\r\n\r\n            // Check first if xhrOrXdr is actually passed or valid\r\n            // For error reporting, we only have access to the response status if this is not\r\n            // an `XDomainRequest`.\r\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\r\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\r\n            }\r\n            else {\r\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\r\n            }\r\n        },\r\n\r\n        // Creates an extra button element\r\n        _initExtraButton: function(spec) {\r\n            var button = this._createUploadButton({\r\n                accept: spec.validation.acceptFiles,\r\n                allowedExtensions: spec.validation.allowedExtensions,\r\n                element: spec.element,\r\n                folders: spec.folders,\r\n                multiple: spec.multiple,\r\n                title: spec.fileInputTitle\r\n            });\r\n\r\n            this._extraButtonSpecs[button.getButtonId()] = spec;\r\n        },\r\n\r\n        _initFormSupportAndParams: function() {\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n            );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore = this._createStore(\r\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\r\n                );\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\r\n                }\r\n            }\r\n            else {\r\n                this._paramsStore = this._createStore(this._options.request.params);\r\n            }\r\n        },\r\n\r\n        _isDeletePossible: function() {\r\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (this._options.cors.expected) {\r\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\r\n                    return true;\r\n                }\r\n\r\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _isAllowedExtension: function(allowed, fileName) {\r\n            var valid = false;\r\n\r\n            if (!allowed.length) {\r\n                return true;\r\n            }\r\n\r\n            qq.each(allowed, function(idx, allowedExt) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExt)) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\r\n\r\n                    if (fileName.match(extRegex) != null) {\r\n                        valid = true;\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return valid;\r\n        },\r\n\r\n        /**\r\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\r\n         *\r\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\r\n         * @param maybeNameOrNames names of the items that have failed, if applicable\r\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\r\n         * @private\r\n         */\r\n        _itemError: function(code, maybeNameOrNames, item) {\r\n            var message = this._options.messages[code],\r\n                allowedExtensions = [],\r\n                names = [].concat(maybeNameOrNames),\r\n                name = names[0],\r\n                buttonId = this._getButtonId(item),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                extensionsForMessage, placeholderMatch;\r\n\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExtension)) {\r\n                    allowedExtensions.push(allowedExtension);\r\n                }\r\n            });\r\n\r\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\r\n\r\n            r(\"{file}\", this._options.formatFileName(name));\r\n            r(\"{extensions}\", extensionsForMessage);\r\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\r\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\r\n\r\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\r\n            if (placeholderMatch !== null) {\r\n                qq.each(placeholderMatch, function(idx, placeholder) {\r\n                    r(placeholder, names[idx]);\r\n                });\r\n            }\r\n\r\n            this._options.callbacks.onError(null, name, message, undefined);\r\n\r\n            return message;\r\n        },\r\n\r\n        /**\r\n         * Conditionally orders a manual retry of a failed upload.\r\n         *\r\n         * @param id File ID of the failed upload\r\n         * @param callback Optional callback to invoke if a retry is prudent.\r\n         * In lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if a manual retry will occur\r\n         * @private\r\n         */\r\n        _manualRetry: function(id, callback) {\r\n            if (this._onBeforeManualRetry(id)) {\r\n                this._netUploadedOrQueued++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n\r\n                if (callback) {\r\n                    callback(id);\r\n                }\r\n                else {\r\n                    this._handler.retry(id);\r\n                }\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _maybeAllComplete: function(id, status) {\r\n            var self = this,\r\n                notFinished = this._getNotFinished();\r\n\r\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\r\n                this._succeededSinceLastAllComplete.push(id);\r\n            }\r\n            else if (status === qq.status.UPLOAD_FAILED) {\r\n                this._failedSinceLastAllComplete.push(id);\r\n            }\r\n\r\n            if (notFinished === 0 &&\r\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\r\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\r\n                setTimeout(function() {\r\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _maybeHandleIos8SafariWorkaround: function() {\r\n            var self = this;\r\n\r\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\r\n                setTimeout(function() {\r\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\r\n                }, 0);\r\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\r\n            }\r\n        },\r\n\r\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\r\n            // Assuming no one will actually set the response code to something other than 200\r\n            // and still set 'success' to true...\r\n            if (!response.success) {\r\n                if (xhr && xhr.status !== 200 && !response.error) {\r\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\r\n                }\r\n                else {\r\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\r\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\r\n            var self = this;\r\n\r\n            if (items.length > index) {\r\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\r\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\r\n                    setTimeout(function() {\r\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\r\n                            buttonId = self._getButtonId(items[index].file),\r\n                            button = self._getButton(buttonId);\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onValidate\",\r\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\r\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\r\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\r\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\r\n                        });\r\n                    }, 0);\r\n                }\r\n                else if (!validItem) {\r\n                    for (; index < items.length; index++) {\r\n                        self._fileOrBlobRejected(items[index].id);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\r\n\r\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n        },\r\n\r\n        /**\r\n         * Attempt to automatically retry a failed upload.\r\n         *\r\n         * @param id The file ID of the failed upload\r\n         * @param name The name of the file associated with the failed upload\r\n         * @param responseJSON Response from the server, parsed into a javascript object\r\n         * @param xhr Ajax transport used to send the failed request\r\n         * @param callback Optional callback to be invoked if a retry is prudent.\r\n         * Invoked in lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if an auto-retry will occur\r\n         * @private\r\n         */\r\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\r\n            var self = this;\r\n\r\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\r\n\r\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\r\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\r\n\r\n                self._maybeParseAndSendUploadError.apply(self, arguments);\r\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\r\n                self._onBeforeAutoRetry(id, name);\r\n\r\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n                self._retryTimeouts[id] = setTimeout(function() {\r\n                    self.log(\"Starting retry for \" + name + \"...\");\r\n\r\n                    if (callback) {\r\n                        callback(id);\r\n                    }\r\n                    else {\r\n                        self._handler.retry(id);\r\n                    }\r\n                }, retryWaitPeriod);\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id, name) {\r\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            var itemLimit = this._currentItemLimit,\r\n                fileName;\r\n\r\n            if (this._preventRetries[id]) {\r\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\r\n                return false;\r\n            }\r\n            else if (this._handler.isValid(id)) {\r\n                fileName = this.getName(id);\r\n\r\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\r\n                    return false;\r\n                }\r\n\r\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\r\n                    this._itemError(\"retryFailTooManyItems\");\r\n                    return false;\r\n                }\r\n\r\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._netUploadedOrQueued--;\r\n\r\n            clearTimeout(this._retryTimeouts[id]);\r\n\r\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\r\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\r\n                this._storedIds.splice(storedItemIndex, 1);\r\n            }\r\n\r\n            this._uploadData.setStatus(id, qq.status.CANCELED);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            if (!result.success) {\r\n                this._netUploadedOrQueued--;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\r\n\r\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\r\n                    this._preventRetries[id] = true;\r\n                }\r\n            }\r\n            else {\r\n                if (result.thumbnailUrl) {\r\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\r\n                }\r\n\r\n                this._netUploaded++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\r\n            }\r\n\r\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\r\n\r\n            return result.success ? true : false;\r\n        },\r\n\r\n        _onDelete: function(id) {\r\n            this._uploadData.setStatus(id, qq.status.DELETING);\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n            var name = this.getName(id);\r\n\r\n            if (isError) {\r\n                this._handleDeleteFailed(id, xhrOrXdr);\r\n            }\r\n            else {\r\n                this._handleDeleteSuccess(id);\r\n            }\r\n        },\r\n\r\n        _onInputChange: function(input) {\r\n            var fileIndex;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\r\n                    this._annotateWithButtonId(input.files[fileIndex], input);\r\n                }\r\n\r\n                this.addFiles(input.files);\r\n            }\r\n            // Android 2.3.x will fire `onchange` even if no file has been selected\r\n            else if (input.value.length > 0) {\r\n                this.addFiles(input);\r\n            }\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n        },\r\n\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            //nothing to do yet in core uploader\r\n        },\r\n\r\n        _onSubmitCallbackSuccess: function(id, name) {\r\n            this._onSubmit.apply(this, arguments);\r\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\r\n            this._onSubmitted.apply(this, arguments);\r\n\r\n            if (this._options.autoUpload) {\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n                this._uploadFile(id);\r\n            }\r\n            else {\r\n                this._storeForLater(id);\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\r\n            var uuid = this.getUuid(id),\r\n                adjustedOnSuccessCallback;\r\n\r\n            if (onSuccessCallback) {\r\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\r\n            }\r\n\r\n            if (this._isDeletePossible()) {\r\n                this._handleCheckedCallback({\r\n                    name: \"onSubmitDelete\",\r\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\r\n                    onSuccess: adjustedOnSuccessCallback ||\r\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\r\n                    identifier: id\r\n                });\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\r\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitted: function(id) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._options.callbacks.onTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            // nothing to do in the core uploader for now\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\r\n            if (newStatus === qq.status.PAUSED) {\r\n                clearTimeout(this._retryTimeouts[id]);\r\n            }\r\n        },\r\n\r\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\r\n            var self = this;\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                self._fileOrBlobRejected(fileWrapper.id);\r\n            });\r\n        },\r\n\r\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\r\n            var errorMessage,\r\n                itemLimit = this._currentItemLimit,\r\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\r\n\r\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\r\n                if (items.length > 0) {\r\n                    this._handleCheckedCallback({\r\n                        name: \"onValidate\",\r\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\r\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\r\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\r\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\r\n                    });\r\n                }\r\n                else {\r\n                    this._itemError(\"noFilesError\");\r\n                }\r\n            }\r\n            else {\r\n                this._onValidateBatchCallbackFailure(items);\r\n                errorMessage = this._options.messages.tooManyItemsError\r\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\r\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\r\n                this._batchError(errorMessage);\r\n            }\r\n        },\r\n\r\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\r\n            var nextIndex = index + 1;\r\n\r\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\r\n\r\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n        },\r\n\r\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\r\n            var self = this,\r\n                nextIndex = index + 1,\r\n                validationDescriptor = this._getValidationDescriptor(items[index]);\r\n\r\n            this._validateFileOrBlobData(items[index], validationDescriptor)\r\n                .then(\r\n                function() {\r\n                    self._upload(items[index].id, params, endpoint);\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\r\n                },\r\n                function() {\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n                }\r\n            );\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            if (items.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n                return;\r\n            }\r\n\r\n            var validationDescriptors = this._getValidationDescriptors(items),\r\n                buttonId = this._getButtonId(items[0].file),\r\n                button = this._getButton(buttonId);\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onValidateBatch\",\r\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\r\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\r\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\r\n                identifier: \"batch validation\"\r\n            });\r\n        },\r\n\r\n        _preventLeaveInProgress: function() {\r\n            var self = this;\r\n\r\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\r\n                if (self.getInProgress()) {\r\n                    e = e || window.event;\r\n                    // for ie, ff\r\n                    e.returnValue = self._options.messages.onLeave;\r\n                    // for webkit\r\n                    return self._options.messages.onLeave;\r\n                }\r\n            });\r\n        },\r\n\r\n        // Attempts to refresh session data only if the `qq.Session` module exists\r\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\r\n        // callback will be invoked once the refresh is complete.\r\n        _refreshSessionData: function() {\r\n            var self = this,\r\n                options = this._options.session;\r\n\r\n            /* jshint eqnull:true */\r\n            if (qq.Session && this._options.session.endpoint != null) {\r\n                if (!this._session) {\r\n                    qq.extend(options, {cors: this._options.cors});\r\n\r\n                    options.log = qq.bind(this.log, this);\r\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\r\n\r\n                    this._session = new qq.Session(options);\r\n                }\r\n\r\n                setTimeout(function() {\r\n                    self._session.refresh().then(function(response, xhrOrXdr) {\r\n                        self._sessionRequestComplete();\r\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\r\n\r\n                    }, function(response, xhrOrXdr) {\r\n\r\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\r\n                    });\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _sessionRequestComplete: function() {},\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._uploadData.updateSize(id, newSize);\r\n            this._totalProgress && this._totalProgress.onNewSize(id);\r\n        },\r\n\r\n        _shouldAutoRetry: function(id, name, responseJSON) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            /*jshint laxbreak: true */\r\n            if (!this._preventRetries[id]\r\n                && this._options.retry.enableAuto\r\n                && uploadData.status !== qq.status.PAUSED) {\r\n\r\n                if (this._autoRetries[id] === undefined) {\r\n                    this._autoRetries[id] = 0;\r\n                }\r\n\r\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\r\n                    this._autoRetries[id] += 1;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._storedIds.push(id);\r\n        },\r\n\r\n        // Maps a file with the button that was used to select it.\r\n        _trackButton: function(id) {\r\n            var buttonId;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                buttonId = this._handler.getFile(id).qqButtonId;\r\n            }\r\n            else {\r\n                buttonId = this._getButtonId(this._handler.getInput(id));\r\n            }\r\n\r\n            if (buttonId) {\r\n                this._buttonIdsForFileIds[id] = buttonId;\r\n            }\r\n        },\r\n\r\n        _updateFormSupportAndParams: function(formElementOrId) {\r\n            this._options.form.element = formElementOrId;\r\n\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n                );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this.setEndpoint(this._formSupport.newEndpoint);\r\n                }\r\n            }\r\n        },\r\n\r\n        _upload: function(id, params, endpoint) {\r\n            var name = this.getName(id);\r\n\r\n            if (params) {\r\n                this.setParams(params, id);\r\n            }\r\n\r\n            if (endpoint) {\r\n                this.setEndpoint(endpoint, id);\r\n            }\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onSubmit\",\r\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\r\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\r\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\r\n                identifier: id\r\n            });\r\n        },\r\n\r\n        _uploadFile: function(id) {\r\n            if (!this._handler.upload(id)) {\r\n                this._uploadData.setStatus(id, qq.status.QUEUED);\r\n            }\r\n        },\r\n\r\n        _uploadStoredFiles: function() {\r\n            var idToUpload, stillSubmitting,\r\n                self = this;\r\n\r\n            while (this._storedIds.length) {\r\n                idToUpload = this._storedIds.shift();\r\n                this._uploadFile(idToUpload);\r\n            }\r\n\r\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\r\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\r\n            if (stillSubmitting) {\r\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\r\n                setTimeout(function() {\r\n                    self._uploadStoredFiles();\r\n                }, 1000);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs some internal validation checks on an item, defined in the `validation` option.\r\n         *\r\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\r\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\r\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\r\n         * @private\r\n         */\r\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\r\n            var self = this,\r\n                file = (function() {\r\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                        return fileWrapper.file.referenceBlob;\r\n                    }\r\n                    return fileWrapper.file;\r\n                }()),\r\n                name = validationDescriptor.name,\r\n                size = validationDescriptor.size,\r\n                buttonId = this._getButtonId(fileWrapper.file),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                validityChecker = new qq.Promise();\r\n\r\n            validityChecker.then(\r\n                function() {},\r\n                function() {\r\n                    self._fileOrBlobRejected(fileWrapper.id, name);\r\n                });\r\n\r\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\r\n                this._itemError(\"typeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (!this._options.validation.allowEmpty && size === 0) {\r\n                this._itemError(\"emptyError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\r\n                this._itemError(\"sizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && size < validationBase.minSizeLimit) {\r\n                this._itemError(\"minSizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\r\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\r\n                    validityChecker.success,\r\n                    function(errorCode) {\r\n                        self._itemError(errorCode + \"ImageError\", name, file);\r\n                        validityChecker.failure();\r\n                    }\r\n                );\r\n            }\r\n            else {\r\n                validityChecker.success();\r\n            }\r\n\r\n            return validityChecker;\r\n        },\r\n\r\n        _wrapCallbacks: function() {\r\n            var self, safeCallback, prop;\r\n\r\n            self = this;\r\n\r\n            safeCallback = function(name, callback, args) {\r\n                var errorMsg;\r\n\r\n                try {\r\n                    return callback.apply(self, args);\r\n                }\r\n                catch (exception) {\r\n                    errorMsg = exception.message || exception.toString();\r\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\r\n                }\r\n            };\r\n\r\n            /* jshint forin: false, loopfunc: true */\r\n            for (prop in this._options.callbacks) {\r\n                (function() {\r\n                    var callbackName, callbackFunc;\r\n                    callbackName = prop;\r\n                    callbackFunc = self._options.callbacks[callbackName];\r\n                    self._options.callbacks[callbackName] = function() {\r\n                        return safeCallback(callbackName, callbackFunc, arguments);\r\n                    };\r\n                }());\r\n            }\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.FineUploaderBasic = function(o) {\r\n        var self = this;\r\n\r\n        // These options define FineUploaderBasic mode.\r\n        this._options = {\r\n            debug: false,\r\n            button: null,\r\n            multiple: true,\r\n            maxConnections: 3,\r\n            disableCancelForFormUploads: false,\r\n            autoUpload: true,\r\n\r\n            request: {\r\n                customHeaders: {},\r\n                endpoint: \"/server/upload\",\r\n                filenameParam: \"qqfilename\",\r\n                forceMultipart: true,\r\n                inputName: \"qqfile\",\r\n                method: \"POST\",\r\n                params: {},\r\n                paramsInBody: true,\r\n                totalFileSizeName: \"qqtotalfilesize\",\r\n                uuidName: \"qquuid\"\r\n            },\r\n\r\n            validation: {\r\n                allowedExtensions: [],\r\n                sizeLimit: 0,\r\n                minSizeLimit: 0,\r\n                itemLimit: 0,\r\n                stopOnFirstInvalidFile: true,\r\n                acceptFiles: null,\r\n                image: {\r\n                    maxHeight: 0,\r\n                    maxWidth: 0,\r\n                    minHeight: 0,\r\n                    minWidth: 0\r\n                },\r\n                allowEmpty: false\r\n            },\r\n\r\n            callbacks: {\r\n                onSubmit: function(id, name) {},\r\n                onSubmitted: function(id, name) {},\r\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\r\n                onAllComplete: function(successful, failed) {},\r\n                onCancel: function(id, name) {},\r\n                onUpload: function(id, name) {},\r\n                onUploadChunk: function(id, name, chunkData) {},\r\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\r\n                onResume: function(id, fileName, chunkData) {},\r\n                onProgress: function(id, name, loaded, total) {},\r\n                onTotalProgress: function(loaded, total) {},\r\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\r\n                onAutoRetry: function(id, name, attemptNumber) {},\r\n                onManualRetry: function(id, name) {},\r\n                onValidateBatch: function(fileOrBlobData) {},\r\n                onValidate: function(fileOrBlobData) {},\r\n                onSubmitDelete: function(id) {},\r\n                onDelete: function(id) {},\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\r\n                onPasteReceived: function(blob) {},\r\n                onStatusChange: function(id, oldStatus, newStatus) {},\r\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\r\n            },\r\n\r\n            messages: {\r\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\r\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\r\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\r\n                emptyError: \"{file} is empty, please select files again without it.\",\r\n                noFilesError: \"No files to upload.\",\r\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\r\n                maxHeightImageError: \"Image is too tall.\",\r\n                maxWidthImageError: \"Image is too wide.\",\r\n                minHeightImageError: \"Image is not tall enough.\",\r\n                minWidthImageError: \"Image is not wide enough.\",\r\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\r\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\r\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\r\n            },\r\n\r\n            retry: {\r\n                enableAuto: false,\r\n                maxAutoAttempts: 3,\r\n                autoAttemptDelay: 5,\r\n                preventRetryResponseProperty: \"preventRetry\"\r\n            },\r\n\r\n            classes: {\r\n                buttonHover: \"qq-upload-button-hover\",\r\n                buttonFocus: \"qq-upload-button-focus\"\r\n            },\r\n\r\n            chunking: {\r\n                enabled: false,\r\n                concurrent: {\r\n                    enabled: false\r\n                },\r\n                mandatory: false,\r\n                paramNames: {\r\n                    partIndex: \"qqpartindex\",\r\n                    partByteOffset: \"qqpartbyteoffset\",\r\n                    chunkSize: \"qqchunksize\",\r\n                    totalFileSize: \"qqtotalfilesize\",\r\n                    totalParts: \"qqtotalparts\"\r\n                },\r\n                partSize: 2000000,\r\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\r\n                success: {\r\n                    endpoint: null\r\n                }\r\n            },\r\n\r\n            resume: {\r\n                enabled: false,\r\n                recordsExpireIn: 7, //days\r\n                paramNames: {\r\n                    resuming: \"qqresume\"\r\n                }\r\n            },\r\n\r\n            formatFileName: function(fileOrBlobName) {\r\n                return fileOrBlobName;\r\n            },\r\n\r\n            text: {\r\n                defaultResponseError: \"Upload failure reason unknown\",\r\n                fileInputTitle: \"file input\",\r\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\r\n            },\r\n\r\n            deleteFile: {\r\n                enabled: false,\r\n                method: \"DELETE\",\r\n                endpoint: \"/server/upload\",\r\n                customHeaders: {},\r\n                params: {}\r\n            },\r\n\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false,\r\n                allowXdr: false\r\n            },\r\n\r\n            blobs: {\r\n                defaultName: \"misc_data\"\r\n            },\r\n\r\n            paste: {\r\n                targetElement: null,\r\n                defaultName: \"pasted_image\"\r\n            },\r\n\r\n            camera: {\r\n                ios: false,\r\n\r\n                // if ios is true: button is null means target the default button, otherwise target the button specified\r\n                button: null\r\n            },\r\n\r\n            // This refers to additional upload buttons to be handled by Fine Uploader.\r\n            // Each element is an object, containing `element` as the only required\r\n            // property.  The `element` must be a container that will ultimately\r\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\r\n            // Optional properties of each object include `multiple`, `validation`,\r\n            // and `folders`.\r\n            extraButtons: [],\r\n\r\n            // Depends on the session module.  Used to query the server for an initial file list\r\n            // during initialization and optionally after a `reset`.\r\n            session: {\r\n                endpoint: null,\r\n                params: {},\r\n                customHeaders: {},\r\n                refreshOnReset: true\r\n            },\r\n\r\n            // Send parameters associated with an existing form along with the files\r\n            form: {\r\n                // Element ID, HTMLElement, or null\r\n                element: \"qq-form\",\r\n\r\n                // Overrides the base `autoUpload`, unless `element` is null.\r\n                autoUpload: false,\r\n\r\n                // true = upload files on form submission (and squelch submit event)\r\n                interceptSubmit: true\r\n            },\r\n\r\n            // scale images client side, upload a new file for each scaled version\r\n            scaling: {\r\n                customResizer: null,\r\n\r\n                // send the original file as well\r\n                sendOriginal: true,\r\n\r\n                // fox orientation for scaled images\r\n                orient: true,\r\n\r\n                // If null, scaled image type will match reference image type.  This value will be referred to\r\n                // for any size record that does not specific a type.\r\n                defaultType: null,\r\n\r\n                defaultQuality: 80,\r\n\r\n                failureText: \"Failed to scale\",\r\n\r\n                includeExif: false,\r\n\r\n                // metadata about each requested scaled version\r\n                sizes: []\r\n            },\r\n\r\n            workarounds: {\r\n                iosEmptyVideos: true,\r\n                ios8SafariUploads: true,\r\n                ios8BrowserCrash: false\r\n            }\r\n        };\r\n\r\n        // Replace any default options with user defined ones\r\n        qq.extend(this._options, o, true);\r\n\r\n        this._buttons = [];\r\n        this._extraButtonSpecs = {};\r\n        this._buttonIdsForFileIds = [];\r\n\r\n        this._wrapCallbacks();\r\n        this._disposeSupport =  new qq.DisposeSupport();\r\n\r\n        this._storedIds = [];\r\n        this._autoRetries = [];\r\n        this._retryTimeouts = [];\r\n        this._preventRetries = [];\r\n        this._thumbnailUrls = [];\r\n\r\n        this._netUploadedOrQueued = 0;\r\n        this._netUploaded = 0;\r\n        this._uploadData = this._createUploadDataTracker();\r\n\r\n        this._initFormSupportAndParams();\r\n\r\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\r\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\r\n\r\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\r\n\r\n        this._endpointStore = this._createStore(this._options.request.endpoint);\r\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\r\n\r\n        this._handler = this._createUploadHandler();\r\n\r\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\r\n\r\n        if (this._options.button) {\r\n            this._defaultButtonId = this._createUploadButton({\r\n                element: this._options.button,\r\n                title: this._options.text.fileInputTitle\r\n            }).getButtonId();\r\n        }\r\n\r\n        this._generateExtraButtonSpecs();\r\n\r\n        this._handleCameraAccess();\r\n\r\n        if (this._options.paste.targetElement) {\r\n            if (qq.PasteSupport) {\r\n                this._pasteHandler = this._createPasteHandler();\r\n            }\r\n            else {\r\n                this.log(\"Paste support module not found\", \"error\");\r\n            }\r\n        }\r\n\r\n        this._preventLeaveInProgress();\r\n\r\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\r\n        this._refreshSessionData();\r\n\r\n        this._succeededSinceLastAllComplete = [];\r\n        this._failedSinceLastAllComplete = [];\r\n\r\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\r\n        if (this._scaler.enabled) {\r\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\r\n        }\r\n\r\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\r\n            this._totalProgress = new qq.TotalProgress(\r\n                qq.bind(this._onTotalProgress, this),\r\n\r\n                function(id) {\r\n                    var entry = self._uploadData.retrieve({id: id});\r\n                    return (entry && entry.size) || 0;\r\n                }\r\n            );\r\n        }\r\n\r\n        this._currentItemLimit = this._options.validation.itemLimit;\r\n    };\r\n\r\n    // Define the private & public API methods.\r\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\r\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\r\n}());\r\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\r\n/**\r\n * Base upload handler module.  Controls more specific handlers.\r\n *\r\n * @param o Options.  Passed along to the specific handler submodule as well.\r\n * @param namespace [optional] Namespace for the specific handler.\r\n */\r\nqq.UploadHandlerController = function(o, namespace) {\r\n    \"use strict\";\r\n\r\n    var controller = this,\r\n        chunkingPossible = false,\r\n        concurrentChunkingPossible = false,\r\n        chunking, preventRetryResponse, log, handler,\r\n\r\n    options = {\r\n        paramsStore: {},\r\n        maxConnections: 3, // maximum number of concurrent uploads\r\n        chunking: {\r\n            enabled: false,\r\n            multiple: {\r\n                enabled: false\r\n            }\r\n        },\r\n        log: function(str, level) {},\r\n        onProgress: function(id, fileName, loaded, total) {},\r\n        onComplete: function(id, fileName, response, xhr) {},\r\n        onCancel: function(id, fileName) {},\r\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\r\n        onUpload: function(id, fileName) {},\r\n        onUploadChunk: function(id, fileName, chunkData) {},\r\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\r\n        onAutoRetry: function(id, fileName, response, xhr) {},\r\n        onResume: function(id, fileName, chunkData) {},\r\n        onUuidChanged: function(id, newUuid) {},\r\n        getName: function(id) {},\r\n        setSize: function(id, newSize) {},\r\n        isQueued: function(id) {},\r\n        getIdsInProxyGroup: function(id) {},\r\n        getIdsInBatch: function(id) {}\r\n    },\r\n\r\n    chunked = {\r\n        // Called when each chunk has uploaded successfully\r\n        done: function(id, chunkIdx, response, xhr) {\r\n            var chunkData = handler._getChunkData(id, chunkIdx);\r\n\r\n            handler._getFileState(id).attemptingResume = false;\r\n\r\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\r\n            handler._getFileState(id).loaded += chunkData.size;\r\n\r\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\r\n        },\r\n\r\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\r\n        // logic associated with closing out the file, such as combining the chunks.\r\n        finalize: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id);\r\n\r\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\r\n            handler.finalizeChunks(id).then(\r\n                function(response, xhr) {\r\n                    log(\"Finalize successful for \" + id);\r\n\r\n                    var normaizedResponse = upload.normalizeResponse(response, true);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    handler._maybeDeletePersistedChunkData(id);\r\n                    upload.cleanup(id, normaizedResponse, xhr);\r\n                },\r\n                function(response, xhr) {\r\n                    var normaizedResponse = upload.normalizeResponse(response, false);\r\n\r\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\r\n\r\n                    if (normaizedResponse.reset) {\r\n                        chunked.reset(id);\r\n                    }\r\n\r\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\r\n                        upload.cleanup(id, normaizedResponse, xhr);\r\n                    }\r\n                }\r\n            );\r\n        },\r\n\r\n        handleFailure: function(chunkIdx, id, response, xhr) {\r\n            var name = options.getName(id);\r\n\r\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\r\n\r\n            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n            var responseToReport = upload.normalizeResponse(response, false),\r\n                inProgressIdx;\r\n\r\n            if (responseToReport.reset) {\r\n                chunked.reset(id);\r\n            }\r\n            else {\r\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\r\n                if (inProgressIdx >= 0) {\r\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\r\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\r\n                }\r\n            }\r\n\r\n            // We may have aborted all other in-progress chunks for this file due to a failure.\r\n            // If so, ignore the failures associated with those aborts.\r\n            if (!handler._getFileState(id).temp.ignoreFailure) {\r\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\r\n                // chunks since they will be explicitly aborted\r\n                if (concurrentChunkingPossible) {\r\n                    handler._getFileState(id).temp.ignoreFailure = true;\r\n\r\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\r\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\r\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\r\n                        ckXhr.abort();\r\n                        // Flag the transport, in case we are waiting for some other async operation\r\n                        // to complete before attempting to upload the chunk\r\n                        ckXhr._cancelled = true;\r\n                    });\r\n\r\n                    // We must indicate that all aborted chunks are no longer in progress\r\n                    handler.moveInProgressToRemaining(id);\r\n\r\n                    // Free up any connections used by these chunks, but don't allow any\r\n                    // other files to take up the connections (until we have exhausted all auto-retries)\r\n                    connectionManager.free(id, true);\r\n                }\r\n\r\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\r\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\r\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\r\n                    // is a failure or not.\r\n                    upload.cleanup(id, responseToReport, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        hasMoreParts: function(id) {\r\n            return !!handler._getFileState(id).chunking.remaining.length;\r\n        },\r\n\r\n        nextPart: function(id) {\r\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\r\n\r\n            if (nextIdx >= handler._getTotalChunks(id)) {\r\n                nextIdx = null;\r\n            }\r\n\r\n            return nextIdx;\r\n        },\r\n\r\n        reset: function(id) {\r\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\r\n\r\n            handler._maybeDeletePersistedChunkData(id);\r\n            handler.reevaluateChunking(id);\r\n            handler._getFileState(id).loaded = 0;\r\n        },\r\n\r\n        sendNext: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id),\r\n                chunkIdx = chunked.nextPart(id),\r\n                chunkData = handler._getChunkData(id, chunkIdx),\r\n                resuming = handler._getFileState(id).attemptingResume,\r\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\r\n\r\n            if (handler._getFileState(id).loaded == null) {\r\n                handler._getFileState(id).loaded = 0;\r\n            }\r\n\r\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\r\n            if (resuming && options.onResume(id, name, chunkData) === false) {\r\n                chunked.reset(id);\r\n                chunkIdx = chunked.nextPart(id);\r\n                chunkData = handler._getChunkData(id, chunkIdx);\r\n                resuming = false;\r\n            }\r\n\r\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\r\n            if (chunkIdx == null && inProgressChunks.length === 0) {\r\n                chunked.finalize(id);\r\n            }\r\n\r\n            // Send the next chunk\r\n            else {\r\n                log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\r\n                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\r\n                inProgressChunks.push(chunkIdx);\r\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\r\n\r\n                if (concurrentChunkingPossible) {\r\n                    connectionManager.open(id, chunkIdx);\r\n                }\r\n\r\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\r\n                    chunked.sendNext(id);\r\n                }\r\n\r\n                if (chunkData.blob.size === 0) {\r\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\r\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\r\n                }\r\n                else {\r\n                    handler.uploadChunk(id, chunkIdx, resuming).then(\r\n                        // upload chunk success\r\n                        function success(response, xhr) {\r\n                            log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\r\n\r\n                            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n                            var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\r\n                                responseToReport = upload.normalizeResponse(response, true),\r\n                                inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\r\n\r\n                            log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\r\n\r\n                            chunked.done(id, chunkIdx, responseToReport, xhr);\r\n\r\n                            if (inProgressChunkIdx >= 0) {\r\n                                inProgressChunks.splice(inProgressChunkIdx, 1);\r\n                            }\r\n\r\n                            handler._maybePersistChunkedState(id);\r\n\r\n                            if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\r\n                                chunked.finalize(id);\r\n                            }\r\n                            else if (chunked.hasMoreParts(id)) {\r\n                                chunked.sendNext(id);\r\n                            }\r\n                            else {\r\n                                log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\r\n                            }\r\n                        },\r\n\r\n                        // upload chunk failure\r\n                        function failure(response, xhr) {\r\n                            chunked.handleFailure(chunkIdx, id, response, xhr);\r\n                        }\r\n                        )\r\n                        .done(function() {\r\n                            handler.clearXhr(id, chunkIdx);\r\n                        });\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    connectionManager = {\r\n        _open: [],\r\n        _openChunks: {},\r\n        _waiting: [],\r\n\r\n        available: function() {\r\n            var max = options.maxConnections,\r\n                openChunkEntriesCount = 0,\r\n                openChunksCount = 0;\r\n\r\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\r\n                openChunkEntriesCount++;\r\n                openChunksCount += openChunkIndexes.length;\r\n            });\r\n\r\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\r\n        },\r\n\r\n        /**\r\n         * Removes element from queue, starts upload of next\r\n         */\r\n        free: function(id, dontAllowNext) {\r\n            var allowNext = !dontAllowNext,\r\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\r\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\r\n                nextId;\r\n\r\n            delete connectionManager._openChunks[id];\r\n\r\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\r\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\r\n                delete handler._getFileState(id).file;\r\n            }\r\n\r\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\r\n            if (waitingIndex >= 0) {\r\n                connectionManager._waiting.splice(waitingIndex, 1);\r\n            }\r\n            // If this file was consuming a connection, allow the next file to be uploaded\r\n            else if (allowNext && connectionsIndex >= 0) {\r\n                connectionManager._open.splice(connectionsIndex, 1);\r\n\r\n                nextId = connectionManager._waiting.shift();\r\n                if (nextId >= 0) {\r\n                    connectionManager._open.push(nextId);\r\n                    upload.start(nextId);\r\n                }\r\n            }\r\n        },\r\n\r\n        getWaitingOrConnected: function() {\r\n            var waitingOrConnected = [];\r\n\r\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\r\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\r\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\r\n                if (chunks && chunks.length) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // For non-chunked files, only one connection will be consumed per file.\r\n            // This is where we aggregate those file IDs.\r\n            qq.each(connectionManager._open, function(idx, fileId) {\r\n                if (!connectionManager._openChunks[fileId]) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // There may be files waiting for a connection.\r\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\r\n\r\n            return waitingOrConnected;\r\n        },\r\n\r\n        isUsingConnection: function(id) {\r\n            return qq.indexOf(connectionManager._open, id) >= 0;\r\n        },\r\n\r\n        open: function(id, chunkIdx) {\r\n            if (chunkIdx == null) {\r\n                var alreadyInWaiting = qq.indexOf(connectionManager._waiting, id);\r\n                var alreadyInOpen = qq.indexOf(connectionManager._open, id);\r\n                if (alreadyInWaiting === -1 && alreadyInOpen === -1) {\r\n                    connectionManager._waiting.push(id);\r\n                }\r\n            }\r\n\r\n            if (connectionManager.available()) {\r\n                if (chunkIdx == null) {\r\n                    connectionManager._waiting.pop();\r\n                    connectionManager._open.push(id);\r\n                }\r\n                else {\r\n                    (function() {\r\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\r\n                        openChunksEntry.push(chunkIdx);\r\n                        connectionManager._openChunks[id] = openChunksEntry;\r\n                    }());\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        reset: function() {\r\n            connectionManager._waiting = [];\r\n            connectionManager._open = [];\r\n        }\r\n    },\r\n\r\n    simple = {\r\n        send: function(id, name) {\r\n            handler._getFileState(id).loaded = 0;\r\n\r\n            log(\"Sending simple upload request for \" + id);\r\n            handler.uploadFile(id).then(\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request succeeded for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, true),\r\n                        size = options.getSize(id);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    upload.maybeNewUuid(id, responseToReport);\r\n                    upload.cleanup(id, responseToReport, optXhr);\r\n                },\r\n\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request failed for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, false);\r\n\r\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\r\n                        upload.cleanup(id, responseToReport, optXhr);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    },\r\n\r\n    upload = {\r\n        cancel: function(id) {\r\n            log(\"Cancelling \" + id);\r\n            options.paramsStore.remove(id);\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        cleanup: function(id, response, optXhr) {\r\n            var name = options.getName(id);\r\n\r\n            options.onComplete(id, name, response, optXhr);\r\n\r\n            if (handler._getFileState(id)) {\r\n                handler._clearXhrs && handler._clearXhrs(id);\r\n            }\r\n\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\r\n        // if none of these are available for the ID\r\n        getProxyOrBlob: function(id) {\r\n            return (handler.getProxy && handler.getProxy(id)) ||\r\n                (handler.getFile && handler.getFile(id));\r\n        },\r\n\r\n        initHandler: function() {\r\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\r\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\r\n\r\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\r\n                options,\r\n                {\r\n                    getDataByUuid: options.getDataByUuid,\r\n                    getName: options.getName,\r\n                    getSize: options.getSize,\r\n                    getUuid: options.getUuid,\r\n                    log: log,\r\n                    onCancel: options.onCancel,\r\n                    onProgress: options.onProgress,\r\n                    onUuidChanged: options.onUuidChanged\r\n                }\r\n            );\r\n\r\n            if (handler._removeExpiredChunkingRecords) {\r\n                handler._removeExpiredChunkingRecords();\r\n            }\r\n        },\r\n\r\n        isDeferredEligibleForUpload: function(id) {\r\n            return options.isQueued(id);\r\n        },\r\n\r\n        // For Blobs that are part of a group of generated images, along with a reference image,\r\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\r\n        // even if some async processing must be completed on one or more Blobs first.\r\n        maybeDefer: function(id, blob) {\r\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\r\n            // and then submit the upload to the specific handler once the blob is available.\r\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\r\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\r\n\r\n                // Blob creation may take some time, so the caller may want to update the\r\n                // UI to indicate that an operation is in progress, even before the actual\r\n                // upload begins and an onUpload callback is invoked.\r\n                options.onUploadPrep(id);\r\n\r\n                log(\"Attempting to generate a blob on-demand for \" + id);\r\n                blob.create().then(function(generatedBlob) {\r\n                    log(\"Generated an on-demand blob for \" + id);\r\n\r\n                    // Update record associated with this file by providing the generated Blob\r\n                    handler.updateBlob(id, generatedBlob);\r\n\r\n                    // Propagate the size for this generated Blob\r\n                    options.setSize(id, generatedBlob.size);\r\n\r\n                    // Order handler to recalculate chunking possibility, if applicable\r\n                    handler.reevaluateChunking(id);\r\n\r\n                    upload.maybeSendDeferredFiles(id);\r\n                },\r\n\r\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\r\n                function(errorMessage) {\r\n                    var errorResponse = {};\r\n\r\n                    if (errorMessage) {\r\n                        errorResponse.error = errorMessage;\r\n                    }\r\n\r\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\r\n\r\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\r\n                    upload.maybeSendDeferredFiles(id);\r\n                    connectionManager.free(id);\r\n                });\r\n            }\r\n            else {\r\n                return upload.maybeSendDeferredFiles(id);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\r\n        maybeSendDeferredFiles: function(id) {\r\n            var idsInGroup = options.getIdsInProxyGroup(id),\r\n                uploadedThisId = false;\r\n\r\n            if (idsInGroup && idsInGroup.length) {\r\n                log(\"Maybe ready to upload proxy group file \" + id);\r\n\r\n                qq.each(idsInGroup, function(idx, idInGroup) {\r\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\r\n                        uploadedThisId = idInGroup === id;\r\n                        upload.now(idInGroup);\r\n                    }\r\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                uploadedThisId = true;\r\n                upload.now(id);\r\n            }\r\n\r\n            return uploadedThisId;\r\n        },\r\n\r\n        maybeNewUuid: function(id, response) {\r\n            if (response.newUuid !== undefined) {\r\n                options.onUuidChanged(id, response.newUuid);\r\n            }\r\n        },\r\n\r\n        // The response coming from handler implementations may be in various formats.\r\n        // Instead of hoping a promise nested 5 levels deep will always return an object\r\n        // as its first param, let's just normalize the response here.\r\n        normalizeResponse: function(originalResponse, successful) {\r\n            var response = originalResponse;\r\n\r\n            // The passed \"response\" param may not be a response at all.\r\n            // It could be a string, detailing the error, for example.\r\n            if (!qq.isObject(originalResponse)) {\r\n                response = {};\r\n\r\n                if (qq.isString(originalResponse) && !successful) {\r\n                    response.error = originalResponse;\r\n                }\r\n            }\r\n\r\n            response.success = successful;\r\n\r\n            return response;\r\n        },\r\n\r\n        now: function(id) {\r\n            var name = options.getName(id);\r\n\r\n            if (!controller.isValid(id)) {\r\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\r\n            }\r\n\r\n            options.onUpload(id, name);\r\n\r\n            if (chunkingPossible && handler._shouldChunkThisFile(id)) {\r\n                chunked.sendNext(id);\r\n            }\r\n            else {\r\n                simple.send(id, name);\r\n            }\r\n        },\r\n\r\n        start: function(id) {\r\n            var blobToUpload = upload.getProxyOrBlob(id);\r\n\r\n            if (blobToUpload) {\r\n                return upload.maybeDefer(id, blobToUpload);\r\n            }\r\n            else {\r\n                upload.now(id);\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Adds file or file input to the queue\r\n         **/\r\n        add: function(id, file) {\r\n            handler.add.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Sends the file identified by id\r\n         */\r\n        upload: function(id) {\r\n            if (connectionManager.open(id)) {\r\n                return upload.start(id);\r\n            }\r\n            return false;\r\n        },\r\n\r\n        retry: function(id) {\r\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\r\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\r\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\r\n            // any more failures at this point.\r\n            if (concurrentChunkingPossible) {\r\n                handler._getFileState(id).temp.ignoreFailure = false;\r\n            }\r\n\r\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\r\n            // Just go ahead and ask the handler to upload again.\r\n            if (connectionManager.isUsingConnection(id)) {\r\n                return upload.start(id);\r\n            }\r\n\r\n            // If we are attempting to retry a file that is not currently consuming a connection,\r\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\r\n            // before the retry commences.\r\n            else {\r\n                return controller.upload(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels file upload by id\r\n         */\r\n        cancel: function(id) {\r\n            var cancelRetVal = handler.cancel(id);\r\n\r\n            if (qq.isGenericPromise(cancelRetVal)) {\r\n                cancelRetVal.then(function() {\r\n                    upload.cancel(id);\r\n                });\r\n            }\r\n            else if (cancelRetVal !== false) {\r\n                upload.cancel(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels all queued or in-progress uploads\r\n         */\r\n        cancelAll: function() {\r\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\r\n                i;\r\n\r\n            // ensure files are cancelled in reverse order which they were added\r\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\r\n            if (waitingOrConnected.length) {\r\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\r\n                    controller.cancel(waitingOrConnected[i]);\r\n                }\r\n            }\r\n\r\n            connectionManager.reset();\r\n        },\r\n\r\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\r\n        // Undefined if no file record is available.\r\n        getFile: function(id) {\r\n            if (handler.getProxy && handler.getProxy(id)) {\r\n                return handler.getProxy(id).referenceBlob;\r\n            }\r\n\r\n            return handler.getFile && handler.getFile(id);\r\n        },\r\n\r\n        // Returns true if the Blob associated with the ID is related to a proxy s\r\n        isProxied: function(id) {\r\n            return !!(handler.getProxy && handler.getProxy(id));\r\n        },\r\n\r\n        getInput: function(id) {\r\n            if (handler.getInput) {\r\n                return handler.getInput(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            log(\"Resetting upload handler\");\r\n            controller.cancelAll();\r\n            connectionManager.reset();\r\n            handler.reset();\r\n        },\r\n\r\n        expunge: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.expunge(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Determine if the file exists.\r\n         */\r\n        isValid: function(id) {\r\n            return handler.isValid(id);\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            if (handler.getResumableFilesData) {\r\n                return handler.getResumableFilesData();\r\n            }\r\n            return [];\r\n        },\r\n\r\n        /**\r\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\r\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\r\n         * will be undefined.\r\n         *\r\n         * @param id Internal file ID\r\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\r\n         */\r\n        getThirdPartyFileId: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.getThirdPartyFileId(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\r\n         * @param id ID of the upload/file to pause\r\n         * @returns {boolean} true if the upload was paused\r\n         */\r\n        pause: function(id) {\r\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\r\n                connectionManager.free(id);\r\n                handler.moveInProgressToRemaining(id);\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        // True if the file is eligible for pause/resume.\r\n        isResumable: function(id) {\r\n            return !!handler.isResumable && handler.isResumable(id);\r\n        }\r\n    });\r\n\r\n    qq.extend(options, o);\r\n    log = options.log;\r\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\r\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\r\n\r\n    preventRetryResponse = (function() {\r\n        var response = {};\r\n\r\n        response[options.preventRetryParam] = true;\r\n\r\n        return response;\r\n    }());\r\n\r\n    upload.initHandler();\r\n};\r\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id);\n\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now()\n                };\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n/**\r\n * CryptoJS core components.\r\n */\r\nqq.CryptoJS = (function (Math, undefined) {\r\n    /**\r\n     * CryptoJS namespace.\r\n     */\r\n    var C = {};\r\n\r\n    /**\r\n     * Library namespace.\r\n     */\r\n    var C_lib = C.lib = {};\r\n\r\n    /**\r\n     * Base object for prototypal inheritance.\r\n     */\r\n    var Base = C_lib.Base = (function () {\r\n        function F() {}\r\n\r\n        return {\r\n            /**\r\n             * Creates a new object that inherits from this object.\r\n             *\r\n             * @param {Object} overrides Properties to copy into the new object.\r\n             *\r\n             * @return {Object} The new object.\r\n             *\r\n             * @static\r\n             *\r\n             * @example\r\n             *\r\n             *     var MyType = CryptoJS.lib.Base.extend({\r\n             *         field: 'value',\r\n             *\r\n             *         method: function () {\r\n             *         }\r\n             *     });\r\n             */\r\n            extend: function (overrides) {\r\n                // Spawn\r\n                F.prototype = this;\r\n                var subtype = new F();\r\n\r\n                // Augment\r\n                if (overrides) {\r\n                    subtype.mixIn(overrides);\r\n                }\r\n\r\n                // Create default initializer\r\n                if (!subtype.hasOwnProperty('init')) {\r\n                    subtype.init = function () {\r\n                        subtype.$super.init.apply(this, arguments);\r\n                    };\r\n                }\r\n\r\n                // Initializer's prototype is the subtype object\r\n                subtype.init.prototype = subtype;\r\n\r\n                // Reference supertype\r\n                subtype.$super = this;\r\n\r\n                return subtype;\r\n            },\r\n\r\n            /**\r\n             * Extends this object and runs the init method.\r\n             * Arguments to create() will be passed to init().\r\n             *\r\n             * @return {Object} The new object.\r\n             *\r\n             * @static\r\n             *\r\n             * @example\r\n             *\r\n             *     var instance = MyType.create();\r\n             */\r\n            create: function () {\r\n                var instance = this.extend();\r\n                instance.init.apply(instance, arguments);\r\n\r\n                return instance;\r\n            },\r\n\r\n            /**\r\n             * Initializes a newly created object.\r\n             * Override this method to add some logic when your objects are created.\r\n             *\r\n             * @example\r\n             *\r\n             *     var MyType = CryptoJS.lib.Base.extend({\r\n             *         init: function () {\r\n             *             // ...\r\n             *         }\r\n             *     });\r\n             */\r\n            init: function () {\r\n            },\r\n\r\n            /**\r\n             * Copies properties into this object.\r\n             *\r\n             * @param {Object} properties The properties to mix in.\r\n             *\r\n             * @example\r\n             *\r\n             *     MyType.mixIn({\r\n             *         field: 'value'\r\n             *     });\r\n             */\r\n            mixIn: function (properties) {\r\n                for (var propertyName in properties) {\r\n                    if (properties.hasOwnProperty(propertyName)) {\r\n                        this[propertyName] = properties[propertyName];\r\n                    }\r\n                }\r\n\r\n                // IE won't copy toString using the loop above\r\n                if (properties.hasOwnProperty('toString')) {\r\n                    this.toString = properties.toString;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Creates a copy of this object.\r\n             *\r\n             * @return {Object} The clone.\r\n             *\r\n             * @example\r\n             *\r\n             *     var clone = instance.clone();\r\n             */\r\n            clone: function () {\r\n                return this.init.prototype.extend(this);\r\n            }\r\n        };\r\n    }());\r\n\r\n    /**\r\n     * An array of 32-bit words.\r\n     *\r\n     * @property {Array} words The array of 32-bit words.\r\n     * @property {number} sigBytes The number of significant bytes in this word array.\r\n     */\r\n    var WordArray = C_lib.WordArray = Base.extend({\r\n        /**\r\n         * Initializes a newly created word array.\r\n         *\r\n         * @param {Array} words (Optional) An array of 32-bit words.\r\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.lib.WordArray.create();\r\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\r\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\r\n         */\r\n        init: function (words, sigBytes) {\r\n            words = this.words = words || [];\r\n\r\n            if (sigBytes != undefined) {\r\n                this.sigBytes = sigBytes;\r\n            } else {\r\n                this.sigBytes = words.length * 4;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Converts this word array to a string.\r\n         *\r\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\r\n         *\r\n         * @return {string} The stringified word array.\r\n         *\r\n         * @example\r\n         *\r\n         *     var string = wordArray + '';\r\n         *     var string = wordArray.toString();\r\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\r\n         */\r\n        toString: function (encoder) {\r\n            return (encoder || Hex).stringify(this);\r\n        },\r\n\r\n        /**\r\n         * Concatenates a word array to this word array.\r\n         *\r\n         * @param {WordArray} wordArray The word array to append.\r\n         *\r\n         * @return {WordArray} This word array.\r\n         *\r\n         * @example\r\n         *\r\n         *     wordArray1.concat(wordArray2);\r\n         */\r\n        concat: function (wordArray) {\r\n            // Shortcuts\r\n            var thisWords = this.words;\r\n            var thatWords = wordArray.words;\r\n            var thisSigBytes = this.sigBytes;\r\n            var thatSigBytes = wordArray.sigBytes;\r\n\r\n            // Clamp excess bits\r\n            this.clamp();\r\n\r\n            // Concat\r\n            if (thisSigBytes % 4) {\r\n                // Copy one byte at a time\r\n                for (var i = 0; i < thatSigBytes; i++) {\r\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\r\n                }\r\n            } else if (thatWords.length > 0xffff) {\r\n                // Copy one word at a time\r\n                for (var i = 0; i < thatSigBytes; i += 4) {\r\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\r\n                }\r\n            } else {\r\n                // Copy all words at once\r\n                thisWords.push.apply(thisWords, thatWords);\r\n            }\r\n            this.sigBytes += thatSigBytes;\r\n\r\n            // Chainable\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes insignificant bits.\r\n         *\r\n         * @example\r\n         *\r\n         *     wordArray.clamp();\r\n         */\r\n        clamp: function () {\r\n            // Shortcuts\r\n            var words = this.words;\r\n            var sigBytes = this.sigBytes;\r\n\r\n            // Clamp\r\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\r\n            words.length = Math.ceil(sigBytes / 4);\r\n        },\r\n\r\n        /**\r\n         * Creates a copy of this word array.\r\n         *\r\n         * @return {WordArray} The clone.\r\n         *\r\n         * @example\r\n         *\r\n         *     var clone = wordArray.clone();\r\n         */\r\n        clone: function () {\r\n            var clone = Base.clone.call(this);\r\n            clone.words = this.words.slice(0);\r\n\r\n            return clone;\r\n        },\r\n\r\n        /**\r\n         * Creates a word array filled with random bytes.\r\n         *\r\n         * @param {number} nBytes The number of random bytes to generate.\r\n         *\r\n         * @return {WordArray} The random word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\r\n         */\r\n        random: function (nBytes) {\r\n            var words = [];\r\n            for (var i = 0; i < nBytes; i += 4) {\r\n                words.push((Math.random() * 0x100000000) | 0);\r\n            }\r\n\r\n            return new WordArray.init(words, nBytes);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Encoder namespace.\r\n     */\r\n    var C_enc = C.enc = {};\r\n\r\n    /**\r\n     * Hex encoding strategy.\r\n     */\r\n    var Hex = C_enc.Hex = {\r\n        /**\r\n         * Converts a word array to a hex string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The hex string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\r\n         */\r\n        stringify: function (wordArray) {\r\n            // Shortcuts\r\n            var words = wordArray.words;\r\n            var sigBytes = wordArray.sigBytes;\r\n\r\n            // Convert\r\n            var hexChars = [];\r\n            for (var i = 0; i < sigBytes; i++) {\r\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n                hexChars.push((bite >>> 4).toString(16));\r\n                hexChars.push((bite & 0x0f).toString(16));\r\n            }\r\n\r\n            return hexChars.join('');\r\n        },\r\n\r\n        /**\r\n         * Converts a hex string to a word array.\r\n         *\r\n         * @param {string} hexStr The hex string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\r\n         */\r\n        parse: function (hexStr) {\r\n            // Shortcut\r\n            var hexStrLength = hexStr.length;\r\n\r\n            // Convert\r\n            var words = [];\r\n            for (var i = 0; i < hexStrLength; i += 2) {\r\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\r\n            }\r\n\r\n            return new WordArray.init(words, hexStrLength / 2);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Latin1 encoding strategy.\r\n     */\r\n    var Latin1 = C_enc.Latin1 = {\r\n        /**\r\n         * Converts a word array to a Latin1 string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The Latin1 string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\r\n         */\r\n        stringify: function (wordArray) {\r\n            // Shortcuts\r\n            var words = wordArray.words;\r\n            var sigBytes = wordArray.sigBytes;\r\n\r\n            // Convert\r\n            var latin1Chars = [];\r\n            for (var i = 0; i < sigBytes; i++) {\r\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n                latin1Chars.push(String.fromCharCode(bite));\r\n            }\r\n\r\n            return latin1Chars.join('');\r\n        },\r\n\r\n        /**\r\n         * Converts a Latin1 string to a word array.\r\n         *\r\n         * @param {string} latin1Str The Latin1 string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\r\n         */\r\n        parse: function (latin1Str) {\r\n            // Shortcut\r\n            var latin1StrLength = latin1Str.length;\r\n\r\n            // Convert\r\n            var words = [];\r\n            for (var i = 0; i < latin1StrLength; i++) {\r\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            return new WordArray.init(words, latin1StrLength);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * UTF-8 encoding strategy.\r\n     */\r\n    var Utf8 = C_enc.Utf8 = {\r\n        /**\r\n         * Converts a word array to a UTF-8 string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The UTF-8 string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\r\n         */\r\n        stringify: function (wordArray) {\r\n            try {\r\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\r\n            } catch (e) {\r\n                throw new Error('Malformed UTF-8 data');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Converts a UTF-8 string to a word array.\r\n         *\r\n         * @param {string} utf8Str The UTF-8 string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\r\n         */\r\n        parse: function (utf8Str) {\r\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Abstract buffered block algorithm template.\r\n     *\r\n     * The property blockSize must be implemented in a concrete subtype.\r\n     *\r\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\r\n     */\r\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\r\n        /**\r\n         * Resets this block algorithm's data buffer to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     bufferedBlockAlgorithm.reset();\r\n         */\r\n        reset: function () {\r\n            // Initial values\r\n            this._data = new WordArray.init();\r\n            this._nDataBytes = 0;\r\n        },\r\n\r\n        /**\r\n         * Adds new data to this block algorithm's buffer.\r\n         *\r\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\r\n         *\r\n         * @example\r\n         *\r\n         *     bufferedBlockAlgorithm._append('data');\r\n         *     bufferedBlockAlgorithm._append(wordArray);\r\n         */\r\n        _append: function (data) {\r\n            // Convert string to WordArray, else assume WordArray already\r\n            if (typeof data == 'string') {\r\n                data = Utf8.parse(data);\r\n            }\r\n\r\n            // Append\r\n            this._data.concat(data);\r\n            this._nDataBytes += data.sigBytes;\r\n        },\r\n\r\n        /**\r\n         * Processes available data blocks.\r\n         *\r\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\r\n         *\r\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\r\n         *\r\n         * @return {WordArray} The processed data.\r\n         *\r\n         * @example\r\n         *\r\n         *     var processedData = bufferedBlockAlgorithm._process();\r\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\r\n         */\r\n        _process: function (doFlush) {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n            var dataSigBytes = data.sigBytes;\r\n            var blockSize = this.blockSize;\r\n            var blockSizeBytes = blockSize * 4;\r\n\r\n            // Count blocks ready\r\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\r\n            if (doFlush) {\r\n                // Round up to include partial blocks\r\n                nBlocksReady = Math.ceil(nBlocksReady);\r\n            } else {\r\n                // Round down to include only full blocks,\r\n                // less the number of blocks that must remain in the buffer\r\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\r\n            }\r\n\r\n            // Count words ready\r\n            var nWordsReady = nBlocksReady * blockSize;\r\n\r\n            // Count bytes ready\r\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\r\n\r\n            // Process blocks\r\n            if (nWordsReady) {\r\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\r\n                    // Perform concrete-algorithm logic\r\n                    this._doProcessBlock(dataWords, offset);\r\n                }\r\n\r\n                // Remove processed words\r\n                var processedWords = dataWords.splice(0, nWordsReady);\r\n                data.sigBytes -= nBytesReady;\r\n            }\r\n\r\n            // Return processed words\r\n            return new WordArray.init(processedWords, nBytesReady);\r\n        },\r\n\r\n        /**\r\n         * Creates a copy of this object.\r\n         *\r\n         * @return {Object} The clone.\r\n         *\r\n         * @example\r\n         *\r\n         *     var clone = bufferedBlockAlgorithm.clone();\r\n         */\r\n        clone: function () {\r\n            var clone = Base.clone.call(this);\r\n            clone._data = this._data.clone();\r\n\r\n            return clone;\r\n        },\r\n\r\n        _minBufferSize: 0\r\n    });\r\n\r\n    /**\r\n     * Abstract hasher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\r\n     */\r\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\r\n        /**\r\n         * Configuration options.\r\n         */\r\n        cfg: Base.extend(),\r\n\r\n        /**\r\n         * Initializes a newly created hasher.\r\n         *\r\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hasher = CryptoJS.algo.SHA256.create();\r\n         */\r\n        init: function (cfg) {\r\n            // Apply config defaults\r\n            this.cfg = this.cfg.extend(cfg);\r\n\r\n            // Set initial values\r\n            this.reset();\r\n        },\r\n\r\n        /**\r\n         * Resets this hasher to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     hasher.reset();\r\n         */\r\n        reset: function () {\r\n            // Reset data buffer\r\n            BufferedBlockAlgorithm.reset.call(this);\r\n\r\n            // Perform concrete-hasher logic\r\n            this._doReset();\r\n        },\r\n\r\n        /**\r\n         * Updates this hasher with a message.\r\n         *\r\n         * @param {WordArray|string} messageUpdate The message to append.\r\n         *\r\n         * @return {Hasher} This hasher.\r\n         *\r\n         * @example\r\n         *\r\n         *     hasher.update('message');\r\n         *     hasher.update(wordArray);\r\n         */\r\n        update: function (messageUpdate) {\r\n            // Append\r\n            this._append(messageUpdate);\r\n\r\n            // Update the hash\r\n            this._process();\r\n\r\n            // Chainable\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Finalizes the hash computation.\r\n         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n         *\r\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n         *\r\n         * @return {WordArray} The hash.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hash = hasher.finalize();\r\n         *     var hash = hasher.finalize('message');\r\n         *     var hash = hasher.finalize(wordArray);\r\n         */\r\n        finalize: function (messageUpdate) {\r\n            // Final message update\r\n            if (messageUpdate) {\r\n                this._append(messageUpdate);\r\n            }\r\n\r\n            // Perform concrete-hasher logic\r\n            var hash = this._doFinalize();\r\n\r\n            return hash;\r\n        },\r\n\r\n        blockSize: 512/32,\r\n\r\n        /**\r\n         * Creates a shortcut function to a hasher's object interface.\r\n         *\r\n         * @param {Hasher} hasher The hasher to create a helper for.\r\n         *\r\n         * @return {Function} The shortcut function.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\r\n         */\r\n        _createHelper: function (hasher) {\r\n            return function (message, cfg) {\r\n                return new hasher.init(cfg).finalize(message);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Creates a shortcut function to the HMAC's object interface.\r\n         *\r\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\r\n         *\r\n         * @return {Function} The shortcut function.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\r\n         */\r\n        _createHmacHelper: function (hasher) {\r\n            return function (message, key) {\r\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\r\n            };\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Algorithm namespace.\r\n     */\r\n    var C_algo = C.algo = {};\r\n\r\n    return C;\r\n}(Math));\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var C_enc = C.enc;\r\n\r\n    /**\r\n     * Base64 encoding strategy.\r\n     */\r\n    var Base64 = C_enc.Base64 = {\r\n        /**\r\n         * Converts a word array to a Base64 string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The Base64 string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\r\n         */\r\n        stringify: function (wordArray) {\r\n            // Shortcuts\r\n            var words = wordArray.words;\r\n            var sigBytes = wordArray.sigBytes;\r\n            var map = this._map;\r\n\r\n            // Clamp excess bits\r\n            wordArray.clamp();\r\n\r\n            // Convert\r\n            var base64Chars = [];\r\n            for (var i = 0; i < sigBytes; i += 3) {\r\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\r\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\r\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\r\n\r\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\r\n\r\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\r\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\r\n                }\r\n            }\r\n\r\n            // Add padding\r\n            var paddingChar = map.charAt(64);\r\n            if (paddingChar) {\r\n                while (base64Chars.length % 4) {\r\n                    base64Chars.push(paddingChar);\r\n                }\r\n            }\r\n\r\n            return base64Chars.join('');\r\n        },\r\n\r\n        /**\r\n         * Converts a Base64 string to a word array.\r\n         *\r\n         * @param {string} base64Str The Base64 string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\r\n         */\r\n        parse: function (base64Str) {\r\n            // Shortcuts\r\n            var base64StrLength = base64Str.length;\r\n            var map = this._map;\r\n\r\n            // Ignore padding\r\n            var paddingChar = map.charAt(64);\r\n            if (paddingChar) {\r\n                var paddingIndex = base64Str.indexOf(paddingChar);\r\n                if (paddingIndex != -1) {\r\n                    base64StrLength = paddingIndex;\r\n                }\r\n            }\r\n\r\n            // Convert\r\n            var words = [];\r\n            var nBytes = 0;\r\n            for (var i = 0; i < base64StrLength; i++) {\r\n                if (i % 4) {\r\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\r\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\r\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\r\n                    nBytes++;\r\n                }\r\n            }\r\n\r\n            return WordArray.create(words, nBytes);\r\n        },\r\n\r\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\r\n    };\r\n}());\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var Base = C_lib.Base;\r\n    var C_enc = C.enc;\r\n    var Utf8 = C_enc.Utf8;\r\n    var C_algo = C.algo;\r\n\r\n    /**\r\n     * HMAC algorithm.\r\n     */\r\n    var HMAC = C_algo.HMAC = Base.extend({\r\n        /**\r\n         * Initializes a newly created HMAC.\r\n         *\r\n         * @param {Hasher} hasher The hash algorithm to use.\r\n         * @param {WordArray|string} key The secret key.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n         */\r\n        init: function (hasher, key) {\r\n            // Init hasher\r\n            hasher = this._hasher = new hasher.init();\r\n\r\n            // Convert string to WordArray, else assume WordArray already\r\n            if (typeof key == 'string') {\r\n                key = Utf8.parse(key);\r\n            }\r\n\r\n            // Shortcuts\r\n            var hasherBlockSize = hasher.blockSize;\r\n            var hasherBlockSizeBytes = hasherBlockSize * 4;\r\n\r\n            // Allow arbitrary length keys\r\n            if (key.sigBytes > hasherBlockSizeBytes) {\r\n                key = hasher.finalize(key);\r\n            }\r\n\r\n            // Clamp excess bits\r\n            key.clamp();\r\n\r\n            // Clone key for inner and outer pads\r\n            var oKey = this._oKey = key.clone();\r\n            var iKey = this._iKey = key.clone();\r\n\r\n            // Shortcuts\r\n            var oKeyWords = oKey.words;\r\n            var iKeyWords = iKey.words;\r\n\r\n            // XOR keys with pad constants\r\n            for (var i = 0; i < hasherBlockSize; i++) {\r\n                oKeyWords[i] ^= 0x5c5c5c5c;\r\n                iKeyWords[i] ^= 0x36363636;\r\n            }\r\n            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\r\n\r\n            // Set initial values\r\n            this.reset();\r\n        },\r\n\r\n        /**\r\n         * Resets this HMAC to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     hmacHasher.reset();\r\n         */\r\n        reset: function () {\r\n            // Shortcut\r\n            var hasher = this._hasher;\r\n\r\n            // Reset\r\n            hasher.reset();\r\n            hasher.update(this._iKey);\r\n        },\r\n\r\n        /**\r\n         * Updates this HMAC with a message.\r\n         *\r\n         * @param {WordArray|string} messageUpdate The message to append.\r\n         *\r\n         * @return {HMAC} This HMAC instance.\r\n         *\r\n         * @example\r\n         *\r\n         *     hmacHasher.update('message');\r\n         *     hmacHasher.update(wordArray);\r\n         */\r\n        update: function (messageUpdate) {\r\n            this._hasher.update(messageUpdate);\r\n\r\n            // Chainable\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Finalizes the HMAC computation.\r\n         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n         *\r\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n         *\r\n         * @return {WordArray} The HMAC.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hmac = hmacHasher.finalize();\r\n         *     var hmac = hmacHasher.finalize('message');\r\n         *     var hmac = hmacHasher.finalize(wordArray);\r\n         */\r\n        finalize: function (messageUpdate) {\r\n            // Shortcut\r\n            var hasher = this._hasher;\r\n\r\n            // Compute HMAC\r\n            var innerHash = hasher.finalize(messageUpdate);\r\n            hasher.reset();\r\n            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\r\n\r\n            return hmac;\r\n        }\r\n    });\r\n}());\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var Hasher = C_lib.Hasher;\r\n    var C_algo = C.algo;\r\n\r\n    // Reusable object\r\n    var W = [];\r\n\r\n    /**\r\n     * SHA-1 hash algorithm.\r\n     */\r\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\r\n        _doReset: function () {\r\n            this._hash = new WordArray.init([\r\n                0x67452301, 0xefcdab89,\r\n                0x98badcfe, 0x10325476,\r\n                0xc3d2e1f0\r\n            ]);\r\n        },\r\n\r\n        _doProcessBlock: function (M, offset) {\r\n            // Shortcut\r\n            var H = this._hash.words;\r\n\r\n            // Working variables\r\n            var a = H[0];\r\n            var b = H[1];\r\n            var c = H[2];\r\n            var d = H[3];\r\n            var e = H[4];\r\n\r\n            // Computation\r\n            for (var i = 0; i < 80; i++) {\r\n                if (i < 16) {\r\n                    W[i] = M[offset + i] | 0;\r\n                } else {\r\n                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n                    W[i] = (n << 1) | (n >>> 31);\r\n                }\r\n\r\n                var t = ((a << 5) | (a >>> 27)) + e + W[i];\r\n                if (i < 20) {\r\n                    t += ((b & c) | (~b & d)) + 0x5a827999;\r\n                } else if (i < 40) {\r\n                    t += (b ^ c ^ d) + 0x6ed9eba1;\r\n                } else if (i < 60) {\r\n                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\r\n                } else /* if (i < 80) */ {\r\n                    t += (b ^ c ^ d) - 0x359d3e2a;\r\n                }\r\n\r\n                e = d;\r\n                d = c;\r\n                c = (b << 30) | (b >>> 2);\r\n                b = a;\r\n                a = t;\r\n            }\r\n\r\n            // Intermediate hash value\r\n            H[0] = (H[0] + a) | 0;\r\n            H[1] = (H[1] + b) | 0;\r\n            H[2] = (H[2] + c) | 0;\r\n            H[3] = (H[3] + d) | 0;\r\n            H[4] = (H[4] + e) | 0;\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n\r\n            var nBitsTotal = this._nDataBytes * 8;\r\n            var nBitsLeft = data.sigBytes * 8;\r\n\r\n            // Add padding\r\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n            data.sigBytes = dataWords.length * 4;\r\n\r\n            // Hash final blocks\r\n            this._process();\r\n\r\n            // Return final computed hash\r\n            return this._hash;\r\n        },\r\n\r\n        clone: function () {\r\n            var clone = Hasher.clone.call(this);\r\n            clone._hash = this._hash.clone();\r\n\r\n            return clone;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Shortcut function to the hasher's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = CryptoJS.SHA1('message');\r\n     *     var hash = CryptoJS.SHA1(wordArray);\r\n     */\r\n    C.SHA1 = Hasher._createHelper(SHA1);\r\n\r\n    /**\r\n     * Shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = CryptoJS.HmacSHA1(message, key);\r\n     */\r\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\r\n}());\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function (Math) {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var Hasher = C_lib.Hasher;\r\n    var C_algo = C.algo;\r\n\r\n    // Initialization and round constants tables\r\n    var H = [];\r\n    var K = [];\r\n\r\n    // Compute constants\r\n    (function () {\r\n        function isPrime(n) {\r\n            var sqrtN = Math.sqrt(n);\r\n            for (var factor = 2; factor <= sqrtN; factor++) {\r\n                if (!(n % factor)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function getFractionalBits(n) {\r\n            return ((n - (n | 0)) * 0x100000000) | 0;\r\n        }\r\n\r\n        var n = 2;\r\n        var nPrime = 0;\r\n        while (nPrime < 64) {\r\n            if (isPrime(n)) {\r\n                if (nPrime < 8) {\r\n                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\r\n                }\r\n                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\r\n\r\n                nPrime++;\r\n            }\r\n\r\n            n++;\r\n        }\r\n    }());\r\n\r\n    // Reusable object\r\n    var W = [];\r\n\r\n    /**\r\n     * SHA-256 hash algorithm.\r\n     */\r\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\r\n        _doReset: function () {\r\n            this._hash = new WordArray.init(H.slice(0));\r\n        },\r\n\r\n        _doProcessBlock: function (M, offset) {\r\n            // Shortcut\r\n            var H = this._hash.words;\r\n\r\n            // Working variables\r\n            var a = H[0];\r\n            var b = H[1];\r\n            var c = H[2];\r\n            var d = H[3];\r\n            var e = H[4];\r\n            var f = H[5];\r\n            var g = H[6];\r\n            var h = H[7];\r\n\r\n            // Computation\r\n            for (var i = 0; i < 64; i++) {\r\n                if (i < 16) {\r\n                    W[i] = M[offset + i] | 0;\r\n                } else {\r\n                    var gamma0x = W[i - 15];\r\n                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\r\n                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\r\n                                   (gamma0x >>> 3);\r\n\r\n                    var gamma1x = W[i - 2];\r\n                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\r\n                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\r\n                                   (gamma1x >>> 10);\r\n\r\n                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\r\n                }\r\n\r\n                var ch  = (e & f) ^ (~e & g);\r\n                var maj = (a & b) ^ (a & c) ^ (b & c);\r\n\r\n                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\r\n                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\r\n\r\n                var t1 = h + sigma1 + ch + K[i] + W[i];\r\n                var t2 = sigma0 + maj;\r\n\r\n                h = g;\r\n                g = f;\r\n                f = e;\r\n                e = (d + t1) | 0;\r\n                d = c;\r\n                c = b;\r\n                b = a;\r\n                a = (t1 + t2) | 0;\r\n            }\r\n\r\n            // Intermediate hash value\r\n            H[0] = (H[0] + a) | 0;\r\n            H[1] = (H[1] + b) | 0;\r\n            H[2] = (H[2] + c) | 0;\r\n            H[3] = (H[3] + d) | 0;\r\n            H[4] = (H[4] + e) | 0;\r\n            H[5] = (H[5] + f) | 0;\r\n            H[6] = (H[6] + g) | 0;\r\n            H[7] = (H[7] + h) | 0;\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n\r\n            var nBitsTotal = this._nDataBytes * 8;\r\n            var nBitsLeft = data.sigBytes * 8;\r\n\r\n            // Add padding\r\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n            data.sigBytes = dataWords.length * 4;\r\n\r\n            // Hash final blocks\r\n            this._process();\r\n\r\n            // Return final computed hash\r\n            return this._hash;\r\n        },\r\n\r\n        clone: function () {\r\n            var clone = Hasher.clone.call(this);\r\n            clone._hash = this._hash.clone();\r\n\r\n            return clone;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Shortcut function to the hasher's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = CryptoJS.SHA256('message');\r\n     *     var hash = CryptoJS.SHA256(wordArray);\r\n     */\r\n    C.SHA256 = Hasher._createHelper(SHA256);\r\n\r\n    /**\r\n     * Shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = CryptoJS.HmacSHA256(message, key);\r\n     */\r\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\r\n}(Math));\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Check if typed arrays are supported\r\n    if (typeof ArrayBuffer != 'function') {\r\n        return;\r\n    }\r\n\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n\r\n    // Reference original init\r\n    var superInit = WordArray.init;\r\n\r\n    // Augment WordArray.init to handle typed arrays\r\n    var subInit = WordArray.init = function (typedArray) {\r\n        // Convert buffers to uint8\r\n        if (typedArray instanceof ArrayBuffer) {\r\n            typedArray = new Uint8Array(typedArray);\r\n        }\r\n\r\n        // Convert other array views to uint8\r\n        if (\r\n            typedArray instanceof Int8Array ||\r\n            typedArray instanceof Uint8ClampedArray ||\r\n            typedArray instanceof Int16Array ||\r\n            typedArray instanceof Uint16Array ||\r\n            typedArray instanceof Int32Array ||\r\n            typedArray instanceof Uint32Array ||\r\n            typedArray instanceof Float32Array ||\r\n            typedArray instanceof Float64Array\r\n        ) {\r\n            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\r\n        }\r\n\r\n        // Handle Uint8Array\r\n        if (typedArray instanceof Uint8Array) {\r\n            // Shortcut\r\n            var typedArrayByteLength = typedArray.byteLength;\r\n\r\n            // Extract bytes\r\n            var words = [];\r\n            for (var i = 0; i < typedArrayByteLength; i++) {\r\n                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            // Initialize this word array\r\n            superInit.call(this, words, typedArrayByteLength);\r\n        } else {\r\n            // Else call normal init\r\n            superInit.apply(this, arguments);\r\n        }\r\n    };\r\n\r\n    subInit.prototype = WordArray;\r\n}());\r\n","/*globals qq */\r\nqq.s3 = qq.s3 || {};\r\n\r\nqq.s3.util = qq.s3.util || (function() {\r\n    \"use strict\";\r\n\r\n    return {\r\n        ALGORITHM_PARAM_NAME: \"x-amz-algorithm\",\r\n\r\n        AWS_PARAM_PREFIX: \"x-amz-meta-\",\r\n\r\n        CREDENTIAL_PARAM_NAME: \"x-amz-credential\",\r\n\r\n        DATE_PARAM_NAME: \"x-amz-date\",\r\n\r\n        REDUCED_REDUNDANCY_PARAM_NAME: \"x-amz-storage-class\",\r\n        REDUCED_REDUNDANCY_PARAM_VALUE: \"REDUCED_REDUNDANCY\",\r\n\r\n        SERVER_SIDE_ENCRYPTION_PARAM_NAME: \"x-amz-server-side-encryption\",\r\n        SERVER_SIDE_ENCRYPTION_PARAM_VALUE: \"AES256\",\r\n\r\n        SESSION_TOKEN_PARAM_NAME: \"x-amz-security-token\",\r\n\r\n        V4_ALGORITHM_PARAM_VALUE: \"AWS4-HMAC-SHA256\",\r\n\r\n        V4_SIGNATURE_PARAM_NAME: \"x-amz-signature\",\r\n\r\n        CASE_SENSITIVE_PARAM_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\"\r\n        ],\r\n\r\n        UNSIGNABLE_REST_HEADER_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\"\r\n        ],\r\n\r\n        UNPREFIXED_PARAM_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\",\r\n            \"x-amz-server-side-encryption-customer-algorithm\",\r\n            \"x-amz-server-side-encryption-customer-key\",\r\n            \"x-amz-server-side-encryption-customer-key-MD5\"\r\n        ],\r\n\r\n        /**\r\n         * This allows for the region to be specified in the bucket's endpoint URL, or not.\r\n         *\r\n         * Examples of some valid endpoints are:\r\n         *     http://foo.s3.amazonaws.com\r\n         *     https://foo.s3.amazonaws.com\r\n         *     http://foo.s3-ap-northeast-1.amazonaws.com\r\n         *     foo.s3.amazonaws.com\r\n         *     http://foo.bar.com\r\n         *     http://s3.amazonaws.com/foo.bar.com\r\n         * ...etc\r\n         *\r\n         * @param endpoint The bucket's URL.\r\n         * @returns {String || undefined} The bucket name, or undefined if the URL cannot be parsed.\r\n         */\r\n        getBucket: function(endpoint) {\r\n            var patterns = [\r\n                    //bucket in domain\r\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)\\.s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com/i,\r\n                    //bucket in path\r\n                    /^(?:https?:\\/\\/)?s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com\\/([a-z0-9.\\-_]+)/i,\r\n                    //custom domain\r\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)/i\r\n                ],\r\n                bucket;\r\n\r\n            qq.each(patterns, function(idx, pattern) {\r\n                var match = pattern.exec(endpoint);\r\n\r\n                if (match) {\r\n                    bucket = match[1];\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            return bucket;\r\n        },\r\n\r\n        /** Create Prefixed request headers which are appropriate for S3.\r\n         *\r\n         * If the request header is appropriate for S3 (e.g. Cache-Control) then pass\r\n         * it along without a metadata prefix. For all other request header parameter names,\r\n         * apply qq.s3.util.AWS_PARAM_PREFIX before the name.\r\n         * See: http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html\r\n         */\r\n        _getPrefixedParamName: function(name) {\r\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\r\n                return name;\r\n            }\r\n            return qq.s3.util.AWS_PARAM_PREFIX + name;\r\n        },\r\n\r\n        /**\r\n         * Create a policy document to be signed and sent along with the S3 upload request.\r\n         *\r\n         * @param spec Object with properties use to construct the policy document.\r\n         * @returns {Object} Policy doc.\r\n         */\r\n        getPolicy: function(spec) {\r\n            var policy = {},\r\n                conditions = [],\r\n                bucket = spec.bucket,\r\n                date = spec.date,\r\n                drift = spec.clockDrift,\r\n                key = spec.key,\r\n                accessKey = spec.accessKey,\r\n                acl = spec.acl,\r\n                type = spec.type,\r\n                expectedStatus = spec.expectedStatus,\r\n                sessionToken = spec.sessionToken,\r\n                params = spec.params,\r\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\r\n                minFileSize = spec.minFileSize,\r\n                maxFileSize = spec.maxFileSize,\r\n                reducedRedundancy = spec.reducedRedundancy,\r\n                region = spec.region,\r\n                serverSideEncryption = spec.serverSideEncryption,\r\n                signatureVersion = spec.signatureVersion;\r\n\r\n            policy.expiration = qq.s3.util.getPolicyExpirationDate(date, drift);\r\n\r\n            conditions.push({acl: acl});\r\n            conditions.push({bucket: bucket});\r\n\r\n            if (type) {\r\n                conditions.push({\"Content-Type\": type});\r\n            }\r\n\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            if (expectedStatus) {\r\n                conditions.push({success_action_status: expectedStatus.toString()});\r\n            }\r\n\r\n            if (successRedirectUrl) {\r\n                conditions.push({success_action_redirect: successRedirectUrl});\r\n            }\r\n            // jscs:enable\r\n            if (reducedRedundancy) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\r\n            }\r\n\r\n            if (sessionToken) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\r\n            }\r\n\r\n            if (serverSideEncryption) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\r\n            }\r\n\r\n            if (signatureVersion === 2) {\r\n                conditions.push({key: key});\r\n            }\r\n            else if (signatureVersion === 4) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1].key = key;\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.CREDENTIAL_PARAM_NAME] =\r\n                    qq.s3.util.getV4CredentialsString({date: date, key: accessKey, region: region});\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.DATE_PARAM_NAME] =\r\n                    qq.s3.util.getV4PolicyDate(date, drift);\r\n            }\r\n\r\n            // user metadata\r\n            qq.each(params, function(name, val) {\r\n                var awsParamName = qq.s3.util._getPrefixedParamName(name),\r\n                    param = {};\r\n\r\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\r\n                    param[awsParamName] = val;\r\n                }\r\n                else {\r\n                    param[awsParamName] = encodeURIComponent(val);\r\n                }\r\n\r\n                conditions.push(param);\r\n            });\r\n\r\n            policy.conditions = conditions;\r\n\r\n            qq.s3.util.enforceSizeLimits(policy, minFileSize, maxFileSize);\r\n\r\n            return policy;\r\n        },\r\n\r\n        /**\r\n         * Update a previously constructed policy document with updated credentials.  Currently, this only requires we\r\n         * update the session token.  This is only relevant if requests are being signed client-side.\r\n         *\r\n         * @param policy Live policy document\r\n         * @param newSessionToken Updated session token.\r\n         */\r\n        refreshPolicyCredentials: function(policy, newSessionToken) {\r\n            var sessionTokenFound = false;\r\n\r\n            qq.each(policy.conditions, function(oldCondIdx, oldCondObj) {\r\n                qq.each(oldCondObj, function(oldCondName, oldCondVal) {\r\n                    if (oldCondName === qq.s3.util.SESSION_TOKEN_PARAM_NAME) {\r\n                        oldCondObj[oldCondName] = newSessionToken;\r\n                        sessionTokenFound = true;\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (!sessionTokenFound) {\r\n                policy.conditions.push({});\r\n                policy.conditions[policy.conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = newSessionToken;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generates all parameters to be passed along with the S3 upload request.  This includes invoking a callback\r\n         * that is expected to asynchronously retrieve a signature for the policy document.  Note that the server\r\n         * signing the request should reject a \"tainted\" policy document that includes unexpected values, since it is\r\n         * still possible for a malicious user to tamper with these values during policy document generation,\r\n         * before it is sent to the server for signing.\r\n         *\r\n         * @param spec Object with properties: `params`, `type`, `key`, `accessKey`, `acl`, `expectedStatus`, `successRedirectUrl`,\r\n         * `reducedRedundancy`, `region`, `serverSideEncryption`, `version`, and `log()`, along with any options associated with `qq.s3.util.getPolicy()`.\r\n         * @returns {qq.Promise} Promise that will be fulfilled once all parameters have been determined.\r\n         */\r\n        generateAwsParams: function(spec, signPolicyCallback) {\r\n            var awsParams = {},\r\n                customParams = spec.params,\r\n                promise = new qq.Promise(),\r\n                sessionToken = spec.sessionToken,\r\n                drift = spec.clockDrift,\r\n                type = spec.type,\r\n                key = spec.key,\r\n                accessKey = spec.accessKey,\r\n                acl = spec.acl,\r\n                expectedStatus = spec.expectedStatus,\r\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\r\n                reducedRedundancy = spec.reducedRedundancy,\r\n                region = spec.region,\r\n                serverSideEncryption = spec.serverSideEncryption,\r\n                signatureVersion = spec.signatureVersion,\r\n                now = new Date(),\r\n                log = spec.log,\r\n                policyJson;\r\n\r\n            spec.date = now;\r\n            policyJson = qq.s3.util.getPolicy(spec);\r\n\r\n            awsParams.key = key;\r\n\r\n            if (type) {\r\n                awsParams[\"Content-Type\"] = type;\r\n            }\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            if (expectedStatus) {\r\n                awsParams.success_action_status = expectedStatus;\r\n            }\r\n\r\n            if (successRedirectUrl) {\r\n                awsParams.success_action_redirect = successRedirectUrl;\r\n            }\r\n            // jscs:enable\r\n            if (reducedRedundancy) {\r\n                awsParams[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\r\n            }\r\n\r\n            if (serverSideEncryption) {\r\n                awsParams[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\r\n            }\r\n\r\n            if (sessionToken) {\r\n                awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\r\n            }\r\n\r\n            awsParams.acl = acl;\r\n\r\n            // Custom (user-supplied) params must be prefixed with the value of `qq.s3.util.AWS_PARAM_PREFIX`.\r\n            // Params such as Cache-Control or Content-Disposition will not be prefixed.\r\n            // Prefixed param values will be URI encoded as well.\r\n            qq.each(customParams, function(name, val) {\r\n                var awsParamName = qq.s3.util._getPrefixedParamName(name);\r\n\r\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\r\n                    awsParams[awsParamName] = val;\r\n                }\r\n                else {\r\n                    awsParams[awsParamName] = encodeURIComponent(val);\r\n                }\r\n            });\r\n\r\n            if (signatureVersion === 2) {\r\n                awsParams.AWSAccessKeyId = accessKey;\r\n            }\r\n            else if (signatureVersion === 4) {\r\n                awsParams[qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\r\n                awsParams[qq.s3.util.CREDENTIAL_PARAM_NAME] = qq.s3.util.getV4CredentialsString({date: now, key: accessKey, region: region});\r\n                awsParams[qq.s3.util.DATE_PARAM_NAME] = qq.s3.util.getV4PolicyDate(now, drift);\r\n            }\r\n\r\n            // Invoke a promissory callback that should provide us with a base64-encoded policy doc and an\r\n            // HMAC signature for the policy doc.\r\n            signPolicyCallback(policyJson).then(\r\n                function(policyAndSignature, updatedAccessKey, updatedSessionToken) {\r\n                    awsParams.policy = policyAndSignature.policy;\r\n\r\n                    if (spec.signatureVersion === 2) {\r\n                        awsParams.signature = policyAndSignature.signature;\r\n\r\n                        if (updatedAccessKey) {\r\n                            awsParams.AWSAccessKeyId = updatedAccessKey;\r\n                        }\r\n                    }\r\n                    else if (spec.signatureVersion === 4) {\r\n                        awsParams[qq.s3.util.V4_SIGNATURE_PARAM_NAME] = policyAndSignature.signature;\r\n                    }\r\n\r\n                    if (updatedSessionToken) {\r\n                        awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\r\n                    }\r\n\r\n                    promise.success(awsParams);\r\n                },\r\n                function(errorMessage) {\r\n                    errorMessage = errorMessage || \"Can't continue further with request to S3 as we did not receive \" +\r\n                                                   \"a valid signature and policy from the server.\";\r\n\r\n                    log(\"Policy signing failed.  \" + errorMessage, \"error\");\r\n                    promise.failure(errorMessage);\r\n                }\r\n            );\r\n\r\n            return promise;\r\n        },\r\n\r\n        /**\r\n         * Add a condition to an existing S3 upload request policy document used to ensure AWS enforces any size\r\n         * restrictions placed on files server-side.  This is important to do, in case users mess with the client-side\r\n         * checks already in place.\r\n         *\r\n         * @param policy Policy document as an `Object`, with a `conditions` property already attached\r\n         * @param minSize Minimum acceptable size, in bytes\r\n         * @param maxSize Maximum acceptable size, in bytes (0 = unlimited)\r\n         */\r\n        enforceSizeLimits: function(policy, minSize, maxSize) {\r\n            var adjustedMinSize = minSize < 0 ? 0 : minSize,\r\n                // Adjust a maxSize of 0 to the largest possible integer, since we must specify a high and a low in the request\r\n                adjustedMaxSize = maxSize <= 0 ? 9007199254740992 : maxSize;\r\n\r\n            if (minSize > 0 || maxSize > 0) {\r\n                policy.conditions.push([\"content-length-range\", adjustedMinSize.toString(), adjustedMaxSize.toString()]);\r\n            }\r\n        },\r\n\r\n        getPolicyExpirationDate: function(date, drift) {\r\n            var adjustedDate = new Date(date.getTime() + drift);\r\n            return qq.s3.util.getPolicyDate(adjustedDate, 5);\r\n        },\r\n\r\n        getCredentialsDate: function(date) {\r\n            return date.getUTCFullYear() + \"\" +\r\n                (\"0\" + (date.getUTCMonth() + 1)).slice(-2) +\r\n                (\"0\" + date.getUTCDate()).slice(-2);\r\n        },\r\n\r\n        getPolicyDate: function(date, _minutesToAdd_) {\r\n            var minutesToAdd = _minutesToAdd_ || 0,\r\n                pad, r;\r\n\r\n            /*jshint -W014 */\r\n            // Is this going to be a problem if we encounter this moments before 2 AM just before daylight savings time ends?\r\n            date.setMinutes(date.getMinutes() + (minutesToAdd || 0));\r\n\r\n            if (Date.prototype.toISOString) {\r\n                return date.toISOString();\r\n            }\r\n            else {\r\n                pad = function(number) {\r\n                    r = String(number);\r\n\r\n                    if (r.length === 1) {\r\n                        r = \"0\" + r;\r\n                    }\r\n\r\n                    return r;\r\n                };\r\n\r\n                return date.getUTCFullYear()\r\n                    + \"-\" + pad(date.getUTCMonth() + 1)\r\n                    + \"-\" + pad(date.getUTCDate())\r\n                    + \"T\" + pad(date.getUTCHours())\r\n                    + \":\" + pad(date.getUTCMinutes())\r\n                    + \":\" + pad(date.getUTCSeconds())\r\n                    + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\r\n                    + \"Z\";\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Looks at a response from S3 contained in an iframe and parses the query string in an attempt to identify\r\n         * the associated resource.\r\n         *\r\n         * @param iframe Iframe containing response\r\n         * @returns {{bucket: *, key: *, etag: *}}\r\n         */\r\n        parseIframeResponse: function(iframe) {\r\n            var doc = iframe.contentDocument || iframe.contentWindow.document,\r\n                queryString = doc.location.search,\r\n                match = /bucket=(.+)&key=(.+)&etag=(.+)/.exec(queryString);\r\n\r\n            if (match) {\r\n                return {\r\n                    bucket: match[1],\r\n                    key: match[2],\r\n                    etag: match[3].replace(/%22/g, \"\")\r\n                };\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param successRedirectUrl Relative or absolute location of success redirect page\r\n         * @returns {*|string} undefined if the parameter is undefined, otherwise the absolute location of the success redirect page\r\n         */\r\n        getSuccessRedirectAbsoluteUrl: function(successRedirectUrl) {\r\n            if (successRedirectUrl) {\r\n                var targetAnchorContainer = document.createElement(\"div\"),\r\n                    targetAnchor;\r\n\r\n                if (qq.ie7()) {\r\n                    // Note that we must make use of `innerHTML` for IE7 only instead of simply creating an anchor via\r\n                    // `document.createElement('a')` and setting the `href` attribute.  The latter approach does not allow us to\r\n                    // obtain an absolute URL in IE7 if the `endpoint` is a relative URL.\r\n                    targetAnchorContainer.innerHTML = \"<a href='\" + successRedirectUrl + \"'></a>\";\r\n                    targetAnchor = targetAnchorContainer.firstChild;\r\n                    return targetAnchor.href;\r\n                }\r\n                else {\r\n                    // IE8 and IE9 do not seem to derive an absolute URL from a relative URL using the `innerHTML`\r\n                    // approach above, so we'll just create an anchor this way and set it's `href` attribute.\r\n                    // Due to yet another quirk in IE8 and IE9, we have to set the `href` equal to itself\r\n                    // in order to ensure relative URLs will be properly parsed.\r\n                    targetAnchor = document.createElement(\"a\");\r\n                    targetAnchor.href = successRedirectUrl;\r\n                    targetAnchor.href = targetAnchor.href;\r\n                    return targetAnchor.href;\r\n                }\r\n            }\r\n        },\r\n\r\n        getV4CredentialsString: function(spec) {\r\n            return spec.key + \"/\" +\r\n                qq.s3.util.getCredentialsDate(spec.date) + \"/\" +\r\n                spec.region + \"/s3/aws4_request\";\r\n        },\r\n\r\n        getV4PolicyDate: function(date, drift) {\r\n            var adjustedDate = new Date(date.getTime() + drift);\r\n\r\n            return qq.s3.util.getCredentialsDate(adjustedDate) + \"T\" +\r\n                    (\"0\" + adjustedDate.getUTCHours()).slice(-2) +\r\n                    (\"0\" + adjustedDate.getUTCMinutes()).slice(-2) +\r\n                    (\"0\" + adjustedDate.getUTCSeconds()).slice(-2) +\r\n                    \"Z\";\r\n        },\r\n\r\n        // AWS employs a strict interpretation of [RFC 3986](http://tools.ietf.org/html/rfc3986#page-12).\r\n        // So, we must ensure all reserved characters listed in the spec are percent-encoded,\r\n        // and spaces are replaced with \"+\".\r\n        encodeQueryStringParam: function(param) {\r\n            var percentEncoded = encodeURIComponent(param);\r\n\r\n            // %-encode characters not handled by `encodeURIComponent` (to follow RFC 3986)\r\n            percentEncoded = percentEncoded.replace(/[!'()]/g, escape);\r\n\r\n            // %-encode characters not handled by `escape` (to follow RFC 3986)\r\n            percentEncoded = percentEncoded.replace(/\\*/g, \"%2A\");\r\n\r\n            // replace percent-encoded spaces with a \"+\"\r\n            return percentEncoded.replace(/%20/g, \"+\");\r\n        },\r\n        /**\r\n         * Escapes url part as for AWS requirements\r\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\r\n         */\r\n        uriEscape: function(string) {\r\n            var output = encodeURIComponent(string);\r\n            output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);\r\n            output = output.replace(/[*]/g, function(ch) {\r\n                return \"%\" + ch.charCodeAt(0).toString(16).toUpperCase();\r\n            });\r\n            return output;\r\n        },\r\n        /**\r\n         * Escapes a path as for AWS requirement\r\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\r\n         */\r\n        uriEscapePath: function(path) {\r\n            var parts = [];\r\n            qq.each(path.split(\"/\"), function(idx, item) {\r\n                parts.push(qq.s3.util.uriEscape(item));\r\n            });\r\n            return parts.join(\"/\");\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to S3.\n * Some inherited options and API methods have a special meaning in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploaderBasic = function(o) {\n        var options = {\n            request: {\n                // public key (required for server-side signing, ignored if `credentials` have been provided)\n                accessKey: null,\n\n                // padding, in milliseconds, to add to the x-amz-date header & the policy expiration date\n                clockDrift: 0\n            },\n\n            objectProperties: {\n                acl: \"private\",\n\n                // string or a function which may be promissory\n                bucket: qq.bind(function(id) {\n                    return qq.s3.util.getBucket(this.getEndpoint(id));\n                }, this),\n\n                // string or a function which may be promissory - only used for V4 multipart uploads\n                host: qq.bind(function(id) {\n                    return (/(?:http|https):\\/\\/(.+)(?:\\/.+)?/).exec(this._endpointStore.get(id))[1];\n                }, this),\n\n                // 'uuid', 'filename', or a function which may be promissory\n                key: \"uuid\",\n\n                reducedRedundancy: false,\n\n                // Defined at http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\n                region: \"us-east-1\",\n\n                serverSideEncryption: false\n            },\n\n            credentials: {\n                // Public key (required).\n                accessKey: null,\n                // Private key (required).\n                secretKey: null,\n                // Expiration date for the credentials (required).  May be an ISO string or a `Date`.\n                expiration: null,\n                // Temporary credentials session token.\n                // Only required for temporary credentials obtained via AssumeRoleWithWebIdentity.\n                sessionToken: null\n            },\n\n            // All but `version` are ignored if `credentials` is provided.\n            signature: {\n                customHeaders: {},\n                endpoint: null,\n                version: 2\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            // required if non-File-API browsers, such as IE9 and older, are used\n            iframeSupport: {\n                localBlankPagePath: null\n            },\n\n            chunking: {\n                // minimum part size is 5 MiB when uploading to S3\n                partSize: 5242880\n            },\n\n            cors: {\n                allowXdr: true\n            },\n\n            callbacks: {\n                onCredentialsExpired: function() {}\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        if (!this.setCredentials(options.credentials, true)) {\n            this._currentCredentials.accessKey = options.request.accessKey;\n        }\n\n        this._aclStore = this._createStore(options.objectProperties.acl);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds S3 keys for file representations constructed from a session request.\n        this._cannedKeys = {};\n        // Holds S3 buckets for file representations constructed from a session request.\n        this._cannedBuckets = {};\n\n        this._buckets = {};\n        this._hosts = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, {\n        getBucket: function(id) {\n            if (this._cannedBuckets[id] == null) {\n                return this._buckets[id];\n            }\n            return this._cannedBuckets[id];\n        },\n\n        /**\n         * @param id File ID\n         * @returns {*} Key name associated w/ the file, if one exists\n         */\n        getKey: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedKeys[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n\n            return this._cannedKeys[id];\n        },\n\n        /**\n         * Override the parent's reset function to cleanup various S3-related items.\n         */\n        reset: function() {\n            qq.FineUploaderBasic.prototype.reset.call(this);\n            this._failedSuccessRequestCallbacks = [];\n            this._buckets = {};\n            this._hosts = {};\n        },\n\n        setCredentials: function(credentials, ignoreEmpty) {\n            if (credentials && credentials.secretKey) {\n                if (!credentials.accessKey) {\n                    throw new qq.Error(\"Invalid credentials: no accessKey\");\n                }\n                else if (!credentials.expiration) {\n                    throw new qq.Error(\"Invalid credentials: no expiration\");\n                }\n                else {\n                    this._currentCredentials = qq.extend({}, credentials);\n\n                    // Ensure expiration is a `Date`.  If initially a string, assuming it is in ISO format.\n                    if (qq.isString(credentials.expiration)) {\n                        this._currentCredentials.expiration = new Date(credentials.expiration);\n                    }\n                }\n\n                return true;\n            }\n            else if (!ignoreEmpty) {\n                throw new qq.Error(\"Invalid credentials parameter!\");\n            }\n            else {\n                this._currentCredentials = {};\n            }\n        },\n\n        setAcl: function(acl, id) {\n            this._aclStore.set(acl, id);\n        },\n\n        /**\n         * Ensures the parent's upload handler creator passes any additional S3-specific options to the handler as well\n         * as information required to instantiate the specific handler based on the current browser's capabilities.\n         *\n         * @returns {qq.UploadHandlerController}\n         * @private\n         */\n        _createUploadHandler: function() {\n            var self = this,\n                additionalOptions = {\n                    aclStore: this._aclStore,\n                    getBucket: qq.bind(this._determineBucket, this),\n                    getHost: qq.bind(this._determineHost, this),\n                    getKeyName: qq.bind(this._determineKeyName, this),\n                    iframeSupport: this._options.iframeSupport,\n                    objectProperties: this._options.objectProperties,\n                    signature: this._options.signature,\n                    clockDrift: this._options.request.clockDrift,\n                    // pass size limit validation values to include in the request so AWS enforces this server-side\n                    validation: {\n                        minSizeLimit: this._options.validation.minSizeLimit,\n                        maxSizeLimit: this._options.validation.sizeLimit\n                    }\n                };\n\n            // We assume HTTP if it is missing from the start of the endpoint string.\n            qq.override(this._endpointStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var endpoint = super_.get(id);\n                        if (typeof endpoint === 'function') {\n                            endpoint = endpoint(id);\n                        }\n                        if (endpoint.indexOf(\"http\") < 0) {\n                            return \"http://\" + endpoint;\n                        }\n\n                        return endpoint;\n                    }\n                };\n            });\n\n            // Some param names should be lower case to avoid signature mismatches\n            qq.override(this._paramsStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var oldParams = super_.get(id),\n                            modifiedParams = {};\n\n                        qq.each(oldParams, function(name, val) {\n                            var paramName = name;\n\n                            if (qq.indexOf(qq.s3.util.CASE_SENSITIVE_PARAM_NAMES, paramName) < 0) {\n                                paramName = paramName.toLowerCase();\n                            }\n\n                            modifiedParams[paramName] = qq.isFunction(val) ? val() : val;\n                        });\n\n                        return modifiedParams;\n                    }\n                };\n            });\n\n            additionalOptions.signature.credentialsProvider = {\n                get: function() {\n                    return self._currentCredentials;\n                },\n\n                onExpired: function() {\n                    var updateCredentials = new qq.Promise(),\n                        callbackRetVal = self._options.callbacks.onCredentialsExpired();\n\n                    if (qq.isGenericPromise(callbackRetVal)) {\n                        callbackRetVal.then(function(credentials) {\n                            try {\n                                self.setCredentials(credentials);\n                                updateCredentials.success();\n                            }\n                            catch (error) {\n                                self.log(\"Invalid credentials returned from onCredentialsExpired callback! (\" + error.message + \")\", \"error\");\n                                updateCredentials.failure(\"onCredentialsExpired did not return valid credentials.\");\n                            }\n                        }, function(errorMsg) {\n                            self.log(\"onCredentialsExpired callback indicated failure! (\" + errorMsg + \")\", \"error\");\n                            updateCredentials.failure(\"onCredentialsExpired callback failed.\");\n                        });\n                    }\n                    else {\n                        self.log(\"onCredentialsExpired callback did not return a promise!\", \"error\");\n                        updateCredentials.failure(\"Unexpected return value for onCredentialsExpired.\");\n                    }\n\n                    return updateCredentials;\n                }\n            };\n\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this, additionalOptions, \"s3\");\n        },\n\n        _determineObjectPropertyValue: function(id, property) {\n            var maybe = this._options.objectProperties[property],\n                promise = new qq.Promise(),\n                self = this;\n\n            if (qq.isFunction(maybe)) {\n                maybe = maybe(id);\n                if (qq.isGenericPromise(maybe)) {\n                    promise = maybe;\n                }\n                else {\n                    promise.success(maybe);\n                }\n            }\n            else if (qq.isString(maybe)) {\n                promise.success(maybe);\n            }\n\n            promise.then(\n                function success(value) {\n                    self[\"_\" + property + \"s\"][id] = value;\n                },\n\n                function failure(errorMsg) {\n                    qq.log(\"Problem determining \" + property + \" for ID \" + id + \" (\" + errorMsg + \")\", \"error\");\n                }\n            );\n\n            return promise;\n        },\n\n        _determineBucket: function(id) {\n            return this._determineObjectPropertyValue(id, \"bucket\");\n        },\n\n        _determineHost: function(id) {\n            return this._determineObjectPropertyValue(id, \"host\");\n        },\n\n        /**\n         * Determine the file's key name and passes it to the caller via a promissory callback.  This also may\n         * delegate to an integrator-defined function that determines the file's key name on demand,\n         * which also may be promissory.\n         *\n         * @param id ID of the file\n         * @param filename Name of the file\n         * @returns {qq.Promise} A promise that will be fulfilled when the key name has been determined (and will be passed to the caller via the success callback).\n         * @private\n         */\n        _determineKeyName: function(id, filename) {\n            /*jshint -W015*/\n            var promise = new qq.Promise(),\n                keynameLogic = this._options.objectProperties.key,\n                extension = qq.getExtension(filename),\n                onGetKeynameFailure = promise.failure,\n                onGetKeynameSuccess = function(keyname, extension) {\n                    var keynameToUse = keyname;\n\n                    if (extension !== undefined) {\n                        keynameToUse += \".\" + extension;\n                    }\n\n                    promise.success(keynameToUse);\n                };\n\n            switch (keynameLogic) {\n                case \"uuid\":\n                    onGetKeynameSuccess(this.getUuid(id), extension);\n                    break;\n                case \"filename\":\n                    onGetKeynameSuccess(filename);\n                    break;\n                default:\n                    if (qq.isFunction(keynameLogic)) {\n                        this._handleKeynameFunction(keynameLogic, id, onGetKeynameSuccess, onGetKeynameFailure);\n                    }\n                    else {\n                        this.log(keynameLogic + \" is not a valid value for the s3.keyname option!\", \"error\");\n                        onGetKeynameFailure();\n                    }\n            }\n\n            return promise;\n        },\n\n        /**\n         * Called by the internal onUpload handler if the integrator has supplied a function to determine\n         * the file's key name.  The integrator's function may be promissory.  We also need to fulfill\n         * the promise contract associated with the caller as well.\n         *\n         * @param keynameFunc Integrator-supplied function that must be executed to determine the key name.  May be promissory.\n         * @param id ID of the associated file\n         * @param successCallback Invoke this if key name retrieval is successful, passing in the key name.\n         * @param failureCallback Invoke this if key name retrieval was unsuccessful.\n         * @private\n         */\n        _handleKeynameFunction: function(keynameFunc, id, successCallback, failureCallback) {\n            var self = this,\n                onSuccess = function(keyname) {\n                    successCallback(keyname);\n                },\n                onFailure = function(reason) {\n                    self.log(qq.format(\"Failed to retrieve key name for {}.  Reason: {}\", id, reason || \"null\"), \"error\");\n                    failureCallback(reason);\n                },\n                keyname = keynameFunc.call(this, id);\n\n            if (qq.isGenericPromise(keyname)) {\n                keyname.then(onSuccess, onFailure);\n            }\n            /*jshint -W116*/\n            else if (keyname == null) {\n                onFailure();\n            }\n            else {\n                onSuccess(keyname);\n            }\n        },\n\n        _getEndpointSpecificParams: function(id, response, maybeXhr) {\n            var params = {\n                key: this.getKey(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                bucket: this.getBucket(id)\n            };\n\n            if (maybeXhr && maybeXhr.getResponseHeader(\"ETag\")) {\n                params.etag = maybeXhr.getResponseHeader(\"ETag\");\n            }\n            else if (response.etag) {\n                params.etag = response.etag;\n            }\n\n            return params;\n        },\n\n        // Hooks into the base internal `_onSubmitDelete` to add key and bucket params to the delete file request.\n        _onSubmitDelete: function(id, onSuccessCallback) {\n            var additionalMandatedParams = {\n                key: this.getKey(id),\n                bucket: this.getBucket(id)\n            };\n\n            return qq.FineUploaderBasic.prototype._onSubmitDelete.call(this, id, onSuccessCallback, additionalMandatedParams);\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.s3Key == null) {\n                throw new qq.Error(\"Did not find s3Key property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedKeys[id] = sessionData.s3Key;\n                this._cannedBuckets[id] = sessionData.s3Bucket;\n            }\n\n            return id;\n        }\n    });\n}());\n","/* globals qq, CryptoJS */\r\n\r\n/**\r\n * Manages creation and communication of s3 signature workers.\r\n */\r\nqq.s3.RequestSignerWorkerManager = function (o) {\r\n    \"use strict\";\r\n    var worker = null,\r\n        workerPromises = {},\r\n        options = {\r\n            workerUrl: null,\r\n            log: function(str, level) {}\r\n        };\r\n    qq.extend(options, o, true);\r\n\r\n    function init() {\r\n        var workerUrl;\r\n        switch (typeof options.workerUrl) {\r\n            case \"string\":\r\n                if (options.workerUrl !== \"inline\") {\r\n                    workerUrl = options.workerUrl;\r\n                } else {\r\n                    workerUrl = qq.s3.createS3InlineWorkerUrl();\r\n                }\r\n                break;\r\n            case \"function\":\r\n                workerUrl = options.workerUrl();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (!workerUrl) {\r\n            return;\r\n        }\r\n        try {\r\n            worker = new Worker(workerUrl);\r\n            worker.onerror = function (e) {\r\n                // Prevent the event from bubbling\r\n                e.preventDefault();\r\n                // log the error, and fail any pending promises.\r\n                options.log(\"Worker encountered an error. Disabling. \" + e.message, \"warn\");\r\n                worker = null;\r\n                var outstandingRequests = Object.keys(workerPromises),\r\n                    i;\r\n                for (i = 0; i < outstandingRequests.length; i++) {\r\n                    workerPromises[outstandingRequests[i]].failure(e);\r\n                    delete workerPromises[outstandingRequests[i]];\r\n                }\r\n            };\r\n            worker.onmessage = function (e) {\r\n                if (!workerPromises[e.data.id]) {\r\n                    options.log(\"Worker returned a result for an request we dont know about.\", \"warn\");\r\n                    return;\r\n                }\r\n                if (e.data.err) {\r\n                    workerPromises[e.data.id].failure(e.data.err);\r\n                } else {\r\n                    workerPromises[e.data.id].success(e.data.resp);\r\n                }\r\n                delete workerPromises[e.data.id];\r\n            };\r\n        }  catch (ex) {\r\n            // worker is not supported or invalid\r\n            options.log(\"Worker failed to be created. Defaulting back to main thread processing.\" + ex, \"warn\");\r\n            worker = null;\r\n        }\r\n    }\r\n    init();\r\n    /*\r\n        Generates the signuare of the given file.\r\n        @param file the file/slice to generate the signature for.\r\n        @returns a promise or null if we can't generate signatures at all.\r\n    */\r\n    this.generateSignature = function (file) {\r\n        if (!worker) {\r\n            return null;\r\n        }\r\n        var promise = new qq.Promise(),\r\n            task = {file: file, id: qq.getUniqueId()};\r\n        workerPromises[task.id] = promise;\r\n        worker.postMessage(task);\r\n        return promise;\r\n    };\r\n};\r\n","/* globals qq, CryptoJS */\r\n\r\n// IE 10 does not support Uint8ClampedArray. We don't need it, but CryptoJS attempts to reference it\r\n// inside a conditional via an instanceof check, which breaks S3 v4 signatures for chunked uploads.\r\nif (!window.Uint8ClampedArray) {\r\n    window.Uint8ClampedArray = function() {};\r\n}\r\n/**\r\n * Handles signature determination for HTML Form Upload requests and Multipart Uploader requests (via the S3 REST API).\r\n *\r\n * If the S3 requests are to be signed server side, this module will send a POST request to the server in an attempt\r\n * to solicit signatures for various S3-related requests.  This module also parses the response and attempts\r\n * to determine if the effort was successful.\r\n *\r\n * If the S3 requests are to be signed client-side, without the help of a server, this module will utilize CryptoJS to\r\n * sign the requests directly in the browser and send them off to S3.\r\n *\r\n * @param o Options associated with all such requests\r\n * @returns {{getSignature: Function}} API method used to initiate the signature request.\r\n * @constructor\r\n */\r\nqq.s3.RequestSigner = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        thisSignatureRequester = this,\r\n        pendingSignatures = {},\r\n        options = {\r\n            expectingPolicy: false,\r\n            method: \"POST\",\r\n            signatureSpec: {\r\n                drift: 0,\r\n                credentialsProvider: {},\r\n                endpoint: null,\r\n                customHeaders: {},\r\n                version: 2\r\n            },\r\n            maxConnections: 3,\r\n            endpointStore: {},\r\n            paramsStore: {},\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            log: function(str, level) {}\r\n        },\r\n        credentialsProvider,\r\n\r\n        generateHeaders = function(signatureConstructor, signature, promise) {\r\n            var headers = signatureConstructor.getHeaders();\r\n\r\n            if (options.signatureSpec.version === 4) {\r\n                headers.Authorization = qq.s3.util.V4_ALGORITHM_PARAM_VALUE +\r\n                    \" Credential=\" + options.signatureSpec.credentialsProvider.get().accessKey + \"/\" +\r\n                    qq.s3.util.getCredentialsDate(signatureConstructor.getRequestDate()) + \"/\" +\r\n                    options.signatureSpec.region + \"/\" +\r\n                    \"s3/aws4_request,\" +\r\n                    \"SignedHeaders=\" + signatureConstructor.getSignedHeaders() + \",\" +\r\n                    \"Signature=\" + signature;\r\n            }\r\n            else {\r\n                headers.Authorization = \"AWS \" + options.signatureSpec.credentialsProvider.get().accessKey + \":\" + signature;\r\n            }\r\n\r\n            promise.success(headers, signatureConstructor.getEndOfUrl());\r\n        },\r\n\r\n        v2 = {\r\n            getStringToSign: function(signatureSpec) {\r\n                return qq.format(\"{}\\n{}\\n{}\\n\\n{}/{}/{}\",\r\n                    signatureSpec.method,\r\n                    signatureSpec.contentMd5 || \"\",\r\n                    signatureSpec.contentType || \"\",\r\n                    signatureSpec.headersStr || \"\\n\",\r\n                    signatureSpec.bucket,\r\n                    signatureSpec.endOfUrl);\r\n            },\r\n\r\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\r\n                var headersWordArray = qq.CryptoJS.enc.Utf8.parse(headersStr),\r\n                    headersHmacSha1 = qq.CryptoJS.HmacSHA1(headersWordArray, credentialsProvider.get().secretKey),\r\n                    headersHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(headersHmacSha1);\r\n\r\n                generateHeaders(signatureConstructor, headersHmacSha1Base64, signatureEffort);\r\n            },\r\n\r\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n                var policyStr = JSON.stringify(policy),\r\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\r\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\r\n                    policyHmacSha1 = qq.CryptoJS.HmacSHA1(base64Policy, credentialsProvider.get().secretKey),\r\n                    policyHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(policyHmacSha1);\r\n\r\n                signatureEffort.success({\r\n                    policy: base64Policy,\r\n                    signature: policyHmacSha1Base64\r\n                }, updatedAccessKey, updatedSessionToken);\r\n            }\r\n        },\r\n\r\n        v4 = {\r\n            getCanonicalQueryString: function(endOfUri) {\r\n                var queryParamIdx = endOfUri.indexOf(\"?\"),\r\n                    canonicalQueryString = \"\",\r\n                    encodedQueryParams, encodedQueryParamNames, queryStrings;\r\n\r\n                if (queryParamIdx >= 0) {\r\n                    encodedQueryParams = {};\r\n                    queryStrings = endOfUri.substr(queryParamIdx + 1).split(\"&\");\r\n\r\n                    qq.each(queryStrings, function(idx, queryString) {\r\n                        var nameAndVal = queryString.split(\"=\"),\r\n                            paramVal = nameAndVal[1];\r\n\r\n                        if (paramVal == null) {\r\n                            paramVal = \"\";\r\n                        }\r\n\r\n                        encodedQueryParams[encodeURIComponent(nameAndVal[0])] = encodeURIComponent(paramVal);\r\n                    });\r\n\r\n                    encodedQueryParamNames = Object.keys(encodedQueryParams).sort();\r\n                    encodedQueryParamNames.forEach(function(encodedQueryParamName, idx) {\r\n                        canonicalQueryString += encodedQueryParamName + \"=\" + encodedQueryParams[encodedQueryParamName];\r\n                        if (idx < encodedQueryParamNames.length - 1) {\r\n                            canonicalQueryString += \"&\";\r\n                        }\r\n                    });\r\n                }\r\n\r\n                return canonicalQueryString;\r\n            },\r\n\r\n            getCanonicalRequest: function(signatureSpec) {\r\n                return qq.format(\"{}\\n{}\\n{}\\n{}\\n{}\\n{}\",\r\n                    signatureSpec.method,\r\n                    v4.getCanonicalUri(signatureSpec.endOfUrl),\r\n                    v4.getCanonicalQueryString(signatureSpec.endOfUrl),\r\n                    signatureSpec.headersStr || \"\\n\",\r\n                    v4.getSignedHeaders(signatureSpec.headerNames),\r\n                    signatureSpec.hashedContent);\r\n            },\r\n\r\n            getCanonicalUri: function(endOfUri) {\r\n                var path = endOfUri,\r\n                    queryParamIdx = endOfUri.indexOf(\"?\");\r\n\r\n                if (queryParamIdx > 0) {\r\n                    path = endOfUri.substr(0, queryParamIdx);\r\n                }\r\n                return \"/\" + path;\r\n            },\r\n\r\n            getEncodedHashedPayload: function(body) {\r\n                var promise,\r\n                    reader;\r\n                if (qq.isBlob(body)) {\r\n                    // We will fallback to the inline reader if the worker was\r\n                    // not loaded correctly\r\n                    if (options.signatureSpec.workerManager) {\r\n                        promise = options.signatureSpec.workerManager.generateSignature(body);\r\n                        if (promise !== null) {\r\n                            return promise;\r\n                        }\r\n                    }\r\n                    promise = new qq.Promise();\r\n                    reader = new FileReader();\r\n                    reader.onloadend = function(e) {\r\n                        if (e.target.readyState === FileReader.DONE) {\r\n                            if (e.target.error) {\r\n                                promise.failure(e.target.error);\r\n                            }\r\n                            else {\r\n                                var wordArray = qq.CryptoJS.lib.WordArray.create(e.target.result);\r\n                                promise.success(qq.CryptoJS.SHA256(wordArray).toString());\r\n                            }\r\n                        }\r\n                    };\r\n                    reader.readAsArrayBuffer(body);\r\n                    return promise;\r\n                }\r\n                promise = new qq.Promise();\r\n                body = body || \"\";\r\n                promise.success(qq.CryptoJS.SHA256(body).toString());\r\n                return promise;\r\n            },\r\n\r\n            getScope: function(date, region) {\r\n                return qq.s3.util.getCredentialsDate(date) + \"/\" +\r\n                    region + \"/s3/aws4_request\";\r\n            },\r\n\r\n            getStringToSign: function(signatureSpec) {\r\n                var canonicalRequest = v4.getCanonicalRequest(signatureSpec),\r\n                    date = qq.s3.util.getV4PolicyDate(signatureSpec.date, signatureSpec.drift),\r\n                    hashedRequest = qq.CryptoJS.SHA256(canonicalRequest).toString(),\r\n                    scope = v4.getScope(signatureSpec.date, options.signatureSpec.region),\r\n                    stringToSignTemplate = \"AWS4-HMAC-SHA256\\n{}\\n{}\\n{}\";\r\n\r\n                return {\r\n                    hashed: qq.format(stringToSignTemplate, date, scope, hashedRequest),\r\n                    raw: qq.format(stringToSignTemplate, date, scope, canonicalRequest)\r\n                };\r\n            },\r\n\r\n            getSignedHeaders: function(headerNames) {\r\n                var signedHeaders = \"\";\r\n\r\n                headerNames.forEach(function(headerName, idx) {\r\n                    signedHeaders += headerName.toLowerCase();\r\n\r\n                    if (idx < headerNames.length - 1) {\r\n                        signedHeaders += \";\";\r\n                    }\r\n                });\r\n\r\n                return signedHeaders;\r\n            },\r\n\r\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\r\n                var secretKey = credentialsProvider.get().secretKey,\r\n                    headersPattern = /.+\\n.+\\n(\\d+)\\/(.+)\\/s3\\/.+\\n(.+)/,\r\n                    matches = headersPattern.exec(headersStr),\r\n                    dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\r\n\r\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\r\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\r\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\r\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\r\n\r\n                generateHeaders(signatureConstructor, qq.CryptoJS.HmacSHA256(headersStr, signingKey), signatureEffort);\r\n            },\r\n\r\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n                var policyStr = JSON.stringify(policy),\r\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\r\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\r\n                    secretKey = credentialsProvider.get().secretKey,\r\n                    credentialPattern = /.+\\/(.+)\\/(.+)\\/s3\\/aws4_request/,\r\n                    credentialCondition = (function() {\r\n                        var credential = null;\r\n                        qq.each(policy.conditions, function(key, condition) {\r\n                            var val = condition[\"x-amz-credential\"];\r\n                            if (val) {\r\n                                credential = val;\r\n                                return false;\r\n                            }\r\n                        });\r\n                        return credential;\r\n                    }()),\r\n                    matches, dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\r\n\r\n                matches = credentialPattern.exec(credentialCondition);\r\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\r\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\r\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\r\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\r\n\r\n                signatureEffort.success({\r\n                    policy: base64Policy,\r\n                    signature: qq.CryptoJS.HmacSHA256(base64Policy, signingKey).toString()\r\n                }, updatedAccessKey, updatedSessionToken);\r\n            }\r\n        };\r\n\r\n    qq.extend(options, o, true);\r\n    credentialsProvider = options.signatureSpec.credentialsProvider;\r\n\r\n    function handleSignatureReceived(id, xhrOrXdr, isError) {\r\n        var responseJson = xhrOrXdr.responseText,\r\n            pendingSignatureData = pendingSignatures[id],\r\n            promise,\r\n            signatureConstructor,\r\n            errorMessage, response;\r\n\r\n        if (!pendingSignatureData) {\r\n            return;\r\n        }\r\n        promise = pendingSignatureData.promise;\r\n        signatureConstructor = pendingSignatureData.signatureConstructor;\r\n\r\n        delete pendingSignatures[id];\r\n\r\n        // Attempt to parse what we would expect to be a JSON response\r\n        if (responseJson) {\r\n            try {\r\n                response = qq.parseJson(responseJson);\r\n            }\r\n            catch (error) {\r\n                options.log(\"Error attempting to parse signature response: \" + error, \"error\");\r\n            }\r\n        }\r\n\r\n        // If the response is parsable and contains an `error` property, use it as the error message\r\n        if (response && response.error) {\r\n            isError = true;\r\n            errorMessage = response.error;\r\n        }\r\n        // If we have received a parsable response, and it has an `invalid` property,\r\n        // the policy document or request headers may have been tampered with client-side.\r\n        else if (response && response.invalid) {\r\n            isError = true;\r\n            errorMessage = \"Invalid policy document or request headers!\";\r\n        }\r\n        // Make sure the response contains policy & signature properties\r\n        else if (response) {\r\n            if (options.expectingPolicy && !response.policy) {\r\n                isError = true;\r\n                errorMessage = \"Response does not include the base64 encoded policy!\";\r\n            }\r\n            else if (!response.signature) {\r\n                isError = true;\r\n                errorMessage = \"Response does not include the signature!\";\r\n            }\r\n        }\r\n        // Something unknown went wrong\r\n        else {\r\n            isError = true;\r\n            errorMessage = \"Received an empty or invalid response from the server!\";\r\n        }\r\n\r\n        if (isError) {\r\n            if (errorMessage) {\r\n                options.log(errorMessage, \"error\");\r\n            }\r\n\r\n            promise.failure(errorMessage);\r\n        }\r\n        else if (signatureConstructor) {\r\n            generateHeaders(signatureConstructor, response.signature, promise);\r\n        }\r\n        else {\r\n            promise.success(response);\r\n        }\r\n    }\r\n\r\n    function getStringToSignArtifacts(id, version, requestInfo) {\r\n        var promise = new qq.Promise(),\r\n            method = \"POST\",\r\n            headerNames = [],\r\n            headersStr = \"\",\r\n            now = new Date(),\r\n            endOfUrl, signatureSpec, toSign,\r\n\r\n            generateStringToSign = function(requestInfo) {\r\n                var contentMd5,\r\n                    headerIndexesToRemove = [];\r\n\r\n                qq.each(requestInfo.headers, function(name) {\r\n                    headerNames.push(name);\r\n                });\r\n                headerNames.sort();\r\n\r\n                qq.each(headerNames, function(idx, headerName) {\r\n                    if (qq.indexOf(qq.s3.util.UNSIGNABLE_REST_HEADER_NAMES, headerName) < 0) {\r\n                        headersStr += headerName.toLowerCase() + \":\" + requestInfo.headers[headerName].trim() + \"\\n\";\r\n                    }\r\n                    else if (headerName === \"Content-MD5\") {\r\n                        contentMd5 = requestInfo.headers[headerName];\r\n                    }\r\n                    else {\r\n                        headerIndexesToRemove.unshift(idx);\r\n                    }\r\n                });\r\n\r\n                qq.each(headerIndexesToRemove, function(idx, headerIdx) {\r\n                    headerNames.splice(headerIdx, 1);\r\n                });\r\n\r\n                signatureSpec = {\r\n                    bucket: requestInfo.bucket,\r\n                    contentMd5: contentMd5,\r\n                    contentType: requestInfo.contentType,\r\n                    date: now,\r\n                    drift: options.signatureSpec.drift,\r\n                    endOfUrl: endOfUrl,\r\n                    hashedContent: requestInfo.hashedContent,\r\n                    headerNames: headerNames,\r\n                    headersStr: headersStr,\r\n                    method: method\r\n                };\r\n\r\n                toSign = version === 2 ? v2.getStringToSign(signatureSpec) : v4.getStringToSign(signatureSpec);\r\n\r\n                return {\r\n                    date: now,\r\n                    endOfUrl: endOfUrl,\r\n                    signedHeaders: version === 4 ? v4.getSignedHeaders(signatureSpec.headerNames) : null,\r\n                    toSign: version === 4 ? toSign.hashed : toSign,\r\n                    toSignRaw: version === 4 ? toSign.raw : toSign\r\n                };\r\n            };\r\n\r\n        /*jshint indent:false */\r\n        switch (requestInfo.type) {\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_ABORT:\r\n                method = \"DELETE\";\r\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\r\n                break;\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_INITIATE:\r\n                endOfUrl = \"uploads\";\r\n                break;\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_COMPLETE:\r\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\r\n                break;\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_UPLOAD:\r\n                method = \"PUT\";\r\n                endOfUrl = qq.format(\"partNumber={}&uploadId={}\", requestInfo.partNum, requestInfo.uploadId);\r\n                break;\r\n        }\r\n\r\n        endOfUrl = requestInfo.key + \"?\" + endOfUrl;\r\n        if (version === 4) {\r\n            v4.getEncodedHashedPayload(requestInfo.content).then(function(hashedContent) {\r\n                requestInfo.headers[\"x-amz-content-sha256\"] = hashedContent;\r\n                requestInfo.headers.Host = requestInfo.host;\r\n                requestInfo.headers[\"x-amz-date\"] = qq.s3.util.getV4PolicyDate(now, options.signatureSpec.drift);\r\n                requestInfo.hashedContent = hashedContent;\r\n\r\n                promise.success(generateStringToSign(requestInfo));\r\n            }, function (err) {\r\n                promise.failure(err);\r\n            });\r\n        }\r\n        else {\r\n            promise.success(generateStringToSign(requestInfo));\r\n        }\r\n\r\n        return promise;\r\n    }\r\n\r\n    function determineSignatureClientSide(id, toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n        var updatedHeaders;\r\n\r\n        // REST API request\r\n        if (toBeSigned.signatureConstructor) {\r\n            if (updatedSessionToken) {\r\n                updatedHeaders = toBeSigned.signatureConstructor.getHeaders();\r\n                updatedHeaders[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\r\n                toBeSigned.signatureConstructor.withHeaders(updatedHeaders);\r\n            }\r\n\r\n            toBeSigned.signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\r\n                signApiRequest(toBeSigned.signatureConstructor, signatureArtifacts.stringToSign, signatureEffort);\r\n            }, function (err) {\r\n                signatureEffort.failure(err);\r\n            });\r\n        }\r\n        // Form upload (w/ policy document)\r\n        else {\r\n            updatedSessionToken && qq.s3.util.refreshPolicyCredentials(toBeSigned, updatedSessionToken);\r\n            signPolicy(toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken);\r\n        }\r\n    }\r\n\r\n    function signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n        if (options.signatureSpec.version === 4) {\r\n            v4.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\r\n        }\r\n        else {\r\n            v2.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\r\n        }\r\n    }\r\n\r\n    function signApiRequest(signatureConstructor, headersStr, signatureEffort) {\r\n        if (options.signatureSpec.version === 4) {\r\n            v4.signApiRequest(signatureConstructor, headersStr, signatureEffort);\r\n        }\r\n        else {\r\n            v2.signApiRequest(signatureConstructor, headersStr, signatureEffort);\r\n        }\r\n    }\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        acceptHeader: \"application/json\",\r\n        method: options.method,\r\n        contentType: \"application/json; charset=utf-8\",\r\n        endpointStore: {\r\n            get: function() {\r\n                if (typeof options.signatureSpec.endpoint === 'function') {\r\n                    return options.signatureSpec.endpoint();\r\n                }\r\n                return options.signatureSpec.endpoint;\r\n            }\r\n        },\r\n        paramsStore: options.paramsStore,\r\n        maxConnections: options.maxConnections,\r\n        customHeaders: options.signatureSpec.customHeaders,\r\n        log: options.log,\r\n        onComplete: handleSignatureReceived,\r\n        cors: options.cors\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * On success, an object containing the parsed JSON response will be passed into the success handler if the\r\n         * request succeeds.  Otherwise an error message will be passed into the failure method.\r\n         *\r\n         * @param id File ID.\r\n         * @param toBeSigned an Object that holds the item(s) to be signed\r\n         * @returns {qq.Promise} A promise that is fulfilled when the response has been received.\r\n         */\r\n        getSignature: function(id, toBeSigned) {\r\n            var params = toBeSigned,\r\n                signatureConstructor = toBeSigned.signatureConstructor,\r\n                signatureEffort = new qq.Promise(),\r\n                queryParams;\r\n\r\n            if (options.signatureSpec.version === 4) {\r\n                queryParams = {v4: true};\r\n            }\r\n\r\n            if (credentialsProvider.get().secretKey && qq.CryptoJS) {\r\n                if (credentialsProvider.get().expiration.getTime() > Date.now()) {\r\n                    determineSignatureClientSide(id, toBeSigned, signatureEffort);\r\n                }\r\n                // If credentials are expired, ask for new ones before attempting to sign request\r\n                else {\r\n                    credentialsProvider.onExpired().then(function() {\r\n                        determineSignatureClientSide(id, toBeSigned,\r\n                            signatureEffort,\r\n                            credentialsProvider.get().accessKey,\r\n                            credentialsProvider.get().sessionToken);\r\n                    }, function(errorMsg) {\r\n                        options.log(\"Attempt to update expired credentials apparently failed! Unable to sign request.  \", \"error\");\r\n                        signatureEffort.failure(\"Unable to sign request - expired credentials.\");\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                options.log(\"Submitting S3 signature request for \" + id);\r\n\r\n                // create before incase the singature effort returns faster than us\r\n                pendingSignatures[id] = {\r\n                    promise: signatureEffort,\r\n                    signatureConstructor: signatureConstructor\r\n                };\r\n\r\n                if (signatureConstructor) {\r\n                    signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\r\n                        params = {headers: signatureArtifacts.stringToSignRaw};\r\n                        requester.initTransport(id)\r\n                            .withParams(params)\r\n                            .withQueryParams(queryParams)\r\n                            .send();\r\n                    }, function (err) {\r\n                        options.log(\"Failed to construct signature. \", \"error\");\r\n                        signatureEffort.failure(\"Failed to construct signature.\");\r\n                    });\r\n                }\r\n                else {\r\n                    requester.initTransport(id)\r\n                        .withParams(params)\r\n                        .withQueryParams(queryParams)\r\n                        .send();\r\n                }\r\n            }\r\n\r\n            return signatureEffort;\r\n        },\r\n\r\n        constructStringToSign: function(type, bucket, host, key) {\r\n            var headers = {},\r\n                uploadId, content, contentType, partNum, artifacts;\r\n\r\n            return {\r\n                withHeaders: function(theHeaders) {\r\n                    headers = theHeaders;\r\n                    return this;\r\n                },\r\n\r\n                withUploadId: function(theUploadId) {\r\n                    uploadId = theUploadId;\r\n                    return this;\r\n                },\r\n\r\n                withContent: function(theContent) {\r\n                    content = theContent;\r\n                    return this;\r\n                },\r\n\r\n                withContentType: function(theContentType) {\r\n                    contentType = theContentType;\r\n                    return this;\r\n                },\r\n\r\n                withPartNum: function(thePartNum) {\r\n                    partNum = thePartNum;\r\n                    return this;\r\n                },\r\n\r\n                getToSign: function(id) {\r\n                    var sessionToken = credentialsProvider.get().sessionToken,\r\n                        promise = new qq.Promise(),\r\n                        adjustedDate = new Date(Date.now() + options.signatureSpec.drift);\r\n\r\n                    headers[\"x-amz-date\"] = adjustedDate.toUTCString();\r\n\r\n                    if (sessionToken) {\r\n                        headers[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\r\n                    }\r\n\r\n                    getStringToSignArtifacts(id, options.signatureSpec.version, {\r\n                        bucket: bucket,\r\n                        content: content,\r\n                        contentType: contentType,\r\n                        headers: headers,\r\n                        host: host,\r\n                        key: key,\r\n                        partNum: partNum,\r\n                        type: type,\r\n                        uploadId: uploadId\r\n                    }).then(function(_artifacts_) {\r\n                        artifacts = _artifacts_;\r\n                        promise.success({\r\n                            headers: (function() {\r\n                                if (contentType) {\r\n                                    headers[\"Content-Type\"] = contentType;\r\n                                }\r\n\r\n                                delete headers.Host; // we don't want this to be set on the XHR-initiated request\r\n                                return headers;\r\n                            }()),\r\n                            date: artifacts.date,\r\n                            endOfUrl: artifacts.endOfUrl,\r\n                            signedHeaders: artifacts.signedHeaders,\r\n                            stringToSign: artifacts.toSign,\r\n                            stringToSignRaw: artifacts.toSignRaw\r\n                        });\r\n                    }, function (err) {\r\n                        promise.failure(err);\r\n                    });\r\n\r\n                    return promise;\r\n                },\r\n\r\n                getHeaders: function() {\r\n                    return qq.extend({}, headers);\r\n                },\r\n\r\n                getEndOfUrl: function() {\r\n                    return artifacts && artifacts.endOfUrl;\r\n                },\r\n\r\n                getRequestDate: function() {\r\n                    return artifacts && artifacts.date;\r\n                },\r\n\r\n                getSignedHeaders: function() {\r\n                    return artifacts && artifacts.signedHeaders;\r\n                }\r\n            };\r\n        }\r\n    });\r\n};\r\n\r\nqq.s3.RequestSigner.prototype.REQUEST_TYPE = {\r\n    MULTIPART_INITIATE: \"multipart_initiate\",\r\n    MULTIPART_COMPLETE: \"multipart_complete\",\r\n    MULTIPART_ABORT: \"multipart_abort\",\r\n    MULTIPART_UPLOAD: \"multipart_upload\"\r\n};\r\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Initiate Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadInitiate.html)\n * request to S3 via the REST API.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.s3.InitiateMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingInitiateRequests = {},\n        options = {\n            filenameParam: \"qqfilename\",\n            method: \"POST\",\n            endpointStore: null,\n            paramsStore: null,\n            signatureSpec: null,\n            aclStore: null,\n            reducedRedundancy: false,\n            serverSideEncryption: false,\n            maxConnections: 3,\n            getContentType: function(id) {},\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            getName: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Determine all headers for the \"Initiate MPU\" request, including the \"Authorization\" header, which must be determined\n     * by the local server.  This is a promissory function.  If the server responds with a signature, the headers\n     * (including the Authorization header) will be passed into the success method of the promise.  Otherwise, the failure\n     * method on the promise will be called.\n     *\n     * @param id Associated file ID\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id) {\n        var bucket = options.getBucket(id),\n            host = options.getHost(id),\n            headers = {},\n            promise = new qq.Promise(),\n            key = options.getKey(id),\n            signatureConstructor;\n\n        headers[\"x-amz-acl\"] = options.aclStore.get(id);\n\n        if (options.reducedRedundancy) {\n            headers[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n        }\n\n        if (options.serverSideEncryption) {\n            headers[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n        }\n\n        headers[qq.s3.util.AWS_PARAM_PREFIX + options.filenameParam] = encodeURIComponent(options.getName(id));\n\n        qq.each(options.paramsStore.get(id), function(name, val) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                headers[name] = val;\n            }\n            else {\n                headers[qq.s3.util.AWS_PARAM_PREFIX + name] = encodeURIComponent(val);\n            }\n        });\n\n        signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n            (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_INITIATE, bucket, host, key)\n            .withContentType(options.getContentType(id))\n            .withHeaders(headers);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Initiate MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleInitiateRequestComplete(id, xhr, isError) {\n        var promise = pendingInitiateRequests[id],\n            domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            uploadIdElements, messageElements, uploadId, errorMessage, status;\n\n        delete pendingInitiateRequests[id];\n\n        // The base ajax requester may declare the request to be a failure based on status code.\n        if (isError) {\n            status = xhr.status;\n\n            messageElements = responseDoc.getElementsByTagName(\"Message\");\n            if (messageElements.length > 0) {\n                errorMessage = messageElements[0].textContent;\n            }\n        }\n        // If the base ajax requester has not declared this a failure, make sure we can retrieve the uploadId from the response.\n        else {\n            uploadIdElements = responseDoc.getElementsByTagName(\"UploadId\");\n            if (uploadIdElements.length > 0) {\n                uploadId = uploadIdElements[0].textContent;\n            }\n            else {\n                errorMessage = \"Upload ID missing from request\";\n            }\n        }\n\n        // Either fail the promise (passing a descriptive error message) or declare it a success (passing the upload ID)\n        if (uploadId === undefined) {\n            if (errorMessage) {\n                options.log(qq.format(\"Specific problem detected initiating multipart upload request for {}: '{}'.\", id, errorMessage), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Unexplained error with initiate multipart upload request for {}.  Status code {}.\", id, status), \"error\");\n            }\n\n            promise.failure(\"Problem initiating upload request.\", xhr);\n        }\n        else {\n            options.log(qq.format(\"Initiate multipart upload request successful for {}.  Upload ID is {}\", id, uploadId));\n            promise.success(uploadId, xhr);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleInitiateRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Initiate MPU\" request to AWS via the REST API.  First, though, we must get a signature from the\n         * local server for the request.  If all is successful, the uploadId from AWS will be passed into the promise's\n         * success handler. Otherwise, an error message will ultimately be passed into the failure method.\n         *\n         * @param id The ID associated with the file\n         * @returns {qq.Promise}\n         */\n        send: function(id) {\n            var promise = new qq.Promise();\n\n            getHeaders(id).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 initiate multipart upload request for \" + id);\n\n                pendingInitiateRequests[id] = promise;\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Complete Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadComplete.html)\n * request to S3 via the REST API.\n *\n * @param o Options passed by the creator, to overwrite any default option values.\n * @constructor\n */\nqq.s3.CompleteMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingCompleteRequests = {},\n        options = {\n            method: \"POST\",\n            contentType: \"text/xml\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Complete\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId, body) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_COMPLETE, bucket, host, options.getKey(id))\n                .withUploadId(uploadId)\n                .withContent(body)\n                .withContentType(\"application/xml; charset=UTF-8\");\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Complete MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleCompleteRequestComplete(id, xhr, isError) {\n        var promise = pendingCompleteRequests[id],\n            domParser = new DOMParser(),\n            bucket = options.getBucket(id),\n            key = options.getKey(id),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            bucketEls = responseDoc.getElementsByTagName(\"Bucket\"),\n            keyEls = responseDoc.getElementsByTagName(\"Key\");\n\n        delete pendingCompleteRequests[id];\n\n        options.log(qq.format(\"Complete response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Complete Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (bucketEls.length && keyEls.length) {\n                if (bucketEls[0].textContent !== bucket) {\n                    isError = true;\n                    options.log(qq.format(\"Wrong bucket in response to Complete Multipart Upload request for {}.\", id), \"error\");\n                }\n\n                // TODO Compare key name from response w/ expected key name if AWS ever fixes the encoding of key names in this response.\n            }\n            else {\n                isError = true;\n                options.log(qq.format(\"Missing bucket and/or key in response to Complete Multipart Upload request for {}.\", id), \"error\");\n            }\n        }\n\n        if (isError) {\n            promise.failure(\"Problem combining the file parts!\", xhr);\n        }\n        else {\n            promise.success({}, xhr);\n        }\n    }\n\n    /**\n     * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n     * @returns {string} XML string containing the body to send with the \"Complete\" request\n     */\n    function getCompleteRequestBody(etagEntries) {\n        var doc = document.implementation.createDocument(null, \"CompleteMultipartUpload\", null);\n\n        // The entries MUST be sorted by part number, per the AWS API spec.\n        etagEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(etagEntries, function(idx, etagEntry) {\n            var part = etagEntry.part,\n                etag = etagEntry.etag,\n                partEl = doc.createElement(\"Part\"),\n                partNumEl = doc.createElement(\"PartNumber\"),\n                partNumTextEl = doc.createTextNode(part),\n                etagTextEl = doc.createTextNode(etag),\n                etagEl = doc.createElement(\"ETag\");\n\n            etagEl.appendChild(etagTextEl);\n            partNumEl.appendChild(partNumTextEl);\n            partEl.appendChild(partNumEl);\n            partEl.appendChild(etagEl);\n            qq(doc).children()[0].appendChild(partEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: \"application/xml; charset=UTF-8\",\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleCompleteRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Complete\" request and fulfills the returned promise when the success of this request is known.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n         * @returns {qq.Promise}\n         */\n        send: function(id, uploadId, etagEntries) {\n            var promise = new qq.Promise(),\n                body = getCompleteRequestBody(etagEntries);\n\n            getHeaders(id, uploadId, body).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 complete multipart upload request for \" + id);\n\n                pendingCompleteRequests[id] = promise;\n                delete headers[\"Content-Type\"];\n\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .withPayload(body)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Ajax requester used to send an [\"Abort Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadAbort.html)\n * request to S3 via the REST API.\n\n * @param o\n * @constructor\n */\nqq.s3.AbortMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Abort\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @param id Associated file ID\n     * @param uploadId ID of the associated upload, according to AWS\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_ABORT, bucket, host, options.getKey(id))\n                .withUploadId(uploadId);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Abort MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleAbortRequestComplete(id, xhr, isError) {\n        var domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            errorEls = responseDoc.getElementsByTagName(\"Error\"),\n            awsErrorMsg;\n\n        options.log(qq.format(\"Abort response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Abort Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (errorEls.length) {\n                isError = true;\n                awsErrorMsg = responseDoc.getElementsByTagName(\"Message\")[0].textContent;\n                options.log(qq.format(\"Failed to Abort Multipart Upload request for {}.  Error: {}\", id, awsErrorMsg), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Abort MPU request succeeded for file ID {}.\", id));\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [\"DELETE\"],\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleAbortRequestComplete,\n        successfulResponseCodes: {\n            DELETE: [204]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Abort\" request.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         */\n        send: function(id, uploadId) {\n            getHeaders(id, uploadId).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 Abort multipart upload request for \" + id);\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            });\n        }\n    });\n};\n","/*globals qq */\r\n/**\r\n * Upload handler used by the upload to S3 module that depends on File API support, and, therefore, makes use of\r\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to S3 buckets via the associated AWS API.\r\n *\r\n * If chunking is supported and enabled, the S3 Multipart Upload REST API is utilized.\r\n *\r\n * @param spec Options passed from the base handler\r\n * @param proxy Callbacks & methods used to query for or push out data/changes\r\n */\r\nqq.s3.XhrUploadHandler = function(spec, proxy) {\r\n    \"use strict\";\r\n\r\n    // need to pre-construct the workerManager\r\n    var workerManager;\r\n    if (spec.signature.workerUrl) {\r\n        workerManager = new qq.s3.RequestSignerWorkerManager({\r\n            workerUrl: spec.signature.workerUrl,\r\n            log: proxy.log,\r\n        });\r\n    }\r\n\r\n    var getName = proxy.getName,\r\n        log = proxy.log,\r\n        clockDrift = spec.clockDrift,\r\n        expectedStatus = 200,\r\n        onGetBucket = spec.getBucket,\r\n        onGetHost = spec.getHost,\r\n        onGetKeyName = spec.getKeyName,\r\n        filenameParam = spec.filenameParam,\r\n        paramsStore = spec.paramsStore,\r\n        endpointStore = spec.endpointStore,\r\n        aclStore = spec.aclStore,\r\n        reducedRedundancy = spec.objectProperties.reducedRedundancy,\r\n        region = spec.objectProperties.region,\r\n        serverSideEncryption = spec.objectProperties.serverSideEncryption,\r\n        validation = spec.validation,\r\n        signature = qq.extend({region: region, drift: clockDrift, workerManager: workerManager}, spec.signature),\r\n        handler = this,\r\n        credentialsProvider = spec.signature.credentialsProvider,\r\n\r\n        chunked = {\r\n            // Sends a \"Complete Multipart Upload\" request and then signals completion of the upload\r\n            // when the response to this request has been parsed.\r\n            combine: function(id) {\r\n                var uploadId = handler._getPersistableData(id).uploadId,\r\n                    etagMap = handler._getPersistableData(id).etags,\r\n                    result = new qq.Promise();\r\n\r\n                requesters.completeMultipart.send(id, uploadId, etagMap).then(\r\n                    result.success,\r\n\r\n                    function failure(reason, xhr) {\r\n                        result.failure(upload.done(id, xhr).response, xhr);\r\n                    }\r\n                );\r\n\r\n                return result;\r\n            },\r\n\r\n            // The last step in handling a chunked upload.  This is called after each chunk has been sent.\r\n            // The request may be successful, or not.  If it was successful, we must extract the \"ETag\" element\r\n            // in the XML response and store that along with the associated part number.\r\n            // We need these items to \"Complete\" the multipart upload after all chunks have been successfully sent.\r\n            done: function(id, xhr, chunkIdx) {\r\n                var response = upload.response.parse(id, xhr),\r\n                    etag;\r\n\r\n                if (response.success) {\r\n                    etag = xhr.getResponseHeader(\"ETag\");\r\n\r\n                    if (!handler._getPersistableData(id).etags) {\r\n                        handler._getPersistableData(id).etags = [];\r\n                    }\r\n                    handler._getPersistableData(id).etags.push({part: chunkIdx + 1, etag: etag});\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Determines headers that must be attached to the chunked (Multipart Upload) request.  One of these headers is an\r\n             * Authorization value, which must be determined by asking the local server to sign the request first.  So, this\r\n             * function returns a promise.  Once all headers are determined, the `success` method of the promise is called with\r\n             * the headers object.  If there was some problem determining the headers, we delegate to the caller's `failure`\r\n             * callback.\r\n             *\r\n             * @param id File ID\r\n             * @param chunkIdx Index of the chunk to PUT\r\n             * @returns {qq.Promise}\r\n             */\r\n            initHeaders: function(id, chunkIdx, blob) {\r\n                var headers = {},\r\n                    bucket = upload.bucket.getName(id),\r\n                    host = upload.host.getName(id),\r\n                    key = upload.key.urlSafe(id),\r\n                    promise = new qq.Promise(),\r\n                    signatureConstructor = requesters.restSignature.constructStringToSign\r\n                        (requesters.restSignature.REQUEST_TYPE.MULTIPART_UPLOAD, bucket, host, key)\r\n                        .withPartNum(chunkIdx + 1)\r\n                        .withContent(blob)\r\n                        .withUploadId(handler._getPersistableData(id).uploadId);\r\n\r\n                // Ask the local server to sign the request.  Use this signature to form the Authorization header.\r\n                requesters.restSignature.getSignature(id + \".\" + chunkIdx, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\r\n\r\n                return promise;\r\n            },\r\n\r\n            put: function(id, chunkIdx) {\r\n                var xhr = handler._createXhr(id, chunkIdx),\r\n                    chunkData = handler._getChunkData(id, chunkIdx),\r\n                    domain = spec.endpointStore.get(id),\r\n                    promise = new qq.Promise();\r\n\r\n                // Add appropriate headers to the multipart upload request.\r\n                // Once these have been determined (asynchronously) attach the headers and send the chunk.\r\n                chunked.initHeaders(id, chunkIdx, chunkData.blob).then(function(headers, endOfUrl) {\r\n                    if (xhr._cancelled) {\r\n                        log(qq.format(\"Upload of item {}.{} cancelled. Upload will not start after successful signature request.\", id, chunkIdx));\r\n                        promise.failure({error: \"Chunk upload cancelled\"});\r\n                    }\r\n                    else {\r\n                        var url = domain + \"/\" + endOfUrl;\r\n                        handler._registerProgressHandler(id, chunkIdx, chunkData.size);\r\n                        upload.track(id, xhr, chunkIdx).then(promise.success, promise.failure);\r\n                        xhr.open(\"PUT\", url, true);\r\n\r\n                        qq.each(headers, function(name, val) {\r\n                            xhr.setRequestHeader(name, val);\r\n                        });\r\n\r\n                        xhr.send(chunkData.blob);\r\n                    }\r\n                }, function() {\r\n                    promise.failure({error: \"Problem signing the chunk!\"}, xhr);\r\n                });\r\n\r\n                return promise;\r\n            },\r\n\r\n            send: function(id, chunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                chunked.setup(id).then(\r\n                    // The \"Initiate\" request succeeded.  We are ready to send the first chunk.\r\n                    function() {\r\n                        chunked.put(id, chunkIdx).then(promise.success, promise.failure);\r\n                    },\r\n\r\n                    // We were unable to initiate the chunked upload process.\r\n                    function(errorMessage, xhr) {\r\n                        promise.failure({error: errorMessage}, xhr);\r\n                    }\r\n                );\r\n\r\n                return promise;\r\n            },\r\n\r\n            /**\r\n             * Sends an \"Initiate Multipart Upload\" request to S3 via the REST API, but only if the MPU has not already been\r\n             * initiated.\r\n             *\r\n             * @param id Associated file ID\r\n             * @returns {qq.Promise} A promise that is fulfilled when the initiate request has been sent and the response has been parsed.\r\n             */\r\n            setup: function(id) {\r\n                var promise = new qq.Promise(),\r\n                    uploadId = handler._getPersistableData(id).uploadId,\r\n                    uploadIdPromise = new qq.Promise();\r\n\r\n                if (!uploadId) {\r\n                    handler._getPersistableData(id).uploadId = uploadIdPromise;\r\n                    requesters.initiateMultipart.send(id).then(\r\n                        function(uploadId) {\r\n                            handler._getPersistableData(id).uploadId = uploadId;\r\n                            uploadIdPromise.success(uploadId);\r\n                            promise.success(uploadId);\r\n                        },\r\n                        function(errorMsg, xhr) {\r\n                            handler._getPersistableData(id).uploadId = null;\r\n                            promise.failure(errorMsg, xhr);\r\n                            uploadIdPromise.failure(errorMsg, xhr);\r\n                        }\r\n                    );\r\n                }\r\n                else if (uploadId instanceof qq.Promise) {\r\n                    uploadId.then(function(uploadId) {\r\n                        promise.success(uploadId);\r\n                    });\r\n                }\r\n                else {\r\n                    promise.success(uploadId);\r\n                }\r\n\r\n                return promise;\r\n            }\r\n        },\r\n\r\n        requesters = {\r\n            abortMultipart: new qq.s3.AbortMultipartAjaxRequester({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                }\r\n            }),\r\n\r\n            completeMultipart: new qq.s3.CompleteMultipartAjaxRequester({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                }\r\n            }),\r\n\r\n            initiateMultipart: new qq.s3.InitiateMultipartAjaxRequester({\r\n                filenameParam: filenameParam,\r\n                endpointStore: endpointStore,\r\n                paramsStore: paramsStore,\r\n                signatureSpec: signature,\r\n                aclStore: aclStore,\r\n                reducedRedundancy: reducedRedundancy,\r\n                serverSideEncryption: serverSideEncryption,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getContentType: function(id) {\r\n                    return handler._getMimeType(id);\r\n                },\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                },\r\n                getName: function(id) {\r\n                    return getName(id);\r\n                }\r\n            }),\r\n\r\n            policySignature: new qq.s3.RequestSigner({\r\n                expectingPolicy: true,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log\r\n            }),\r\n\r\n            restSignature: new qq.s3.RequestSigner({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log\r\n            })\r\n        },\r\n\r\n        simple = {\r\n            /**\r\n             * Used for simple (non-chunked) uploads to determine the parameters to send along with the request.  Part of this\r\n             * process involves asking the local server to sign the request, so this function returns a promise.  The promise\r\n             * is fulfilled when all parameters are determined, or when we determine that all parameters cannot be calculated\r\n             * due to some error.\r\n             *\r\n             * @param id File ID\r\n             * @returns {qq.Promise}\r\n             */\r\n            initParams: function(id) {\r\n                /*jshint -W040 */\r\n                var customParams = paramsStore.get(id);\r\n                customParams[filenameParam] = getName(id);\r\n\r\n                return qq.s3.util.generateAwsParams({\r\n                    endpoint: endpointStore.get(id),\r\n                    clockDrift: clockDrift,\r\n                    params: customParams,\r\n                    type: handler._getMimeType(id),\r\n                    bucket: upload.bucket.getName(id),\r\n                    key: handler.getThirdPartyFileId(id),\r\n                    accessKey: credentialsProvider.get().accessKey,\r\n                    sessionToken: credentialsProvider.get().sessionToken,\r\n                    acl: aclStore.get(id),\r\n                    expectedStatus: expectedStatus,\r\n                    minFileSize: validation.minSizeLimit,\r\n                    maxFileSize: validation.maxSizeLimit,\r\n                    reducedRedundancy: reducedRedundancy,\r\n                    region: region,\r\n                    serverSideEncryption: serverSideEncryption,\r\n                    signatureVersion: signature.version,\r\n                    log: log\r\n                },\r\n                qq.bind(requesters.policySignature.getSignature, this, id));\r\n            },\r\n\r\n            send: function(id) {\r\n                var promise = new qq.Promise(),\r\n                    xhr = handler._createXhr(id),\r\n                    fileOrBlob = handler.getFile(id);\r\n\r\n                handler._registerProgressHandler(id);\r\n                upload.track(id, xhr).then(promise.success, promise.failure);\r\n\r\n                // Delegate to a function the sets up the XHR request and notifies us when it is ready to be sent, along w/ the payload.\r\n                simple.setup(id, xhr, fileOrBlob).then(function(toSend) {\r\n                    log(\"Sending upload request for \" + id);\r\n                    xhr.send(toSend);\r\n                }, promise.failure);\r\n\r\n                return promise;\r\n            },\r\n\r\n            /**\r\n             * Starts the upload process by delegating to an async function that determine parameters to be attached to the\r\n             * request.  If all params can be determined, we are called back with the params and the caller of this function is\r\n             * informed by invoking the `success` method on the promise returned by this function, passing the payload of the\r\n             * request.  If some error occurs here, we delegate to a function that signals a failure for this upload attempt.\r\n             *\r\n             * Note that this is only used by the simple (non-chunked) upload process.\r\n             *\r\n             * @param id File ID\r\n             * @param xhr XMLHttpRequest to use for the upload\r\n             * @param fileOrBlob `File` or `Blob` to send\r\n             * @returns {qq.Promise}\r\n             */\r\n            setup: function(id, xhr, fileOrBlob) {\r\n                var formData = new FormData(),\r\n                    endpoint = endpointStore.get(id),\r\n                    url = endpoint,\r\n                    promise = new qq.Promise();\r\n\r\n                simple.initParams(id).then(\r\n                    // Success - all params determined\r\n                    function(awsParams) {\r\n                        xhr.open(\"POST\", url, true);\r\n\r\n                        qq.obj2FormData(awsParams, formData);\r\n\r\n                        // AWS requires the file field be named \"file\".\r\n                        formData.append(\"file\", fileOrBlob);\r\n\r\n                        promise.success(formData);\r\n                    },\r\n\r\n                    // Failure - we couldn't determine some params (likely the signature)\r\n                    function(errorMessage) {\r\n                        promise.failure({error: errorMessage});\r\n                    }\r\n                );\r\n\r\n                return promise;\r\n            }\r\n        },\r\n\r\n        upload = {\r\n            /**\r\n             * Note that this is called when an upload has reached a termination point,\r\n             * regardless of success/failure.  For example, it is called when we have\r\n             * encountered an error during the upload or when the file may have uploaded successfully.\r\n             *\r\n             * @param id file ID\r\n             */\r\n            bucket: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        cachedBucket = handler._getFileState(id).bucket;\r\n\r\n                    if (cachedBucket) {\r\n                        promise.success(cachedBucket);\r\n                    }\r\n                    else {\r\n                        onGetBucket(id).then(function(bucket) {\r\n                            handler._getFileState(id).bucket = bucket;\r\n                            promise.success(bucket);\r\n                        }, promise.failure);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                getName: function(id) {\r\n                    return handler._getFileState(id).bucket;\r\n                }\r\n            },\r\n\r\n            host: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        cachedHost = handler._getFileState(id).host;\r\n\r\n                    if (cachedHost) {\r\n                        promise.success(cachedHost);\r\n                    }\r\n                    else {\r\n                        onGetHost(id).then(function(host) {\r\n                            handler._getFileState(id).host = host;\r\n                            promise.success(host);\r\n                        }, promise.failure);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                getName: function(id) {\r\n                    return handler._getFileState(id).host;\r\n                }\r\n            },\r\n\r\n            done: function(id, xhr) {\r\n                var response = upload.response.parse(id, xhr),\r\n                    isError = response.success !== true;\r\n\r\n                if (isError && upload.response.shouldReset(response.code)) {\r\n                    log(\"This is an unrecoverable error, we must restart the upload entirely on the next retry attempt.\", \"error\");\r\n                    response.reset = true;\r\n                }\r\n\r\n                return {\r\n                    success: !isError,\r\n                    response: response\r\n                };\r\n            },\r\n\r\n            key: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        key = handler.getThirdPartyFileId(id);\r\n\r\n                    /* jshint eqnull:true */\r\n                    if (key == null) {\r\n                        handler._setThirdPartyFileId(id, promise);\r\n                        onGetKeyName(id, getName(id)).then(\r\n                            function(keyName) {\r\n                                handler._setThirdPartyFileId(id, keyName);\r\n                                promise.success(keyName);\r\n                            },\r\n                            function(errorReason) {\r\n                                handler._setThirdPartyFileId(id, null);\r\n                                promise.failure(errorReason);\r\n                            }\r\n                        );\r\n                    }\r\n                    else if (qq.isGenericPromise(key)) {\r\n                        key.then(promise.success, promise.failure);\r\n                    }\r\n                    else {\r\n                        promise.success(key);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                urlSafe: function(id) {\r\n                    var encodedKey = handler.getThirdPartyFileId(id);\r\n                    return qq.s3.util.uriEscapePath(encodedKey);\r\n                }\r\n            },\r\n\r\n            response: {\r\n                parse: function(id, xhr) {\r\n                    var response = {},\r\n                        parsedErrorProps;\r\n\r\n                    try {\r\n                        log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\r\n\r\n                        if (xhr.status === expectedStatus) {\r\n                            response.success = true;\r\n                        }\r\n                        else {\r\n                            parsedErrorProps = upload.response.parseError(xhr.responseText);\r\n\r\n                            if (parsedErrorProps) {\r\n                                response.error = parsedErrorProps.message;\r\n                                response.code = parsedErrorProps.code;\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\r\n                    }\r\n\r\n                    return response;\r\n                },\r\n\r\n                /**\r\n                 * This parses an XML response by extracting the \"Message\" and \"Code\" elements that accompany AWS error responses.\r\n                 *\r\n                 * @param awsResponseXml XML response from AWS\r\n                 * @returns {object} Object w/ `code` and `message` properties, or undefined if we couldn't find error info in the XML document.\r\n                 */\r\n                parseError: function(awsResponseXml) {\r\n                    var parser = new DOMParser(),\r\n                        parsedDoc = parser.parseFromString(awsResponseXml, \"application/xml\"),\r\n                        errorEls = parsedDoc.getElementsByTagName(\"Error\"),\r\n                        errorDetails = {},\r\n                        codeEls, messageEls;\r\n\r\n                    if (errorEls.length) {\r\n                        codeEls = parsedDoc.getElementsByTagName(\"Code\");\r\n                        messageEls = parsedDoc.getElementsByTagName(\"Message\");\r\n\r\n                        if (messageEls.length) {\r\n                            errorDetails.message = messageEls[0].textContent;\r\n                        }\r\n\r\n                        if (codeEls.length) {\r\n                            errorDetails.code = codeEls[0].textContent;\r\n                        }\r\n\r\n                        return errorDetails;\r\n                    }\r\n                },\r\n\r\n                // Determine if the upload should be restarted on the next retry attempt\r\n                // based on the error code returned in the response from AWS.\r\n                shouldReset: function(errorCode) {\r\n                    /*jshint -W014 */\r\n                    return errorCode === \"EntityTooSmall\"\r\n                        || errorCode === \"InvalidPart\"\r\n                        || errorCode === \"InvalidPartOrder\"\r\n                        || errorCode === \"NoSuchUpload\";\r\n                }\r\n            },\r\n\r\n            start: function(id, optChunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                upload.key.promise(id).then(function() {\r\n                    upload.bucket.promise(id).then(function() {\r\n                        upload.host.promise(id).then(function() {\r\n                            /* jshint eqnull:true */\r\n                            if (optChunkIdx == null) {\r\n                                simple.send(id).then(promise.success, promise.failure);\r\n                            }\r\n                            else {\r\n                                chunked.send(id, optChunkIdx).then(promise.success, promise.failure);\r\n                            }\r\n                        });\r\n                    });\r\n                },\r\n                function(errorReason) {\r\n                    promise.failure({error: errorReason});\r\n                });\r\n\r\n                return promise;\r\n            },\r\n\r\n            track: function(id, xhr, optChunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                xhr.onreadystatechange = function() {\r\n                    if (xhr.readyState === 4) {\r\n                        var result;\r\n\r\n                        /* jshint eqnull:true */\r\n                        if (optChunkIdx == null) {\r\n                            result = upload.done(id, xhr);\r\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\r\n                        }\r\n                        else {\r\n                            chunked.done(id, xhr, optChunkIdx);\r\n                            result = upload.done(id, xhr);\r\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                return promise;\r\n            }\r\n        };\r\n\r\n    qq.extend(this, {\r\n        uploadChunk: upload.start,\r\n        uploadFile: upload.start\r\n    });\r\n\r\n    qq.extend(this, new qq.XhrUploadHandler({\r\n        options: qq.extend({namespace: \"s3\"}, spec),\r\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\r\n    }));\r\n\r\n    qq.override(this, function(super_) {\r\n        return {\r\n            expunge: function(id) {\r\n                var uploadId = handler._getPersistableData(id) && handler._getPersistableData(id).uploadId,\r\n                    existedInLocalStorage = handler._maybeDeletePersistedChunkData(id);\r\n\r\n                if (uploadId !== undefined && existedInLocalStorage) {\r\n                    requesters.abortMultipart.send(id, uploadId);\r\n                }\r\n\r\n                super_.expunge(id);\r\n            },\r\n\r\n            finalizeChunks: function(id) {\r\n                return chunked.combine(id);\r\n            },\r\n\r\n            _getLocalStorageId: function(id) {\r\n                var baseStorageId = super_._getLocalStorageId(id),\r\n                    bucketName = upload.bucket.getName(id);\r\n\r\n                return baseStorageId + \"-\" + bucketName;\r\n            }\r\n        };\r\n    });\r\n};\r\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to S3 buckets via the associated\n * AWS API.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        clockDrift = options.clockDrift,\n        onUuidChanged = proxy.onUuidChanged,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        onGetBucket = options.getBucket,\n        onGetKeyName = options.getKeyName,\n        filenameParam = options.filenameParam,\n        paramsStore = options.paramsStore,\n        endpointStore = options.endpointStore,\n        aclStore = options.aclStore,\n        reducedRedundancy = options.objectProperties.reducedRedundancy,\n        region = options.objectProperties.region,\n        serverSideEncryption = options.objectProperties.serverSideEncryption,\n        validation = options.validation,\n        signature = options.signature,\n        successRedirectUrl = options.iframeSupport.localBlankPagePath,\n        credentialsProvider = options.signature.credentialsProvider,\n        getSignatureAjaxRequester = new qq.s3.RequestSigner({\n            signatureSpec: signature,\n            cors: options.cors,\n            log: log\n        });\n\n    if (successRedirectUrl === undefined) {\n        throw new Error(\"successRedirectEndpoint MUST be defined if you intend to use browsers that do not support the File API!\");\n    }\n\n    /**\n     * Attempt to parse the contents of an iframe after receiving a response from the server.  If the contents cannot be\n     * read (perhaps due to a security error) it is safe to assume that the upload was not successful since Amazon should\n     * have redirected to a known endpoint that should provide a parseable response.\n     *\n     * @param id ID of the associated file\n     * @param iframe target of the form submit\n     * @returns {boolean} true if the contents can be read, false otherwise\n     */\n    function isValidResponse(id, iframe) {\n        var response,\n            endpoint = options.endpointStore.get(id),\n            bucket = handler._getFileState(id).bucket,\n            doc,\n            innerHtml,\n            responseData;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            responseData = qq.s3.util.parseIframeResponse(iframe);\n            if (responseData.bucket === bucket &&\n                responseData.key === qq.s3.util.encodeQueryStringParam(handler.getThirdPartyFileId(id))) {\n\n                return true;\n            }\n\n            log(\"Response from AWS included an unexpected bucket or key name.\", \"error\");\n\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n        }\n\n        return false;\n    }\n\n    function generateAwsParams(id) {\n        /*jshint -W040 */\n        var customParams = paramsStore.get(id);\n\n        customParams[filenameParam] = getName(id);\n\n        return qq.s3.util.generateAwsParams({\n            endpoint: endpointStore.get(id),\n            clockDrift: clockDrift,\n            params: customParams,\n            bucket: handler._getFileState(id).bucket,\n            key: handler.getThirdPartyFileId(id),\n            accessKey: credentialsProvider.get().accessKey,\n            sessionToken: credentialsProvider.get().sessionToken,\n            acl: aclStore.get(id),\n            minFileSize: validation.minSizeLimit,\n            maxFileSize: validation.maxSizeLimit,\n            successRedirectUrl: successRedirectUrl,\n            reducedRedundancy: reducedRedundancy,\n            region: region,\n            serverSideEncryption: serverSideEncryption,\n            signatureVersion: signature.version,\n            log: log\n        },\n        qq.bind(getSignatureAjaxRequester.getSignature, this, id));\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            endpoint = options.endpointStore.get(id),\n            fileName = getName(id);\n\n        generateAwsParams(id).then(function(params) {\n            var form = handler._initFormForUpload({\n                method: method,\n                endpoint: endpoint,\n                params: params,\n                paramsInBody: true,\n                targetName: iframe.name\n            });\n\n            promise.success(form);\n        }, function(errorMessage) {\n            promise.failure(errorMessage);\n            handleFinishedUpload(id, iframe, fileName, {error: errorMessage});\n        });\n\n        return promise;\n    }\n\n    function handleUpload(id) {\n        var iframe = handler._createIframe(id),\n            input = handler.getInput(id),\n            promise = new qq.Promise();\n\n        createForm(id, iframe).then(function(form) {\n            form.appendChild(input);\n\n            // Register a callback when the response comes in from S3\n            handler._attachLoadEvent(iframe, function(response) {\n                log(\"iframe loaded\");\n\n                // If the common response handler has determined success or failure immediately\n                if (response) {\n                    // If there is something fundamentally wrong with the response (such as iframe content is not accessible)\n                    if (response.success === false) {\n                        log(\"Amazon likely rejected the upload request\", \"error\");\n                        promise.failure(response);\n                    }\n                }\n                // The generic response (iframe onload) handler was not able to make a determination regarding the success of the request\n                else {\n                    response = {};\n                    response.success = isValidResponse(id, iframe);\n\n                    // If the more specific response handle detected a problem with the response from S3\n                    if (response.success === false) {\n                        log(\"A success response was received by Amazon, but it was invalid in some way.\", \"error\");\n                        promise.failure(response);\n                    }\n                    else {\n                        qq.extend(response, qq.s3.util.parseIframeResponse(iframe));\n                        promise.success(response);\n                    }\n                }\n\n                handleFinishedUpload(id, iframe);\n            });\n\n            log(\"Sending upload request for \" + id);\n            form.submit();\n            qq(form).remove();\n        }, promise.failure);\n\n        return promise;\n    }\n\n    function handleFinishedUpload(id, iframe) {\n        handler._detachLoadEvent(id);\n        iframe && qq(iframe).remove();\n    }\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: false,\n            inputName: \"file\"\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            onUuidChanged: onUuidChanged,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n\n    qq.extend(this, {\n        uploadFile: function(id) {\n            var name = getName(id),\n                promise = new qq.Promise();\n\n            if (handler.getThirdPartyFileId(id)) {\n                if (handler._getFileState(id).bucket) {\n                    handleUpload(id).then(promise.success, promise.failure);\n                }\n                else {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handleUpload(id).then(promise.success, promise.failure);\n                    });\n                }\n            }\n            else {\n                // The S3 uploader module will either calculate the key or ask the server for it\n                // and will call us back once it is known.\n                onGetKeyName(id, name).then(function(key) {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handler._setThirdPartyFileId(id, key);\n                        handleUpload(id).then(promise.success, promise.failure);\n                    }, function(errorReason) {\n                        promise.failure({error: errorReason});\n                    });\n                }, function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n            }\n\n            return promise;\n        }\n    });\n};\n","\n        qq.s3.createS3InlineWorkerUrl = function () {\n            return URL.createObjectURL(new Blob([\"// Fine Uploader 5.14.4 - (c) 2013-present Widen Enterprises, Inc. MIT licensed. http://fineuploader.com\\nfunction doTask(t,r){\\\"use strict\\\";var n=new FileReader;n.onloadend=function(t){if(t.target.readyState===FileReader.DONE)if(t.target.error)r(JSON.parse(JSON.stringify(t.target.error,null,2)));else{var n=qq.CryptoJS.lib.WordArray.create(t.target.result);r(null,qq.CryptoJS.SHA256(n).toString())}},n.readAsArrayBuffer(t)}qq={},qq.CryptoJS=function(t,r){var n={},e=n.lib={},i=e.Base=function(){function t(){}return{extend:function(r){t.prototype=this;var n=new t;return r&&n.mixIn(r),n.hasOwnProperty(\\\"init\\\")||(n.init=function(){n.$super.init.apply(this,arguments)}),n.init.prototype=n,n.$super=this,n},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var r in t)t.hasOwnProperty(r)&&(this[r]=t[r]);t.hasOwnProperty(\\\"toString\\\")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),s=e.WordArray=i.extend({init:function(t,n){t=this.words=t||[],n!=r?this.sigBytes=n:this.sigBytes=4*t.length},toString:function(t){return(t||o).stringify(this)},concat:function(t){var r=this.words,n=t.words,e=this.sigBytes,i=t.sigBytes;if(this.clamp(),e%4)for(var s=0;s<i;s++){var a=n[s>>>2]>>>24-s%4*8&255;r[e+s>>>2]|=a<<24-(e+s)%4*8}else if(n.length>65535)for(var s=0;s<i;s+=4)r[e+s>>>2]=n[s>>>2];else r.push.apply(r,n);return this.sigBytes+=i,this},clamp:function(){var r=this.words,n=this.sigBytes;r[n>>>2]&=4294967295<<32-n%4*8,r.length=t.ceil(n/4)},clone:function(){var t=i.clone.call(this);return t.words=this.words.slice(0),t},random:function(r){for(var n=[],e=0;e<r;e+=4)n.push(4294967296*t.random()|0);return new s.init(n,r)}}),a=n.enc={},o=a.Hex={stringify:function(t){for(var r=t.words,n=t.sigBytes,e=[],i=0;i<n;i++){var s=r[i>>>2]>>>24-i%4*8&255;e.push((s>>>4).toString(16)),e.push((15&s).toString(16))}return e.join(\\\"\\\")},parse:function(t){for(var r=t.length,n=[],e=0;e<r;e+=2)n[e>>>3]|=parseInt(t.substr(e,2),16)<<24-e%8*4;return new s.init(n,r/2)}},c=a.Latin1={stringify:function(t){for(var r=t.words,n=t.sigBytes,e=[],i=0;i<n;i++){var s=r[i>>>2]>>>24-i%4*8&255;e.push(String.fromCharCode(s))}return e.join(\\\"\\\")},parse:function(t){for(var r=t.length,n=[],e=0;e<r;e++)n[e>>>2]|=(255&t.charCodeAt(e))<<24-e%4*8;return new s.init(n,r)}},f=a.Utf8={stringify:function(t){try{return decodeURIComponent(escape(c.stringify(t)))}catch(t){throw new Error(\\\"Malformed UTF-8 data\\\")}},parse:function(t){return c.parse(unescape(encodeURIComponent(t)))}},h=e.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(t){\\\"string\\\"==typeof t&&(t=f.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(r){var n=this._data,e=n.words,i=n.sigBytes,a=this.blockSize,o=4*a,c=i/o;c=r?t.ceil(c):t.max((0|c)-this._minBufferSize,0);var f=c*a,h=t.min(4*f,i);if(f){for(var u=0;u<f;u+=a)this._doProcessBlock(e,u);var l=e.splice(0,f);n.sigBytes-=h}return new s.init(l,h)},clone:function(){var t=i.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),u=(e.Hasher=h.extend({cfg:i.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){h.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){t&&this._append(t);var r=this._doFinalize();return r},blockSize:16,_createHelper:function(t){return function(r,n){return new t.init(n).finalize(r)}},_createHmacHelper:function(t){return function(r,n){return new u.HMAC.init(t,n).finalize(r)}}}),n.algo={});return n}(Math),function(){var t=qq.CryptoJS,r=t.lib,n=r.WordArray,e=t.enc;e.Base64={stringify:function(t){var r=t.words,n=t.sigBytes,e=this._map;t.clamp();for(var i=[],s=0;s<n;s+=3)for(var a=r[s>>>2]>>>24-s%4*8&255,o=r[s+1>>>2]>>>24-(s+1)%4*8&255,c=r[s+2>>>2]>>>24-(s+2)%4*8&255,f=a<<16|o<<8|c,h=0;h<4&&s+.75*h<n;h++)i.push(e.charAt(f>>>6*(3-h)&63));var u=e.charAt(64);if(u)for(;i.length%4;)i.push(u);return i.join(\\\"\\\")},parse:function(t){var r=t.length,e=this._map,i=e.charAt(64);if(i){var s=t.indexOf(i);s!=-1&&(r=s)}for(var a=[],o=0,c=0;c<r;c++)if(c%4){var f=e.indexOf(t.charAt(c-1))<<c%4*2,h=e.indexOf(t.charAt(c))>>>6-c%4*2;a[o>>>2]|=(f|h)<<24-o%4*8,o++}return n.create(a,o)},_map:\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\\"}}(),function(){var t=qq.CryptoJS,r=t.lib,n=r.Base,e=t.enc,i=e.Utf8,s=t.algo;s.HMAC=n.extend({init:function(t,r){t=this._hasher=new t.init,\\\"string\\\"==typeof r&&(r=i.parse(r));var n=t.blockSize,e=4*n;r.sigBytes>e&&(r=t.finalize(r)),r.clamp();for(var s=this._oKey=r.clone(),a=this._iKey=r.clone(),o=s.words,c=a.words,f=0;f<n;f++)o[f]^=1549556828,c[f]^=909522486;s.sigBytes=a.sigBytes=e,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var r=this._hasher,n=r.finalize(t);r.reset();var e=r.finalize(this._oKey.clone().concat(n));return e}})}(),function(){var t=qq.CryptoJS,r=t.lib,n=r.WordArray,e=r.Hasher,i=t.algo,s=[],a=i.SHA1=e.extend({_doReset:function(){this._hash=new n.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,r){for(var n=this._hash.words,e=n[0],i=n[1],a=n[2],o=n[3],c=n[4],f=0;f<80;f++){if(f<16)s[f]=0|t[r+f];else{var h=s[f-3]^s[f-8]^s[f-14]^s[f-16];s[f]=h<<1|h>>>31}var u=(e<<5|e>>>27)+c+s[f];u+=f<20?(i&a|~i&o)+1518500249:f<40?(i^a^o)+1859775393:f<60?(i&a|i&o|a&o)-1894007588:(i^a^o)-899497514,c=o,o=a,a=i<<30|i>>>2,i=e,e=u}n[0]=n[0]+e|0,n[1]=n[1]+i|0,n[2]=n[2]+a|0,n[3]=n[3]+o|0,n[4]=n[4]+c|0},_doFinalize:function(){var t=this._data,r=t.words,n=8*this._nDataBytes,e=8*t.sigBytes;return r[e>>>5]|=128<<24-e%32,r[(e+64>>>9<<4)+14]=Math.floor(n/4294967296),r[(e+64>>>9<<4)+15]=n,t.sigBytes=4*r.length,this._process(),this._hash},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t}});t.SHA1=e._createHelper(a),t.HmacSHA1=e._createHmacHelper(a)}(),function(t){var r=qq.CryptoJS,n=r.lib,e=n.WordArray,i=n.Hasher,s=r.algo,a=[],o=[];!function(){function r(r){for(var n=t.sqrt(r),e=2;e<=n;e++)if(!(r%e))return!1;return!0}function n(t){return 4294967296*(t-(0|t))|0}for(var e=2,i=0;i<64;)r(e)&&(i<8&&(a[i]=n(t.pow(e,.5))),o[i]=n(t.pow(e,1/3)),i++),e++}();var c=[],f=s.SHA256=i.extend({_doReset:function(){this._hash=new e.init(a.slice(0))},_doProcessBlock:function(t,r){for(var n=this._hash.words,e=n[0],i=n[1],s=n[2],a=n[3],f=n[4],h=n[5],u=n[6],l=n[7],p=0;p<64;p++){if(p<16)c[p]=0|t[r+p];else{var d=c[p-15],y=(d<<25|d>>>7)^(d<<14|d>>>18)^d>>>3,g=c[p-2],v=(g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10;c[p]=y+c[p-7]+v+c[p-16]}var _=f&h^~f&u,w=e&i^e&s^i&s,A=(e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22),B=(f<<26|f>>>6)^(f<<21|f>>>11)^(f<<7|f>>>25),S=l+B+_+o[p]+c[p],m=A+w;l=u,u=h,h=f,f=a+S|0,a=s,s=i,i=e,e=S+m|0}n[0]=n[0]+e|0,n[1]=n[1]+i|0,n[2]=n[2]+s|0,n[3]=n[3]+a|0,n[4]=n[4]+f|0,n[5]=n[5]+h|0,n[6]=n[6]+u|0,n[7]=n[7]+l|0},_doFinalize:function(){var r=this._data,n=r.words,e=8*this._nDataBytes,i=8*r.sigBytes;return n[i>>>5]|=128<<24-i%32,n[(i+64>>>9<<4)+14]=t.floor(e/4294967296),n[(i+64>>>9<<4)+15]=e,r.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});r.SHA256=i._createHelper(f),r.HmacSHA256=i._createHmacHelper(f)}(Math),function(){if(\\\"function\\\"==typeof ArrayBuffer){var t=qq.CryptoJS,r=t.lib,n=r.WordArray,e=n.init,i=n.init=function(t){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),(t instanceof Int8Array||t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)&&(t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)),t instanceof Uint8Array){for(var r=t.byteLength,n=[],i=0;i<r;i++)n[i>>>2]|=t[i]<<24-i%4*8;e.call(this,n,r)}else e.apply(this,arguments)};i.prototype=n}}(),onmessage=function(t){\\\"use strict\\\";doTask(t.data.file,function(r,n){postMessage({err:r,resp:n,id:t.data.id})})};\\n//# sourceMappingURL=s3.fine-uploader.worker.js.map\"], {type: \"application/javascript\"}));\n        };\n    ","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\r\n/**\r\n * Defines the public API for FineUploader mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.uiPublicApi = {\r\n        addInitialFiles: function(cannedFileList) {\r\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\r\n            this._templating.addCacheToDom();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\r\n            this._templating.clearFiles();\r\n        },\r\n\r\n        addExtraDropzone: function(element) {\r\n            this._dnd && this._dnd.setupExtraDropzone(element);\r\n        },\r\n\r\n        removeExtraDropzone: function(element) {\r\n            if (this._dnd) {\r\n                return this._dnd.removeDropzone(element);\r\n            }\r\n        },\r\n\r\n        getItemByFileId: function(id) {\r\n            if (!this._templating.isHiddenForever(id)) {\r\n                return this._templating.getFileContainer(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            this._parent.prototype.reset.apply(this, arguments);\r\n            this._templating.reset();\r\n\r\n            if (!this._options.button && this._templating.getButton()) {\r\n                this._defaultButtonId = this._createUploadButton({\r\n                    element: this._templating.getButton(),\r\n                    title: this._options.text.fileInputTitle\r\n                }).getButtonId();\r\n            }\r\n\r\n            if (this._dnd) {\r\n                this._dnd.dispose();\r\n                this._dnd = this._setupDragAndDrop();\r\n            }\r\n\r\n            this._totalFilesInBatch = 0;\r\n            this._filesInBatchAddedToUi = 0;\r\n\r\n            this._setupClickAndEditEventHandlers();\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            var formattedFilename = this._options.formatFileName(newName);\r\n\r\n            this._parent.prototype.setName.apply(this, arguments);\r\n            this._templating.updateFilename(id, formattedFilename);\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\r\n\r\n            paused && this._templating.uploadPaused(id);\r\n            return paused;\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\r\n\r\n            continued && this._templating.uploadContinued(id);\r\n            return continued;\r\n        },\r\n\r\n        getId: function(fileContainerOrChildEl) {\r\n            return this._templating.getFileId(fileContainerOrChildEl);\r\n        },\r\n\r\n        getDropTarget: function(fileId) {\r\n            var file = this.getFile(fileId);\r\n\r\n            return file.qqDropTarget;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploader mode.\r\n     */\r\n    qq.uiPrivateApi = {\r\n        _getButton: function(buttonId) {\r\n            var button = this._parent.prototype._getButton.apply(this, arguments);\r\n\r\n            if (!button) {\r\n                if (buttonId === this._defaultButtonId) {\r\n                    button = this._templating.getButton();\r\n                }\r\n            }\r\n\r\n            return button;\r\n        },\r\n\r\n        _removeFileItem: function(fileId) {\r\n            this._templating.removeFile(fileId);\r\n        },\r\n\r\n        _setupClickAndEditEventHandlers: function() {\r\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\r\n\r\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\r\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\r\n            this._focusinEventSupported = !qq.firefox();\r\n\r\n            if (this._isEditFilenameEnabled())\r\n            {\r\n                this._filenameClickHandler = this._bindFilenameClickEvent();\r\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\r\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\r\n            }\r\n        },\r\n\r\n        _setupDragAndDrop: function() {\r\n            var self = this,\r\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\r\n                templating = this._templating,\r\n                defaultDropZone = templating.getDropZone();\r\n\r\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\r\n\r\n            return new qq.DragAndDrop({\r\n                dropZoneElements: dropZoneElements,\r\n                allowMultipleItems: this._options.multiple,\r\n                classes: {\r\n                    dropActive: this._options.classes.dropActive\r\n                },\r\n                callbacks: {\r\n                    processingDroppedFiles: function() {\r\n                        templating.showDropProcessing();\r\n                    },\r\n                    processingDroppedFilesComplete: function(files, targetEl) {\r\n                        templating.hideDropProcessing();\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            file.qqDropTarget = targetEl;\r\n                        });\r\n\r\n                        if (files.length) {\r\n                            self.addFiles(files, null, null);\r\n                        }\r\n                    },\r\n                    dropError: function(code, errorData) {\r\n                        self._itemError(code, errorData);\r\n                    },\r\n                    dropLog: function(message, level) {\r\n                        self.log(message, level);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _bindFileButtonsClickEvent: function() {\r\n            var self = this;\r\n\r\n            return new qq.FileButtonsClickHandler({\r\n                templating: this._templating,\r\n\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n\r\n                onDeleteFile: function(fileId) {\r\n                    self.deleteFile(fileId);\r\n                },\r\n\r\n                onCancel: function(fileId) {\r\n                    self.cancel(fileId);\r\n                },\r\n\r\n                onRetry: function(fileId) {\r\n                    self.retry(fileId);\r\n                },\r\n\r\n                onPause: function(fileId) {\r\n                    self.pauseUpload(fileId);\r\n                },\r\n\r\n                onContinue: function(fileId) {\r\n                    self.continueUpload(fileId);\r\n                },\r\n\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                }\r\n            });\r\n        },\r\n\r\n        _isEditFilenameEnabled: function() {\r\n            /*jshint -W014 */\r\n            return this._templating.isEditFilenamePossible()\r\n                && !this._options.autoUpload\r\n                && qq.FilenameClickHandler\r\n                && qq.FilenameInputFocusHandler\r\n                && qq.FilenameInputFocusHandler;\r\n        },\r\n\r\n        _filenameEditHandler: function() {\r\n            var self = this,\r\n                templating = this._templating;\r\n\r\n            return {\r\n                templating: templating,\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n                onGetUploadStatus: function(fileId) {\r\n                    return self.getUploads({id: fileId}).status;\r\n                },\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                },\r\n                onSetName: function(id, newName) {\r\n                    self.setName(id, newName);\r\n                },\r\n                onEditingStatusChange: function(id, isEditing) {\r\n                    var qqInput = qq(templating.getEditInput(id)),\r\n                        qqFileContainer = qq(templating.getFileContainer(id));\r\n\r\n                    if (isEditing) {\r\n                        qqInput.addClass(\"qq-editing\");\r\n                        templating.hideFilename(id);\r\n                        templating.hideEditIcon(id);\r\n                    }\r\n                    else {\r\n                        qqInput.removeClass(\"qq-editing\");\r\n                        templating.showFilename(id);\r\n                        templating.showEditIcon(id);\r\n                    }\r\n\r\n                    // Force IE8 and older to repaint\r\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\r\n                }\r\n            };\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\r\n\r\n            if (this._isEditFilenameEnabled()) {\r\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\r\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\r\n                    this._templating.markFilenameEditable(id);\r\n                    this._templating.hideEditIcon(id);\r\n                }\r\n            }\r\n\r\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\r\n                this._templating.hideRetry(id);\r\n                this._templating.setStatusText(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\r\n            }\r\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\r\n                this._templating.hidePause(id);\r\n            }\r\n        },\r\n\r\n        _bindFilenameInputFocusInEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusInHandler(spec);\r\n        },\r\n\r\n        _bindFilenameInputFocusEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusHandler(spec);\r\n        },\r\n\r\n        _bindFilenameClickEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameClickHandler(spec);\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._parent.prototype._storeForLater.apply(this, arguments);\r\n            this._templating.hideSpinner(id);\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._parent.prototype._onAllComplete.apply(this, arguments);\r\n            this._templating.resetTotalProgress();\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            var file = this.getFile(id);\r\n\r\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\r\n                this._paramsStore.addReadOnly(id, {\r\n                    qqpath: file.qqPath\r\n                });\r\n            }\r\n\r\n            this._parent.prototype._onSubmit.apply(this, arguments);\r\n            this._addToList(id, name);\r\n        },\r\n\r\n        // The file item has been added to the DOM.\r\n        _onSubmitted: function(id) {\r\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\r\n            if (this._isEditFilenameEnabled()) {\r\n                this._templating.markFilenameEditable(id);\r\n                this._templating.showEditIcon(id);\r\n\r\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\r\n                if (!this._focusinEventSupported) {\r\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\r\n                }\r\n            }\r\n        },\r\n\r\n        // Update the progress bar & percentage as the file is uploaded\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._parent.prototype._onProgress.apply(this, arguments);\r\n\r\n            this._templating.updateProgress(id, loaded, total);\r\n\r\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\r\n                this._templating.hideCancel(id);\r\n                this._templating.hidePause(id);\r\n                this._templating.hideProgress(id);\r\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\r\n\r\n                // If ~last byte was sent, display total file size\r\n                this._displayFileSize(id);\r\n            }\r\n            else {\r\n                // If still uploading, display percentage - total size is actually the total request(s) size\r\n                this._displayFileSize(id, loaded, total);\r\n            }\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\r\n            this._templating.updateTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\r\n                templating = this._templating,\r\n                fileContainer = templating.getFileContainer(id),\r\n                self = this;\r\n\r\n            function completeUpload(result) {\r\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\r\n                // If so, don't perform any UI-related tasks related to this file.\r\n                if (!fileContainer) {\r\n                    return;\r\n                }\r\n\r\n                templating.setStatusText(id);\r\n\r\n                qq(fileContainer).removeClass(self._classes.retrying);\r\n                templating.hideProgress(id);\r\n\r\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\r\n                    templating.hideCancel(id);\r\n                }\r\n                templating.hideSpinner(id);\r\n\r\n                if (result.success) {\r\n                    self._markFileAsSuccessful(id);\r\n                }\r\n                else {\r\n                    qq(fileContainer).addClass(self._classes.fail);\r\n                    templating.showCancel(id);\r\n\r\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\r\n                        qq(fileContainer).addClass(self._classes.retryable);\r\n                        templating.showRetry(id);\r\n                    }\r\n                    self._controlFailureTextDisplay(id, result);\r\n                }\r\n            }\r\n\r\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\r\n            if (parentRetVal instanceof qq.Promise) {\r\n                parentRetVal.done(function(newResult) {\r\n                    completeUpload(newResult);\r\n                });\r\n\r\n            }\r\n            else {\r\n                completeUpload(result);\r\n            }\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _markFileAsSuccessful: function(id) {\r\n            var templating = this._templating;\r\n\r\n            if (this._isDeletePossible()) {\r\n                templating.showDeleteButton(id);\r\n            }\r\n\r\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\r\n\r\n            this._maybeUpdateThumbnail(id);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\r\n            this._templating.showSpinner(id);\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\r\n\r\n            this._templating.showSpinner(id);\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\r\n\r\n            // Only display the pause button if we have finished uploading at least one chunk\r\n            // & this file can be resumed\r\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\r\n                this._templating.allowPause(id);\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._parent.prototype._onCancel.apply(this, arguments);\r\n            this._removeFileItem(id);\r\n\r\n            if (this._getNotFinished() === 0) {\r\n                this._templating.resetTotalProgress();\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id) {\r\n            var retryNumForDisplay, maxAuto, retryNote;\r\n\r\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\r\n\r\n            this._showCancelLink(id);\r\n\r\n            if (this._options.retry.showAutoRetryNote) {\r\n                retryNumForDisplay = this._autoRetries[id];\r\n                maxAuto = this._options.retry.maxAutoAttempts;\r\n\r\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\r\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\r\n\r\n                this._templating.setStatusText(id, retryNote);\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\r\n            }\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\r\n                this._templating.resetProgress(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\r\n                this._templating.setStatusText(id);\r\n                this._templating.showSpinner(id);\r\n                this._showCancelLink(id);\r\n                return true;\r\n            }\r\n            else {\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\r\n                this._templating.showRetry(id);\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id) {\r\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\r\n\r\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\r\n        },\r\n\r\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\r\n            if (this._options.deleteFile.forceConfirm) {\r\n                this._showDeleteConfirm.apply(this, arguments);\r\n            }\r\n            else {\r\n                this._sendDeleteRequest.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhr, isError) {\r\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\r\n\r\n            this._templating.hideSpinner(id);\r\n\r\n            if (isError) {\r\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\r\n                this._templating.showDeleteButton(id);\r\n            }\r\n            else {\r\n                this._removeFileItem(id);\r\n            }\r\n        },\r\n\r\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\r\n            this._templating.hideDeleteButton(id);\r\n            this._templating.showSpinner(id);\r\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\r\n            this._deleteHandler.sendDelete.apply(this, arguments);\r\n        },\r\n\r\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\r\n            /*jshint -W004 */\r\n            var fileName = this.getName(id),\r\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\r\n                uuid = this.getUuid(id),\r\n                deleteRequestArgs = arguments,\r\n                self = this,\r\n                retVal;\r\n\r\n            retVal = this._options.showConfirm(confirmMessage);\r\n\r\n            if (qq.isGenericPromise(retVal)) {\r\n                retVal.then(function() {\r\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n                });\r\n            }\r\n            else if (retVal !== false) {\r\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n            }\r\n        },\r\n\r\n        _addToList: function(id, name, canned) {\r\n            var prependData,\r\n                prependIndex = 0,\r\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\r\n                record;\r\n\r\n            if (this._options.display.prependFiles) {\r\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\r\n                    prependIndex = this._filesInBatchAddedToUi - 1;\r\n                }\r\n\r\n                prependData = {\r\n                    index: prependIndex\r\n                };\r\n            }\r\n\r\n            if (!canned) {\r\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\r\n                    this._templating.disableCancel();\r\n                }\r\n\r\n                // Cancel all existing (previous) files and clear the list if this file is not part of\r\n                // a scaled file group that has already been accepted, or if this file is not part of\r\n                // a scaled file group at all.\r\n                if (!this._options.multiple) {\r\n                    record = this.getUploads({id: id});\r\n\r\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\r\n\r\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\r\n                        this._handler.cancelAll();\r\n                        this._clearList();\r\n                        this._handledProxyGroup = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (canned) {\r\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\r\n            }\r\n            else {\r\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\r\n            }\r\n\r\n            this._filesInBatchAddedToUi += 1;\r\n\r\n            if (canned ||\r\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\r\n\r\n                this._displayFileSize(id);\r\n            }\r\n        },\r\n\r\n        _clearList: function() {\r\n            this._templating.clearFiles();\r\n            this.clearStoredFiles();\r\n        },\r\n\r\n        _displayFileSize: function(id, loadedSize, totalSize) {\r\n            var size = this.getSize(id),\r\n                sizeForDisplay = this._formatSize(size);\r\n\r\n            if (size >= 0) {\r\n                if (loadedSize !== undefined && totalSize !== undefined) {\r\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\r\n                }\r\n\r\n                this._templating.updateSize(id, sizeForDisplay);\r\n            }\r\n        },\r\n\r\n        _formatProgress: function(uploadedSize, totalSize) {\r\n            var message = this._options.text.formatProgress;\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\r\n            r(\"{total_size}\", this._formatSize(totalSize));\r\n            return message;\r\n        },\r\n\r\n        _controlFailureTextDisplay: function(id, response) {\r\n            var mode, responseProperty, failureReason;\r\n\r\n            mode = this._options.failedUploadTextDisplay.mode;\r\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\r\n\r\n            if (mode === \"custom\") {\r\n                failureReason = response[responseProperty];\r\n                if (!failureReason) {\r\n                    failureReason = this._options.text.failUpload;\r\n                }\r\n\r\n                this._templating.setStatusText(id, failureReason);\r\n\r\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\r\n                    this._showTooltip(id, failureReason);\r\n                }\r\n            }\r\n            else if (mode === \"default\") {\r\n                this._templating.setStatusText(id, this._options.text.failUpload);\r\n            }\r\n            else if (mode !== \"none\") {\r\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\r\n            }\r\n        },\r\n\r\n        _showTooltip: function(id, text) {\r\n            this._templating.getFileContainer(id).title = text;\r\n        },\r\n\r\n        _showCancelLink: function(id) {\r\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\r\n                this._templating.showCancel(id);\r\n            }\r\n        },\r\n\r\n        _itemError: function(code, name, item) {\r\n            var message = this._parent.prototype._itemError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._parent.prototype._batchError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _setupPastePrompt: function() {\r\n            var self = this;\r\n\r\n            this._options.callbacks.onPasteReceived = function() {\r\n                var message = self._options.paste.namePromptMessage,\r\n                    defaultVal = self._options.paste.defaultName;\r\n\r\n                return self._options.showPrompt(message, defaultVal);\r\n            };\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id, name) {\r\n            this._totalFilesInBatch -= 1;\r\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            this._totalFilesInBatch = items.length;\r\n            this._filesInBatchAddedToUi = 0;\r\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\r\n        },\r\n\r\n        _maybeUpdateThumbnail: function(fileId) {\r\n            var thumbnailUrl = this._thumbnailUrls[fileId],\r\n                fileStatus = this.getUploads({id: fileId}).status;\r\n\r\n            if (fileStatus !== qq.status.DELETED &&\r\n                (thumbnailUrl ||\r\n                this._options.thumbnails.placeholders.waitUntilResponse ||\r\n                !qq.supportedFeatures.imagePreviews)) {\r\n\r\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\r\n                // if called with a null thumbnailUrl.\r\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\r\n            }\r\n        },\r\n\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\r\n\r\n            this._addToList(id, this.getName(id), true);\r\n            this._templating.hideSpinner(id);\r\n            this._templating.hideCancel(id);\r\n            this._markFileAsSuccessful(id);\r\n\r\n            return id;\r\n        },\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._parent.prototype._setSize.apply(this, arguments);\r\n\r\n            this._templating.updateSize(id, this._formatSize(newSize));\r\n        },\r\n\r\n        _sessionRequestComplete: function() {\r\n            this._templating.addCacheToDom();\r\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\r\n        }\r\n    };\r\n}());\r\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to S3.\n * This module inherits all logic from FineUploader mode and FineUploaderBasicS3 mode and adds some UI-related logic\n * specific to the upload-to-S3 workflow.  Some inherited options and API methods have a special meaning\n * in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from s3.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"s3\");\n\n        if (!qq.supportedFeatures.ajaxUploading && options.iframeSupport.localBlankPagePath === undefined) {\n            this._options.element.innerHTML = \"<div>You MUST set the <code>localBlankPagePath</code> property \" +\n                \"of the <code>iframeSupport</code> option since this browser does not support the File API!</div>\";\n        }\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.s3.FineUploader.prototype, qq.s3.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPrivateApi);\n}());\n"]}