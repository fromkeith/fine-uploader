{"version":3,"sources":["?","../client/js/jquery-plugin.js","../client/js/s3/jquery-plugin.js","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","3rdparty-temp/core.js","3rdparty-temp/enc-base64.js","3rdparty-temp/hmac.js","3rdparty-temp/sha1.js","3rdparty-temp/sha256.js","3rdparty-temp/lib-typedarrays.js","../client/js/s3/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/s3/uploader.basic.js","../client/js/s3/request-signer.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/s3/multipart.initiate.ajax.requester.js","../client/js/s3/multipart.complete.ajax.requester.js","../client/js/s3/multipart.abort.ajax.requester.js","../client/js/s3/s3.xhr.upload.handler.js","../client/js/s3/s3.form.upload.handler.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/s3/uploader.js"],"names":["global","$","$el","pluginOptions","init","options","xformedOpts","transformVariables","newUploaderInstance","getNewUploaderInstance","uploader","addCallbacks","params","uploaderType","pluginOption","namespace","charAt","toUpperCase","slice","toLowerCase","qq","FineUploader","dataStore","key","val","data","undefined","instanceToStore","option","optionVal","transformedOpts","callbacks","each","_options","prop","nonJqueryCallback","name","callbackEventTarget","exec","substring","originalArgs","Array","prototype","call","arguments","transformedArgs","nonJqueryCallbackRetVal","jqueryEventCallbackRetVal","idx","arg","push","maybeWrapInJquery","apply","this","triggerHandler","error","log","message","source","dest","xformed","arrayVals","element","inArray","isPlainObject","isArray","arrayVal","arrayObjDest","merge","isValidCommand","command","type","match","delegateCommand","xformedArgs","origArgs","retVal","transformedVal","nodeType","cloneNode","fn","fineUploader","optionsOrCommand","self","selfArgs","retVals","index","el","length","jQuery","fineUploaderS3","endpointType","hide","style","display","attach","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","getFirstByClass","children","child","firstChild","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","getAttribute","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","Uint8Array","character","charCodeAt","level","console","isObject","variable","Object","toString","isFunction","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","newStr","nextIdxToReplace","strBefore","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","override","target","sourceFn","super_","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","Storage","getItem","bind","oldFunc","context","newArgs","concat","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","disposeSupport","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_onDeleteComplete","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","UploadHandlerController","_fileOrBlobRejected","_formatSize","max","toFixed","sizeSymbols","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","expunge","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","errorMessage","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","paramsInBody","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partIndex","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","alreadyInWaiting","alreadyInOpen","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","root","factory","undef","CryptoJS","F","subtype","C","C_lib","lib","Base","overrides","mixIn","$super","instance","properties","propertyName","clone","WordArray","words","sigBytes","encoder","Hex","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","nBytes","m_w","m_z","mask","rcache","_r","C_enc","enc","hexChars","bite","hexStr","hexStrLength","Latin1","latin1Chars","fromCharCode","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","utf8Str","unescape","BufferedBlockAlgorithm","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","_minBufferSize","nWordsReady","nBytesReady","min","_doProcessBlock","processedWords","Hasher","cfg","_doReset","update","messageUpdate","hash","_doFinalize","_createHelper","hasher","_createHmacHelper","C_algo","HMAC","algo","Base64","map","_map","base64Chars","byte1","byte2","byte3","triplet","j","paddingChar","base64Str","base64StrLength","reverseMap","_reverseMap","paddingIndex","parseLoop","bits1","bits2","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac","W","SHA1","_hash","M","H","n","t","nBitsTotal","nBitsLeft","floor","HmacSHA1","K","isPrime","sqrtN","factor","getFractionalBits","nPrime","SHA256","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","HmacSHA256","superInit","subInit","typedArray","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","byteOffset","byteLength","typedArrayByteLength","s3","util","ALGORITHM_PARAM_NAME","AWS_PARAM_PREFIX","CREDENTIAL_PARAM_NAME","DATE_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_VALUE","SERVER_SIDE_ENCRYPTION_PARAM_NAME","SERVER_SIDE_ENCRYPTION_PARAM_VALUE","SESSION_TOKEN_PARAM_NAME","V4_ALGORITHM_PARAM_VALUE","V4_SIGNATURE_PARAM_NAME","CASE_SENSITIVE_PARAM_NAMES","UNSIGNABLE_REST_HEADER_NAMES","UNPREFIXED_PARAM_NAMES","getBucket","patterns","bucket","pattern","_getPrefixedParamName","getPolicy","policy","conditions","date","drift","clockDrift","accessKey","acl","expectedStatus","sessionToken","successRedirectUrl","getSuccessRedirectAbsoluteUrl","minFileSize","maxFileSize","reducedRedundancy","region","serverSideEncryption","signatureVersion","expiration","getPolicyExpirationDate","Content-Type","success_action_status","success_action_redirect","getV4CredentialsString","getV4PolicyDate","awsParamName","enforceSizeLimits","refreshPolicyCredentials","newSessionToken","sessionTokenFound","oldCondIdx","oldCondObj","oldCondName","oldCondVal","generateAwsParams","signPolicyCallback","awsParams","customParams","policyJson","AWSAccessKeyId","policyAndSignature","updatedAccessKey","updatedSessionToken","signature","minSize","adjustedMinSize","adjustedMaxSize","adjustedDate","getPolicyDate","getCredentialsDate","getUTCFullYear","getUTCMonth","getUTCDate","_minutesToAdd_","minutesToAdd","pad","setMinutes","getMinutes","toISOString","number","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseIframeResponse","doc","contentWindow","queryString","search","etag","targetAnchorContainer","encodeQueryStringParam","percentEncoded","uriEscape","uriEscapePath","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","objectProperties","host","credentials","secretKey","iframeSupport","localBlankPagePath","onCredentialsExpired","setCredentials","_currentCredentials","_aclStore","_cannedKeys","_cannedBuckets","_buckets","_hosts","getKey","ignoreEmpty","setAcl","aclStore","_determineBucket","getHost","_determineHost","getKeyName","_determineKeyName","maxSizeLimit","oldParams","modifiedParams","paramName","credentialsProvider","onExpired","updateCredentials","_determineObjectPropertyValue","property","maybe","keynameLogic","onGetKeynameFailure","onGetKeynameSuccess","keyname","keynameToUse","_handleKeynameFunction","keynameFunc","successCallback","failureCallback","getResponseHeader","s3Key","s3Bucket","RequestSigner","thisSignatureRequester","pendingSignatures","expectingPolicy","signatureSpec","useWorker","generateHeaders","signatureConstructor","getHeaders","Authorization","getRequestDate","getSignedHeaders","getEndOfUrl","v2","getStringToSign","contentMd5","headersStr","endOfUrl","signApiRequest","signatureEffort","headersWordArray","headersHmacSha1","headersHmacSha1Base64","signPolicy","policyStr","policyWordArray","base64Policy","policyHmacSha1","policyHmacSha1Base64","v4","getCanonicalQueryString","endOfUri","queryParamIdx","canonicalQueryString","encodedQueryParams","encodedQueryParamNames","queryStrings","nameAndVal","paramVal","forEach","encodedQueryParamName","getCanonicalRequest","getCanonicalUri","headerNames","hashedContent","getEncodedHashedPayload","_worker","workerUrl","worker","Worker","_workerPromises","onmessage","resp","task","onloadend","DONE","getScope","canonicalRequest","hashedRequest","scope","stringToSignTemplate","hashed","raw","signedHeaders","headerName","headersPattern","matches","dateKey","dateRegionKey","dateRegionServiceKey","signingKey","credentialPattern","credentialCondition","credential","condition","handleSignatureReceived","responseJson","pendingSignatureData","invalid","getStringToSignArtifacts","requestInfo","toSign","generateStringToSign","headerIndexesToRemove","headerIdx","toSignRaw","REQUEST_TYPE","MULTIPART_ABORT","uploadId","MULTIPART_INITIATE","MULTIPART_COMPLETE","MULTIPART_UPLOAD","partNum","content","Host","determineSignatureClientSide","toBeSigned","updatedHeaders","getToSign","signatureArtifacts","stringToSign","getSignature","queryParams","stringToSignRaw","constructStringToSign","artifacts","theHeaders","withUploadId","theUploadId","withContent","theContent","withContentType","theContentType","withPartNum","thePartNum","toUTCString","_artifacts_","pendingRequests","handleSuccessResponse","successIndicator","failureIndicator","parsedResponse","InitiateMultipartAjaxRequester","pendingInitiateRequests","getContentType","getSignatureAjaxRequester","handleInitiateRequestComplete","domParser","DOMParser","responseDoc","parseFromString","uploadIdElements","messageElements","CompleteMultipartAjaxRequester","pendingCompleteRequests","handleCompleteRequestComplete","bucketEls","keyEls","getCompleteRequestBody","etagEntries","implementation","createDocument","etagEntry","partEl","partNumEl","partNumTextEl","createTextNode","etagTextEl","etagEl","XMLSerializer","serializeToString","AbortMultipartAjaxRequester","handleAbortRequestComplete","errorEls","awsErrorMsg","onGetBucket","onGetHost","onGetKeyName","combine","etagMap","etags","requesters","completeMultipart","initHeaders","urlSafe","restSignature","put","domain","track","setup","uploadIdPromise","initiateMultipart","abortMultipart","policySignature","initParams","toSend","cachedBucket","cachedHost","shouldReset","keyName","encodedKey","parsedErrorProps","parseError","awsResponseXml","parsedDoc","errorDetails","codeEls","messageEls","existedInLocalStorage","baseStorageId","bucketName","isValidResponse","innerHtml","responseData","createForm","handleFinishedUpload","handleUpload","DragAndDrop","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","dropZoneElements","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","createDocumentFragment","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"s3.jquery.fine-uploader.js","sourcesContent":[null,"/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var $el,\n        pluginOptions = [\"uploaderType\", \"endpointType\"];\n\n    function init(options) {\n        var xformedOpts = transformVariables(options || {}),\n            newUploaderInstance = getNewUploaderInstance(xformedOpts);\n\n        uploader(newUploaderInstance);\n        addCallbacks(xformedOpts, newUploaderInstance);\n\n        return $el;\n    }\n\n    function getNewUploaderInstance(params) {\n        var uploaderType = pluginOption(\"uploaderType\"),\n            namespace = pluginOption(\"endpointType\");\n\n        // If the integrator has defined a specific type of uploader to load, use that, otherwise assume `qq.FineUploader`\n        if (uploaderType) {\n            // We can determine the correct constructor function to invoke by combining \"FineUploader\"\n            // with the upper camel cased `uploaderType` value.\n            uploaderType = uploaderType.charAt(0).toUpperCase() + uploaderType.slice(1).toLowerCase();\n\n            if (namespace) {\n                return new qq[namespace][\"FineUploader\" + uploaderType](params);\n            }\n\n            return new qq[\"FineUploader\" + uploaderType](params);\n        }\n        else {\n            if (namespace) {\n                return new qq[namespace].FineUploader(params);\n            }\n\n            return new qq.FineUploader(params);\n        }\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(\"fineuploader\");\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(\"fineuploader\", data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    //the underlying Fine Uploader instance is stored in jQuery's data stored, associated with the element\n    // tied to this instance of the plug-in\n    function uploader(instanceToStore) {\n        return dataStore(\"uploader\", instanceToStore);\n    }\n\n    function pluginOption(option, optionVal) {\n        return dataStore(option, optionVal);\n    }\n\n    // Implement all callbacks defined in Fine Uploader as functions that trigger appropriately names events and\n    // return the result of executing the bound handler back to Fine Uploader\n    function addCallbacks(transformedOpts, newUploaderInstance) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(newUploaderInstance._options.callbacks, function(prop, nonJqueryCallback) {\n            var name, callbackEventTarget;\n\n            name = /^on(\\w+)/.exec(prop)[1];\n            name = name.substring(0, 1).toLowerCase() + name.substring(1);\n            callbackEventTarget = $el;\n\n            callbacks[prop] = function() {\n                var originalArgs = Array.prototype.slice.call(arguments),\n                    transformedArgs = [],\n                    nonJqueryCallbackRetVal, jqueryEventCallbackRetVal;\n\n                $.each(originalArgs, function(idx, arg) {\n                    transformedArgs.push(maybeWrapInJquery(arg));\n                });\n\n                nonJqueryCallbackRetVal = nonJqueryCallback.apply(this, originalArgs);\n\n                try {\n                    jqueryEventCallbackRetVal = callbackEventTarget.triggerHandler(name, transformedArgs);\n                }\n                catch (error) {\n                    qq.log(\"Caught error in Fine Uploader jQuery event handler: \" + error.message, \"error\");\n                }\n\n                /*jshint -W116*/\n                if (nonJqueryCallbackRetVal != null) {\n                    return nonJqueryCallbackRetVal;\n                }\n                return jqueryEventCallbackRetVal;\n            };\n        });\n\n        newUploaderInstance._options.callbacks = callbacks;\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            if (source.uploaderType !== \"basic\") {\n                xformed = { element: $el[0] };\n            }\n            else {\n                xformed = {};\n            }\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if ($.inArray(prop, pluginOptions) >= 0) {\n                pluginOption(prop, val);\n            }\n            else if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    var arrayObjDest = {};\n\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else if ($.isPlainObject(arrayVal)) {\n                        transformVariables(arrayVal, arrayObjDest);\n                        arrayVals.push(arrayObjDest);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            !command.match(/^_/) && //enforce private methods convention\n            uploader()[command] !== undefined;\n    }\n\n    // Assuming we have already verified that this is a valid command, call the associated function in the underlying\n    // Fine Uploader instance (passing along the arguments from the caller) and return the result of the call back to the caller\n    function delegateCommand(command) {\n        var xformedArgs = [],\n            origArgs = Array.prototype.slice.call(arguments, 1),\n            retVal;\n\n        transformVariables(origArgs, xformedArgs);\n\n        retVal = uploader()[command].apply(uploader(), xformedArgs);\n\n        return maybeWrapInJquery(retVal);\n    }\n\n    // If the value is an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n    function maybeWrapInJquery(val) {\n        var transformedVal = val;\n\n        // If the command is returning an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n        /*jshint -W116*/\n        if (val != null && typeof val === \"object\" &&\n           (val.nodeType === 1 || val.nodeType === 9) && val.cloneNode) {\n\n            transformedVal = $(val);\n        }\n\n        return transformedVal;\n    }\n\n    $.fn.fineUploader = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (uploader() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist on jQuery.fineUploader\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals jQuery*/\n/**\n * Simply an alias for the `fineUploader` plug-in wrapper, but hides the required `endpointType` option from the\n * integrator.  I thought it may be confusing to convey to the integrator that, when using Fine Uploader in S3 mode,\n * you need to specify an `endpointType` with a value of S3, and perhaps an `uploaderType` with a value of \"basic\" if\n * you want to use basic mode when uploading directly to S3 as well.  So, you can use this plug-in alias and not worry\n * about the `endpointType` option at all.\n */\n(function($) {\n    \"use strict\";\n\n    $.fn.fineUploaderS3 = function(optionsOrCommand) {\n        if (typeof optionsOrCommand === \"object\") {\n\n            // This option is used to tell the plug-in wrapper to instantiate the appropriate S3-namespace modules.\n            optionsOrCommand.endpointType = \"s3\";\n        }\n\n        return $.fn.fineUploader.apply(this, arguments);\n    };\n\n}(jQuery));\n","/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\r\nqq.version = \"5.11.9patchs\";\r\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\r\n/**\r\n * Defines the public API for FineUploaderBasic mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.basePublicApi = {\r\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\r\n        addBlobs: function(blobDataOrArray, params, endpoint) {\r\n            this.addFiles(blobDataOrArray, params, endpoint);\r\n        },\r\n\r\n        addInitialFiles: function(cannedFileList) {\r\n            var self = this;\r\n\r\n            qq.each(cannedFileList, function(index, cannedFile) {\r\n                self._addCannedFile(cannedFile);\r\n            });\r\n        },\r\n\r\n        addFiles: function(data, params, endpoint) {\r\n            this._maybeHandleIos8SafariWorkaround();\r\n\r\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\r\n\r\n                processBlob = qq.bind(function(blob) {\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processBlobData = qq.bind(function(blobData) {\r\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvas = qq.bind(function(canvas) {\r\n                    var blob = qq.canvasToBlob(canvas);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName + \".png\"\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvasData = qq.bind(function(canvasData) {\r\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\r\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: canvasData.name\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processFileOrInput = qq.bind(function(fileOrInput) {\r\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\r\n                        var files = Array.prototype.slice.call(fileOrInput.files),\r\n                            self = this;\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            self._handleNewFile(file, batchId, verifiedFiles);\r\n                        });\r\n                    }\r\n                    else {\r\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\r\n                    }\r\n                }, this),\r\n\r\n                normalizeData = function() {\r\n                    if (qq.isFileList(data)) {\r\n                        data = Array.prototype.slice.call(data);\r\n                    }\r\n                    data = [].concat(data);\r\n                },\r\n\r\n                self = this,\r\n                verifiedFiles = [];\r\n\r\n            this._currentBatchId = batchId;\r\n\r\n            if (data) {\r\n                normalizeData();\r\n\r\n                qq.each(data, function(idx, fileContainer) {\r\n                    if (qq.isFileOrInput(fileContainer)) {\r\n                        processFileOrInput(fileContainer);\r\n                    }\r\n                    else if (qq.isBlob(fileContainer)) {\r\n                        processBlob(fileContainer);\r\n                    }\r\n                    else if (qq.isObject(fileContainer)) {\r\n                        if (fileContainer.blob && fileContainer.name) {\r\n                            processBlobData(fileContainer);\r\n                        }\r\n                        else if (fileContainer.canvas && fileContainer.name) {\r\n                            processCanvasData(fileContainer);\r\n                        }\r\n                    }\r\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\r\n                        processCanvas(fileContainer);\r\n                    }\r\n                    else {\r\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\r\n                    }\r\n                });\r\n\r\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\r\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\r\n            }\r\n        },\r\n\r\n        cancel: function(id) {\r\n            this._handler.cancel(id);\r\n        },\r\n\r\n        cancelAll: function() {\r\n            var storedIdsCopy = [],\r\n                self = this;\r\n\r\n            qq.extend(storedIdsCopy, this._storedIds);\r\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\r\n                self.cancel(storedFileId);\r\n            });\r\n\r\n            this._handler.cancelAll();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._storedIds = [];\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (uploadData.status === qq.status.PAUSED) {\r\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\r\n                this._uploadFile(id);\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        deleteFile: function(id) {\r\n            return this._onSubmitDelete(id);\r\n        },\r\n\r\n        // TODO document?\r\n        doesExist: function(fileOrBlobId) {\r\n            return this._handler.isValid(fileOrBlobId);\r\n        },\r\n\r\n        // Generate a variable size thumbnail on an img or canvas,\r\n        // returning a promise that is fulfilled when the attempt completes.\r\n        // Thumbnail can either be based off of a URL for an image returned\r\n        // by the server in the upload response, or the associated `Blob`.\r\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\r\n            var promiseToReturn = new qq.Promise(),\r\n                fileOrUrl, options;\r\n\r\n            if (this._imageGenerator) {\r\n                fileOrUrl = this._thumbnailUrls[fileId];\r\n                options = {\r\n                    customResizeFunction: customResizeFunction,\r\n                    maxSize: maxSize > 0 ? maxSize : null,\r\n                    scale: maxSize > 0\r\n                };\r\n\r\n                // If client-side preview generation is possible\r\n                // and we are not specifically looking for the image URl returned by the server...\r\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\r\n                    fileOrUrl = this.getFile(fileId);\r\n                }\r\n\r\n                /* jshint eqeqeq:false,eqnull:true */\r\n                if (fileOrUrl == null) {\r\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\r\n                }\r\n                else {\r\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\r\n                        function success(modifiedContainer) {\r\n                            promiseToReturn.success(modifiedContainer);\r\n                        },\r\n\r\n                        function failure(container, reason) {\r\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n            else {\r\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\r\n            }\r\n\r\n            return promiseToReturn;\r\n        },\r\n\r\n        getButton: function(fileId) {\r\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\r\n        },\r\n\r\n        getEndpoint: function(fileId) {\r\n            return this._endpointStore.get(fileId);\r\n        },\r\n\r\n        getFile: function(fileOrBlobId) {\r\n            return this._handler.getFile(fileOrBlobId) || null;\r\n        },\r\n\r\n        getInProgress: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        getName: function(id) {\r\n            return this._uploadData.retrieve({id: id}).name;\r\n        },\r\n\r\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\r\n        getParentId: function(id) {\r\n            var uploadDataEntry = this.getUploads({id: id}),\r\n                parentId = null;\r\n\r\n            if (uploadDataEntry) {\r\n                if (uploadDataEntry.parentId !== undefined) {\r\n                    parentId = uploadDataEntry.parentId;\r\n                }\r\n            }\r\n\r\n            return parentId;\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            return this._handler.getResumableFilesData();\r\n        },\r\n\r\n        getSize: function(id) {\r\n            return this._uploadData.retrieve({id: id}).size;\r\n        },\r\n\r\n        getNetUploads: function() {\r\n            return this._netUploaded;\r\n        },\r\n\r\n        getRemainingAllowedItems: function() {\r\n            var allowedItems = this._currentItemLimit;\r\n\r\n            if (allowedItems > 0) {\r\n                return allowedItems - this._netUploadedOrQueued;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        getUploads: function(optionalFilter) {\r\n            return this._uploadData.retrieve(optionalFilter);\r\n        },\r\n\r\n        getUuid: function(id) {\r\n            return this._uploadData.retrieve({id: id}).uuid;\r\n        },\r\n\r\n        log: function(str, level) {\r\n            if (this._options.debug && (!level || level === \"info\")) {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\r\n            }\r\n            else if (level && level !== \"info\") {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\r\n\r\n            }\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            // Pause only really makes sense if the file is uploading or retrying\r\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\r\n                if (this._handler.pause(id)) {\r\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\r\n                }\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        reset: function() {\r\n            this.log(\"Resetting uploader...\");\r\n\r\n            this._handler.reset();\r\n            this._storedIds = [];\r\n            this._autoRetries = [];\r\n            this._retryTimeouts = [];\r\n            this._preventRetries = [];\r\n            this._thumbnailUrls = [];\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n\r\n            this._paramsStore.reset();\r\n            this._endpointStore.reset();\r\n            this._netUploadedOrQueued = 0;\r\n            this._netUploaded = 0;\r\n            this._uploadData.reset();\r\n            this._buttonIdsForFileIds = [];\r\n\r\n            this._pasteHandler && this._pasteHandler.reset();\r\n            this._options.session.refreshOnReset && this._refreshSessionData();\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n\r\n            this._totalProgress && this._totalProgress.reset();\r\n        },\r\n\r\n        retry: function(id) {\r\n            return this._manualRetry(id);\r\n        },\r\n\r\n        scaleImage: function(id, specs) {\r\n            var self = this;\r\n\r\n            return qq.Scaler.prototype.scaleImage(id, specs, {\r\n                log: qq.bind(self.log, self),\r\n                getFile: qq.bind(self.getFile, self),\r\n                uploadData: self._uploadData\r\n            });\r\n        },\r\n\r\n        setCustomHeaders: function(headers, id) {\r\n            this._customHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileCustomHeaders: function(headers, id) {\r\n            this._deleteFileCustomHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileEndpoint: function(endpoint, id) {\r\n            this._deleteFileEndpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setDeleteFileParams: function(params, id) {\r\n            this._deleteFileParamsStore.set(params, id);\r\n        },\r\n\r\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\r\n        setEndpoint: function(endpoint, id) {\r\n            this._endpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setForm: function(elementOrId) {\r\n            this._updateFormSupportAndParams(elementOrId);\r\n        },\r\n\r\n        setItemLimit: function(newItemLimit) {\r\n            this._currentItemLimit = newItemLimit;\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            this._uploadData.updateName(id, newName);\r\n        },\r\n\r\n        setParams: function(params, id) {\r\n            this._paramsStore.set(params, id);\r\n        },\r\n\r\n        setUuid: function(id, newUuid) {\r\n            return this._uploadData.uuidChanged(id, newUuid);\r\n        },\r\n\r\n        uploadStoredFiles: function() {\r\n            if (this._storedIds.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n            }\r\n            else {\r\n                this._uploadStoredFiles();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploaderBasic mode.\r\n     */\r\n    qq.basePrivateApi = {\r\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._uploadData.addFile({\r\n                uuid: sessionData.uuid,\r\n                name: sessionData.name,\r\n                size: sessionData.size,\r\n                status: qq.status.UPLOAD_SUCCESSFUL\r\n            });\r\n\r\n            sessionData.deleteFileEndpoint && this.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\r\n            sessionData.deleteFileParams && this.setDeleteFileParams(sessionData.deleteFileParams, id);\r\n\r\n            if (sessionData.thumbnailUrl) {\r\n                this._thumbnailUrls[id] = sessionData.thumbnailUrl;\r\n            }\r\n\r\n            this._netUploaded++;\r\n            this._netUploadedOrQueued++;\r\n\r\n            return id;\r\n        },\r\n\r\n        _annotateWithButtonId: function(file, associatedInput) {\r\n            if (qq.isFile(file)) {\r\n                file.qqButtonId = this._getButtonId(associatedInput);\r\n            }\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._options.callbacks.onError(null, null, message, undefined);\r\n        },\r\n\r\n        _createDeleteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.DeleteFileAjaxRequester({\r\n                method: this._options.deleteFile.method.toUpperCase(),\r\n                maxConnections: this._options.maxConnections,\r\n                uuidParamName: this._options.request.uuidName,\r\n                customHeaders: this._deleteFileCustomHeadersStore,\r\n                paramsStore: this._deleteFileParamsStore,\r\n                endpointStore: this._deleteFileEndpointStore,\r\n                cors: this._options.cors,\r\n                log: qq.bind(self.log, self),\r\n                onDelete: function(id) {\r\n                    self._onDelete(id);\r\n                    self._options.callbacks.onDelete(id);\r\n                },\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\r\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        _createPasteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.PasteSupport({\r\n                targetElement: this._options.paste.targetElement,\r\n                callbacks: {\r\n                    log: qq.bind(self.log, self),\r\n                    pasteReceived: function(blob) {\r\n                        self._handleCheckedCallback({\r\n                            name: \"onPasteReceived\",\r\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\r\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\r\n                            identifier: \"pasted image\"\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _createStore: function(initialValue, _readOnlyValues_) {\r\n            var store = {},\r\n                catchall = initialValue,\r\n                perIdReadOnlyValues = {},\r\n                readOnlyValues = _readOnlyValues_,\r\n                copy = function(orig) {\r\n                    if (qq.isObject(orig)) {\r\n                        return qq.extend({}, orig);\r\n                    }\r\n                    return orig;\r\n                },\r\n                getReadOnlyValues = function() {\r\n                    if (qq.isFunction(readOnlyValues)) {\r\n                        return readOnlyValues();\r\n                    }\r\n                    return readOnlyValues;\r\n                },\r\n                includeReadOnlyValues = function(id, existing) {\r\n                    if (readOnlyValues && qq.isObject(existing)) {\r\n                        qq.extend(existing, getReadOnlyValues());\r\n                    }\r\n\r\n                    if (perIdReadOnlyValues[id]) {\r\n                        qq.extend(existing, perIdReadOnlyValues[id]);\r\n                    }\r\n                };\r\n\r\n            return {\r\n                set: function(val, id) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id == null) {\r\n                        store = {};\r\n                        catchall = copy(val);\r\n                    }\r\n                    else {\r\n                        store[id] = copy(val);\r\n                    }\r\n                },\r\n\r\n                get: function(id) {\r\n                    var values;\r\n\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id != null && store[id]) {\r\n                        values = store[id];\r\n                    }\r\n                    else {\r\n                        values = copy(catchall);\r\n                    }\r\n\r\n                    includeReadOnlyValues(id, values);\r\n\r\n                    return copy(values);\r\n                },\r\n\r\n                addReadOnly: function(id, values) {\r\n                    // Only applicable to Object stores\r\n                    if (qq.isObject(store)) {\r\n                        // If null ID, apply readonly values to all files\r\n                        if (id === null) {\r\n                            if (qq.isFunction(values)) {\r\n                                readOnlyValues = values;\r\n                            }\r\n                            else {\r\n                                readOnlyValues = readOnlyValues || {};\r\n                                qq.extend(readOnlyValues, values);\r\n                            }\r\n                        }\r\n                        else {\r\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\r\n                            qq.extend(perIdReadOnlyValues[id], values);\r\n                        }\r\n                    }\r\n                },\r\n\r\n                remove: function(fileId) {\r\n                    return delete store[fileId];\r\n                },\r\n\r\n                reset: function() {\r\n                    store = {};\r\n                    perIdReadOnlyValues = {};\r\n                    catchall = initialValue;\r\n                }\r\n            };\r\n        },\r\n\r\n        _createUploadDataTracker: function() {\r\n            var self = this;\r\n\r\n            return new qq.UploadData({\r\n                getName: function(id) {\r\n                    return self.getName(id);\r\n                },\r\n                getUuid: function(id) {\r\n                    return self.getUuid(id);\r\n                },\r\n                getSize: function(id) {\r\n                    return self.getSize(id);\r\n                },\r\n                onStatusChange: function(id, oldStatus, newStatus) {\r\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\r\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\r\n                    self._maybeAllComplete(id, newStatus);\r\n\r\n                    if (self._totalProgress) {\r\n                        setTimeout(function() {\r\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\r\n                        }, 0);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Generate a tracked upload button.\r\n         *\r\n         * @param spec Object containing a required `element` property\r\n         * along with optional `multiple`, `accept`, and `folders`.\r\n         * @returns {qq.UploadButton}\r\n         * @private\r\n         */\r\n        _createUploadButton: function(spec) {\r\n            var self = this,\r\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\r\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\r\n                button;\r\n\r\n            function allowMultiple() {\r\n                if (qq.supportedFeatures.ajaxUploading) {\r\n                    // Workaround for bug in iOS7+ (see #1039)\r\n                    if (self._options.workarounds.iosEmptyVideos &&\r\n                        qq.ios() &&\r\n                        !qq.ios6() &&\r\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\r\n\r\n                        return false;\r\n                    }\r\n\r\n                    if (spec.multiple === undefined) {\r\n                        return self._options.multiple;\r\n                    }\r\n\r\n                    return spec.multiple;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            button = new qq.UploadButton({\r\n                acceptFiles: acceptFiles,\r\n                element: spec.element,\r\n                focusClass: this._options.classes.buttonFocus,\r\n                folders: spec.folders,\r\n                hoverClass: this._options.classes.buttonHover,\r\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\r\n                multiple: allowMultiple(),\r\n                name: this._options.request.inputName,\r\n                onChange: function(input) {\r\n                    self._onInputChange(input);\r\n                },\r\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\r\n            });\r\n\r\n            this._disposeSupport.addDisposer(function() {\r\n                button.dispose();\r\n            });\r\n\r\n            self._buttons.push(button);\r\n\r\n            return button;\r\n        },\r\n\r\n        _createUploadHandler: function(additionalOptions, namespace) {\r\n            var self = this,\r\n                lastOnProgress = {},\r\n                options = {\r\n                    debug: this._options.debug,\r\n                    maxConnections: this._options.maxConnections,\r\n                    cors: this._options.cors,\r\n                    paramsStore: this._paramsStore,\r\n                    endpointStore: this._endpointStore,\r\n                    chunking: this._options.chunking,\r\n                    resume: this._options.resume,\r\n                    blobs: this._options.blobs,\r\n                    log: qq.bind(self.log, self),\r\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\r\n                    onProgress: function(id, name, loaded, total) {\r\n                        if (loaded < 0 || total < 0) {\r\n                            return;\r\n                        }\r\n\r\n                        if (lastOnProgress[id]) {\r\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\r\n                                self._onProgress(id, name, loaded, total);\r\n                                self._options.callbacks.onProgress(id, name, loaded, total);\r\n                            }\r\n                        }\r\n                        else {\r\n                            self._onProgress(id, name, loaded, total);\r\n                            self._options.callbacks.onProgress(id, name, loaded, total);\r\n                        }\r\n\r\n                        lastOnProgress[id] = {loaded: loaded, total: total};\r\n\r\n                    },\r\n                    onComplete: function(id, name, result, xhr) {\r\n                        delete lastOnProgress[id];\r\n\r\n                        var status = self.getUploads({id: id}).status,\r\n                            retVal;\r\n\r\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\r\n                        // invoked by the browser multiple times for the same XHR instance with the same state\r\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\r\n                        // done this.\r\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\r\n                            return;\r\n                        }\r\n\r\n                        retVal = self._onComplete(id, name, result, xhr);\r\n\r\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\r\n                        // until the promise has been fulfilled.\r\n                        if (retVal instanceof  qq.Promise) {\r\n                            retVal.done(function() {\r\n                                self._options.callbacks.onComplete(id, name, result, xhr);\r\n                            });\r\n                        }\r\n                        else {\r\n                            self._options.callbacks.onComplete(id, name, result, xhr);\r\n                        }\r\n                    },\r\n                    onCancel: function(id, name, cancelFinalizationEffort) {\r\n                        var promise = new qq.Promise();\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onCancel\",\r\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\r\n                            onFailure: promise.failure,\r\n                            onSuccess: function() {\r\n                                cancelFinalizationEffort.then(function() {\r\n                                    self._onCancel(id, name);\r\n                                });\r\n\r\n                                promise.success();\r\n                            },\r\n                            identifier: id\r\n                        });\r\n\r\n                        return promise;\r\n                    },\r\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\r\n                    onUpload: function(id, name) {\r\n                        self._onUpload(id, name);\r\n                        self._options.callbacks.onUpload(id, name);\r\n                    },\r\n                    onUploadChunk: function(id, name, chunkData) {\r\n                        self._onUploadChunk(id, chunkData);\r\n                        self._options.callbacks.onUploadChunk(id, name, chunkData);\r\n                    },\r\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\r\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\r\n                    },\r\n                    onResume: function(id, name, chunkData) {\r\n                        return self._options.callbacks.onResume(id, name, chunkData);\r\n                    },\r\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\r\n                        return self._onAutoRetry.apply(self, arguments);\r\n                    },\r\n                    onUuidChanged: function(id, newUuid) {\r\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\r\n                        self.setUuid(id, newUuid);\r\n                    },\r\n                    getName: qq.bind(self.getName, self),\r\n                    getUuid: qq.bind(self.getUuid, self),\r\n                    getSize: qq.bind(self.getSize, self),\r\n                    setSize: qq.bind(self._setSize, self),\r\n                    getDataByUuid: function(uuid) {\r\n                        return self.getUploads({uuid: uuid});\r\n                    },\r\n                    isQueued: function(id) {\r\n                        var status = self.getUploads({id: id}).status;\r\n                        return status === qq.status.QUEUED ||\r\n                            status === qq.status.SUBMITTED ||\r\n                            status === qq.status.UPLOAD_RETRYING ||\r\n                            status === qq.status.PAUSED;\r\n                    },\r\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\r\n                    getIdsInBatch: self._uploadData.getIdsInBatch\r\n                };\r\n\r\n            qq.each(this._options.request, function(prop, val) {\r\n                options[prop] = val;\r\n            });\r\n\r\n            options.customHeaders = this._customHeadersStore;\r\n\r\n            if (additionalOptions) {\r\n                qq.each(additionalOptions, function(key, val) {\r\n                    options[key] = val;\r\n                });\r\n            }\r\n\r\n            return new qq.UploadHandlerController(options, namespace);\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id) {\r\n            this._netUploadedOrQueued--;\r\n            this._uploadData.setStatus(id, qq.status.REJECTED);\r\n        },\r\n\r\n        _formatSize: function(bytes) {\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1000;\r\n                i++;\r\n            } while (bytes > 999);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\r\n        },\r\n\r\n        // Creates an internal object that tracks various properties of each extra button,\r\n        // and then actually creates the extra button.\r\n        _generateExtraButtonSpecs: function() {\r\n            var self = this;\r\n\r\n            this._extraButtonSpecs = {};\r\n\r\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\r\n                var multiple = extraButtonOptionEntry.multiple,\r\n                    validation = qq.extend({}, self._options.validation, true),\r\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\r\n\r\n                if (multiple === undefined) {\r\n                    multiple = self._options.multiple;\r\n                }\r\n\r\n                if (extraButtonSpec.validation) {\r\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\r\n                }\r\n\r\n                qq.extend(extraButtonSpec, {\r\n                    multiple: multiple,\r\n                    validation: validation\r\n                }, true);\r\n\r\n                self._initExtraButton(extraButtonSpec);\r\n            });\r\n        },\r\n\r\n        _getButton: function(buttonId) {\r\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            if (extraButtonsSpec) {\r\n                return extraButtonsSpec.element;\r\n            }\r\n            else if (buttonId === this._defaultButtonId) {\r\n                return this._options.button;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the internally used tracking ID for a button.\r\n         *\r\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\r\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\r\n         * @private\r\n         */\r\n        _getButtonId: function(buttonOrFileInputOrFile) {\r\n            var inputs, fileInput,\r\n                fileBlobOrInput = buttonOrFileInputOrFile;\r\n\r\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\r\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\r\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\r\n            }\r\n\r\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\r\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\r\n                if (qq.isFile(fileBlobOrInput)) {\r\n                    return fileBlobOrInput.qqButtonId;\r\n                }\r\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\r\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\r\n\r\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n\r\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\r\n\r\n                qq.each(inputs, function(idx, input) {\r\n                    if (input.getAttribute(\"type\") === \"file\") {\r\n                        fileInput = input;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                if (fileInput) {\r\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n            }\r\n        },\r\n\r\n        _getNotFinished: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED,\r\n                    qq.status.SUBMITTING,\r\n                    qq.status.SUBMITTED,\r\n                    qq.status.PAUSED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        // Get the validation options for this button.  Could be the default validation option\r\n        // or a specific one assigned to this particular button.\r\n        _getValidationBase: function(buttonId) {\r\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\r\n        },\r\n\r\n        _getValidationDescriptor: function(fileWrapper) {\r\n            if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                return {\r\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\r\n                    size: fileWrapper.file.referenceBlob.size\r\n                };\r\n            }\r\n\r\n            return {\r\n                name: this.getUploads({id: fileWrapper.id}).name,\r\n                size: this.getUploads({id: fileWrapper.id}).size\r\n            };\r\n        },\r\n\r\n        _getValidationDescriptors: function(fileWrappers) {\r\n            var self = this,\r\n                fileDescriptors = [];\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\r\n            });\r\n\r\n            return fileDescriptors;\r\n        },\r\n\r\n        // Allows camera access on either the default or an extra button for iOS devices.\r\n        _handleCameraAccess: function() {\r\n            if (this._options.camera.ios && qq.ios()) {\r\n                var acceptIosCamera = \"image/*;capture=camera\",\r\n                    button = this._options.camera.button,\r\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\r\n                    optionRoot = this._options;\r\n\r\n                // If we are not targeting the default button, it is an \"extra\" button\r\n                if (buttonId && buttonId !== this._defaultButtonId) {\r\n                    optionRoot = this._extraButtonSpecs[buttonId];\r\n                }\r\n\r\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\r\n                optionRoot.multiple = false;\r\n\r\n                // update the options\r\n                if (optionRoot.validation.acceptFiles === null) {\r\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\r\n                }\r\n                else {\r\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\r\n                }\r\n\r\n                // update the already-created button\r\n                qq.each(this._buttons, function(idx, button) {\r\n                    if (button.getButtonId() === buttonId) {\r\n                        button.setMultiple(optionRoot.multiple);\r\n                        button.setAcceptFiles(optionRoot.acceptFiles);\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        _handleCheckedCallback: function(details) {\r\n            var self = this,\r\n                callbackRetVal = details.callback();\r\n\r\n            if (qq.isGenericPromise(callbackRetVal)) {\r\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\r\n                return callbackRetVal.then(\r\n                    function(successParam) {\r\n                        self.log(details.name + \" promise success for \" + details.identifier);\r\n                        details.onSuccess(successParam);\r\n                    },\r\n                    function() {\r\n                        if (details.onFailure) {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                            details.onFailure();\r\n                        }\r\n                        else {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            if (callbackRetVal !== false) {\r\n                details.onSuccess(callbackRetVal);\r\n            }\r\n            else {\r\n                if (details.onFailure) {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\r\n                    details.onFailure();\r\n                }\r\n                else {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\r\n                }\r\n            }\r\n\r\n            return callbackRetVal;\r\n        },\r\n\r\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\r\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\r\n            var self = this,\r\n                uuid = qq.getUniqueId(),\r\n                size = -1,\r\n                name = qq.getFilename(file),\r\n                actualFile = file.blob || file,\r\n                handler = this._customNewFileHandler ?\r\n                    this._customNewFileHandler :\r\n                    qq.bind(self._handleNewFileGeneric, self);\r\n\r\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\r\n                size = actualFile.size;\r\n            }\r\n\r\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\r\n                uploadData: self._uploadData,\r\n                paramsStore: self._paramsStore,\r\n                addFileToHandler: function(id, file) {\r\n                    self._handler.add(id, file);\r\n                    self._netUploadedOrQueued++;\r\n                    self._trackButton(id);\r\n                }\r\n            });\r\n        },\r\n\r\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\r\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\r\n\r\n            this._handler.add(id, file);\r\n            this._trackButton(id);\r\n\r\n            this._netUploadedOrQueued++;\r\n\r\n            fileList.push({id: id, file: file});\r\n        },\r\n\r\n        _handlePasteSuccess: function(blob, extSuppliedName) {\r\n            var extension = blob.type.split(\"/\")[1],\r\n                name = extSuppliedName;\r\n\r\n            /*jshint eqeqeq: true, eqnull: true*/\r\n            if (name == null) {\r\n                name = this._options.paste.defaultName;\r\n            }\r\n\r\n            name += \".\" + extension;\r\n\r\n            this.addFiles({\r\n                name: name,\r\n                blob: blob\r\n            });\r\n        },\r\n\r\n        // Creates an extra button element\r\n        _initExtraButton: function(spec) {\r\n            var button = this._createUploadButton({\r\n                accept: spec.validation.acceptFiles,\r\n                allowedExtensions: spec.validation.allowedExtensions,\r\n                element: spec.element,\r\n                folders: spec.folders,\r\n                multiple: spec.multiple,\r\n                title: spec.fileInputTitle\r\n            });\r\n\r\n            this._extraButtonSpecs[button.getButtonId()] = spec;\r\n        },\r\n\r\n        _initFormSupportAndParams: function() {\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n            );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore = this._createStore(\r\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\r\n                );\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\r\n                }\r\n            }\r\n            else {\r\n                this._paramsStore = this._createStore(this._options.request.params);\r\n            }\r\n        },\r\n\r\n        _isDeletePossible: function() {\r\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (this._options.cors.expected) {\r\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\r\n                    return true;\r\n                }\r\n\r\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _isAllowedExtension: function(allowed, fileName) {\r\n            var valid = false;\r\n\r\n            if (!allowed.length) {\r\n                return true;\r\n            }\r\n\r\n            qq.each(allowed, function(idx, allowedExt) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExt)) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\r\n\r\n                    if (fileName.match(extRegex) != null) {\r\n                        valid = true;\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return valid;\r\n        },\r\n\r\n        /**\r\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\r\n         *\r\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\r\n         * @param maybeNameOrNames names of the items that have failed, if applicable\r\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\r\n         * @private\r\n         */\r\n        _itemError: function(code, maybeNameOrNames, item) {\r\n            var message = this._options.messages[code],\r\n                allowedExtensions = [],\r\n                names = [].concat(maybeNameOrNames),\r\n                name = names[0],\r\n                buttonId = this._getButtonId(item),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                extensionsForMessage, placeholderMatch;\r\n\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExtension)) {\r\n                    allowedExtensions.push(allowedExtension);\r\n                }\r\n            });\r\n\r\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\r\n\r\n            r(\"{file}\", this._options.formatFileName(name));\r\n            r(\"{extensions}\", extensionsForMessage);\r\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\r\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\r\n\r\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\r\n            if (placeholderMatch !== null) {\r\n                qq.each(placeholderMatch, function(idx, placeholder) {\r\n                    r(placeholder, names[idx]);\r\n                });\r\n            }\r\n\r\n            this._options.callbacks.onError(null, name, message, undefined);\r\n\r\n            return message;\r\n        },\r\n\r\n        /**\r\n         * Conditionally orders a manual retry of a failed upload.\r\n         *\r\n         * @param id File ID of the failed upload\r\n         * @param callback Optional callback to invoke if a retry is prudent.\r\n         * In lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if a manual retry will occur\r\n         * @private\r\n         */\r\n        _manualRetry: function(id, callback) {\r\n            if (this._onBeforeManualRetry(id)) {\r\n                this._netUploadedOrQueued++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n\r\n                if (callback) {\r\n                    callback(id);\r\n                }\r\n                else {\r\n                    this._handler.retry(id);\r\n                }\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _maybeAllComplete: function(id, status) {\r\n            var self = this,\r\n                notFinished = this._getNotFinished();\r\n\r\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\r\n                this._succeededSinceLastAllComplete.push(id);\r\n            }\r\n            else if (status === qq.status.UPLOAD_FAILED) {\r\n                this._failedSinceLastAllComplete.push(id);\r\n            }\r\n\r\n            if (notFinished === 0 &&\r\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\r\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\r\n                setTimeout(function() {\r\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _maybeHandleIos8SafariWorkaround: function() {\r\n            var self = this;\r\n\r\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\r\n                setTimeout(function() {\r\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\r\n                }, 0);\r\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\r\n            }\r\n        },\r\n\r\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\r\n            // Assuming no one will actually set the response code to something other than 200\r\n            // and still set 'success' to true...\r\n            if (!response.success) {\r\n                if (xhr && xhr.status !== 200 && !response.error) {\r\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\r\n                }\r\n                else {\r\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\r\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\r\n            var self = this;\r\n\r\n            if (items.length > index) {\r\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\r\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\r\n                    setTimeout(function() {\r\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\r\n                            buttonId = self._getButtonId(items[index].file),\r\n                            button = self._getButton(buttonId);\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onValidate\",\r\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\r\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\r\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\r\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\r\n                        });\r\n                    }, 0);\r\n                }\r\n                else if (!validItem) {\r\n                    for (; index < items.length; index++) {\r\n                        self._fileOrBlobRejected(items[index].id);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\r\n\r\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n        },\r\n\r\n        /**\r\n         * Attempt to automatically retry a failed upload.\r\n         *\r\n         * @param id The file ID of the failed upload\r\n         * @param name The name of the file associated with the failed upload\r\n         * @param responseJSON Response from the server, parsed into a javascript object\r\n         * @param xhr Ajax transport used to send the failed request\r\n         * @param callback Optional callback to be invoked if a retry is prudent.\r\n         * Invoked in lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if an auto-retry will occur\r\n         * @private\r\n         */\r\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\r\n            var self = this;\r\n\r\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\r\n\r\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\r\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\r\n\r\n                self._maybeParseAndSendUploadError.apply(self, arguments);\r\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\r\n                self._onBeforeAutoRetry(id, name);\r\n\r\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n                self._retryTimeouts[id] = setTimeout(function() {\r\n                    self.log(\"Starting retry for \" + name + \"...\");\r\n\r\n                    if (callback) {\r\n                        callback(id);\r\n                    }\r\n                    else {\r\n                        self._handler.retry(id);\r\n                    }\r\n                }, retryWaitPeriod);\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id, name) {\r\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            var itemLimit = this._currentItemLimit,\r\n                fileName;\r\n\r\n            if (this._preventRetries[id]) {\r\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\r\n                return false;\r\n            }\r\n            else if (this._handler.isValid(id)) {\r\n                fileName = this.getName(id);\r\n\r\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\r\n                    return false;\r\n                }\r\n\r\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\r\n                    this._itemError(\"retryFailTooManyItems\");\r\n                    return false;\r\n                }\r\n\r\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._netUploadedOrQueued--;\r\n\r\n            clearTimeout(this._retryTimeouts[id]);\r\n\r\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\r\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\r\n                this._storedIds.splice(storedItemIndex, 1);\r\n            }\r\n\r\n            this._uploadData.setStatus(id, qq.status.CANCELED);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            if (!result.success) {\r\n                this._netUploadedOrQueued--;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\r\n\r\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\r\n                    this._preventRetries[id] = true;\r\n                }\r\n            }\r\n            else {\r\n                if (result.thumbnailUrl) {\r\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\r\n                }\r\n\r\n                this._netUploaded++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\r\n            }\r\n\r\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\r\n\r\n            return result.success ? true : false;\r\n        },\r\n\r\n        _onDelete: function(id) {\r\n            this._uploadData.setStatus(id, qq.status.DELETING);\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n            var name = this.getName(id);\r\n\r\n            if (isError) {\r\n                this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\r\n                this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\r\n\r\n                // For error reporting, we only have access to the response status if this is not\r\n                // an `XDomainRequest`.\r\n                if (xhrOrXdr.withCredentials === undefined) {\r\n                    this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\r\n                }\r\n                else {\r\n                    this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\r\n                }\r\n            }\r\n            else {\r\n                this._netUploadedOrQueued--;\r\n                this._netUploaded--;\r\n                this._handler.expunge(id);\r\n                this._uploadData.setStatus(id, qq.status.DELETED);\r\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\r\n            }\r\n        },\r\n\r\n        _onInputChange: function(input) {\r\n            var fileIndex;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\r\n                    this._annotateWithButtonId(input.files[fileIndex], input);\r\n                }\r\n\r\n                this.addFiles(input.files);\r\n            }\r\n            // Android 2.3.x will fire `onchange` even if no file has been selected\r\n            else if (input.value.length > 0) {\r\n                this.addFiles(input);\r\n            }\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n        },\r\n\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            //nothing to do yet in core uploader\r\n        },\r\n\r\n        _onSubmitCallbackSuccess: function(id, name) {\r\n            this._onSubmit.apply(this, arguments);\r\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\r\n            this._onSubmitted.apply(this, arguments);\r\n\r\n            if (this._options.autoUpload) {\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n                this._uploadFile(id);\r\n            }\r\n            else {\r\n                this._storeForLater(id);\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\r\n            var uuid = this.getUuid(id),\r\n                adjustedOnSuccessCallback;\r\n\r\n            if (onSuccessCallback) {\r\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\r\n            }\r\n\r\n            if (this._isDeletePossible()) {\r\n                this._handleCheckedCallback({\r\n                    name: \"onSubmitDelete\",\r\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\r\n                    onSuccess: adjustedOnSuccessCallback ||\r\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\r\n                    identifier: id\r\n                });\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\r\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitted: function(id) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._options.callbacks.onTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            // nothing to do in the core uploader for now\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\r\n            if (newStatus === qq.status.PAUSED) {\r\n                clearTimeout(this._retryTimeouts[id]);\r\n            }\r\n        },\r\n\r\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\r\n            var self = this;\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                self._fileOrBlobRejected(fileWrapper.id);\r\n            });\r\n        },\r\n\r\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\r\n            var errorMessage,\r\n                itemLimit = this._currentItemLimit,\r\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\r\n\r\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\r\n                if (items.length > 0) {\r\n                    this._handleCheckedCallback({\r\n                        name: \"onValidate\",\r\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\r\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\r\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\r\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\r\n                    });\r\n                }\r\n                else {\r\n                    this._itemError(\"noFilesError\");\r\n                }\r\n            }\r\n            else {\r\n                this._onValidateBatchCallbackFailure(items);\r\n                errorMessage = this._options.messages.tooManyItemsError\r\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\r\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\r\n                this._batchError(errorMessage);\r\n            }\r\n        },\r\n\r\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\r\n            var nextIndex = index + 1;\r\n\r\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\r\n\r\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n        },\r\n\r\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\r\n            var self = this,\r\n                nextIndex = index + 1,\r\n                validationDescriptor = this._getValidationDescriptor(items[index]);\r\n\r\n            this._validateFileOrBlobData(items[index], validationDescriptor)\r\n                .then(\r\n                function() {\r\n                    self._upload(items[index].id, params, endpoint);\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\r\n                },\r\n                function() {\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n                }\r\n            );\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            if (items.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n                return;\r\n            }\r\n\r\n            var validationDescriptors = this._getValidationDescriptors(items),\r\n                buttonId = this._getButtonId(items[0].file),\r\n                button = this._getButton(buttonId);\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onValidateBatch\",\r\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\r\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\r\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\r\n                identifier: \"batch validation\"\r\n            });\r\n        },\r\n\r\n        _preventLeaveInProgress: function() {\r\n            var self = this;\r\n\r\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\r\n                if (self.getInProgress()) {\r\n                    e = e || window.event;\r\n                    // for ie, ff\r\n                    e.returnValue = self._options.messages.onLeave;\r\n                    // for webkit\r\n                    return self._options.messages.onLeave;\r\n                }\r\n            });\r\n        },\r\n\r\n        // Attempts to refresh session data only if the `qq.Session` module exists\r\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\r\n        // callback will be invoked once the refresh is complete.\r\n        _refreshSessionData: function() {\r\n            var self = this,\r\n                options = this._options.session;\r\n\r\n            /* jshint eqnull:true */\r\n            if (qq.Session && this._options.session.endpoint != null) {\r\n                if (!this._session) {\r\n                    qq.extend(options, {cors: this._options.cors});\r\n\r\n                    options.log = qq.bind(this.log, this);\r\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\r\n\r\n                    this._session = new qq.Session(options);\r\n                }\r\n\r\n                setTimeout(function() {\r\n                    self._session.refresh().then(function(response, xhrOrXdr) {\r\n                        self._sessionRequestComplete();\r\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\r\n\r\n                    }, function(response, xhrOrXdr) {\r\n\r\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\r\n                    });\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _sessionRequestComplete: function() {},\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._uploadData.updateSize(id, newSize);\r\n            this._totalProgress && this._totalProgress.onNewSize(id);\r\n        },\r\n\r\n        _shouldAutoRetry: function(id, name, responseJSON) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            /*jshint laxbreak: true */\r\n            if (!this._preventRetries[id]\r\n                && this._options.retry.enableAuto\r\n                && uploadData.status !== qq.status.PAUSED) {\r\n\r\n                if (this._autoRetries[id] === undefined) {\r\n                    this._autoRetries[id] = 0;\r\n                }\r\n\r\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\r\n                    this._autoRetries[id] += 1;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._storedIds.push(id);\r\n        },\r\n\r\n        // Maps a file with the button that was used to select it.\r\n        _trackButton: function(id) {\r\n            var buttonId;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                buttonId = this._handler.getFile(id).qqButtonId;\r\n            }\r\n            else {\r\n                buttonId = this._getButtonId(this._handler.getInput(id));\r\n            }\r\n\r\n            if (buttonId) {\r\n                this._buttonIdsForFileIds[id] = buttonId;\r\n            }\r\n        },\r\n\r\n        _updateFormSupportAndParams: function(formElementOrId) {\r\n            this._options.form.element = formElementOrId;\r\n\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n                );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this.setEndpoint(this._formSupport.newEndpoint);\r\n                }\r\n            }\r\n        },\r\n\r\n        _upload: function(id, params, endpoint) {\r\n            var name = this.getName(id);\r\n\r\n            if (params) {\r\n                this.setParams(params, id);\r\n            }\r\n\r\n            if (endpoint) {\r\n                this.setEndpoint(endpoint, id);\r\n            }\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onSubmit\",\r\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\r\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\r\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\r\n                identifier: id\r\n            });\r\n        },\r\n\r\n        _uploadFile: function(id) {\r\n            if (!this._handler.upload(id)) {\r\n                this._uploadData.setStatus(id, qq.status.QUEUED);\r\n            }\r\n        },\r\n\r\n        _uploadStoredFiles: function() {\r\n            var idToUpload, stillSubmitting,\r\n                self = this;\r\n\r\n            while (this._storedIds.length) {\r\n                idToUpload = this._storedIds.shift();\r\n                this._uploadFile(idToUpload);\r\n            }\r\n\r\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\r\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\r\n            if (stillSubmitting) {\r\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\r\n                setTimeout(function() {\r\n                    self._uploadStoredFiles();\r\n                }, 1000);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs some internal validation checks on an item, defined in the `validation` option.\r\n         *\r\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\r\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\r\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\r\n         * @private\r\n         */\r\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\r\n            var self = this,\r\n                file = (function() {\r\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                        return fileWrapper.file.referenceBlob;\r\n                    }\r\n                    return fileWrapper.file;\r\n                }()),\r\n                name = validationDescriptor.name,\r\n                size = validationDescriptor.size,\r\n                buttonId = this._getButtonId(fileWrapper.file),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                validityChecker = new qq.Promise();\r\n\r\n            validityChecker.then(\r\n                function() {},\r\n                function() {\r\n                    self._fileOrBlobRejected(fileWrapper.id, name);\r\n                });\r\n\r\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\r\n                this._itemError(\"typeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size === 0) {\r\n                this._itemError(\"emptyError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\r\n                this._itemError(\"sizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && size < validationBase.minSizeLimit) {\r\n                this._itemError(\"minSizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\r\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\r\n                    validityChecker.success,\r\n                    function(errorCode) {\r\n                        self._itemError(errorCode + \"ImageError\", name, file);\r\n                        validityChecker.failure();\r\n                    }\r\n                );\r\n            }\r\n            else {\r\n                validityChecker.success();\r\n            }\r\n\r\n            return validityChecker;\r\n        },\r\n\r\n        _wrapCallbacks: function() {\r\n            var self, safeCallback, prop;\r\n\r\n            self = this;\r\n\r\n            safeCallback = function(name, callback, args) {\r\n                var errorMsg;\r\n\r\n                try {\r\n                    return callback.apply(self, args);\r\n                }\r\n                catch (exception) {\r\n                    errorMsg = exception.message || exception.toString();\r\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\r\n                }\r\n            };\r\n\r\n            /* jshint forin: false, loopfunc: true */\r\n            for (prop in this._options.callbacks) {\r\n                (function() {\r\n                    var callbackName, callbackFunc;\r\n                    callbackName = prop;\r\n                    callbackFunc = self._options.callbacks[callbackName];\r\n                    self._options.callbacks[callbackName] = function() {\r\n                        return safeCallback(callbackName, callbackFunc, arguments);\r\n                    };\r\n                }());\r\n            }\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.FineUploaderBasic = function(o) {\r\n        var self = this;\r\n\r\n        // These options define FineUploaderBasic mode.\r\n        this._options = {\r\n            debug: false,\r\n            button: null,\r\n            multiple: true,\r\n            maxConnections: 3,\r\n            disableCancelForFormUploads: false,\r\n            autoUpload: true,\r\n\r\n            request: {\r\n                customHeaders: {},\r\n                endpoint: \"/server/upload\",\r\n                filenameParam: \"qqfilename\",\r\n                forceMultipart: true,\r\n                inputName: \"qqfile\",\r\n                method: \"POST\",\r\n                params: {},\r\n                paramsInBody: true,\r\n                totalFileSizeName: \"qqtotalfilesize\",\r\n                uuidName: \"qquuid\"\r\n            },\r\n\r\n            validation: {\r\n                allowedExtensions: [],\r\n                sizeLimit: 0,\r\n                minSizeLimit: 0,\r\n                itemLimit: 0,\r\n                stopOnFirstInvalidFile: true,\r\n                acceptFiles: null,\r\n                image: {\r\n                    maxHeight: 0,\r\n                    maxWidth: 0,\r\n                    minHeight: 0,\r\n                    minWidth: 0\r\n                }\r\n            },\r\n\r\n            callbacks: {\r\n                onSubmit: function(id, name) {},\r\n                onSubmitted: function(id, name) {},\r\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\r\n                onAllComplete: function(successful, failed) {},\r\n                onCancel: function(id, name) {},\r\n                onUpload: function(id, name) {},\r\n                onUploadChunk: function(id, name, chunkData) {},\r\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\r\n                onResume: function(id, fileName, chunkData) {},\r\n                onProgress: function(id, name, loaded, total) {},\r\n                onTotalProgress: function(loaded, total) {},\r\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\r\n                onAutoRetry: function(id, name, attemptNumber) {},\r\n                onManualRetry: function(id, name) {},\r\n                onValidateBatch: function(fileOrBlobData) {},\r\n                onValidate: function(fileOrBlobData) {},\r\n                onSubmitDelete: function(id) {},\r\n                onDelete: function(id) {},\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\r\n                onPasteReceived: function(blob) {},\r\n                onStatusChange: function(id, oldStatus, newStatus) {},\r\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\r\n            },\r\n\r\n            messages: {\r\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\r\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\r\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\r\n                emptyError: \"{file} is empty, please select files again without it.\",\r\n                noFilesError: \"No files to upload.\",\r\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\r\n                maxHeightImageError: \"Image is too tall.\",\r\n                maxWidthImageError: \"Image is too wide.\",\r\n                minHeightImageError: \"Image is not tall enough.\",\r\n                minWidthImageError: \"Image is not wide enough.\",\r\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\r\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\r\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\r\n            },\r\n\r\n            retry: {\r\n                enableAuto: false,\r\n                maxAutoAttempts: 3,\r\n                autoAttemptDelay: 5,\r\n                preventRetryResponseProperty: \"preventRetry\"\r\n            },\r\n\r\n            classes: {\r\n                buttonHover: \"qq-upload-button-hover\",\r\n                buttonFocus: \"qq-upload-button-focus\"\r\n            },\r\n\r\n            chunking: {\r\n                enabled: false,\r\n                concurrent: {\r\n                    enabled: false\r\n                },\r\n                mandatory: false,\r\n                paramNames: {\r\n                    partIndex: \"qqpartindex\",\r\n                    partByteOffset: \"qqpartbyteoffset\",\r\n                    chunkSize: \"qqchunksize\",\r\n                    totalFileSize: \"qqtotalfilesize\",\r\n                    totalParts: \"qqtotalparts\"\r\n                },\r\n                partSize: 2000000,\r\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\r\n                success: {\r\n                    endpoint: null\r\n                }\r\n            },\r\n\r\n            resume: {\r\n                enabled: false,\r\n                recordsExpireIn: 7, //days\r\n                paramNames: {\r\n                    resuming: \"qqresume\"\r\n                }\r\n            },\r\n\r\n            formatFileName: function(fileOrBlobName) {\r\n                return fileOrBlobName;\r\n            },\r\n\r\n            text: {\r\n                defaultResponseError: \"Upload failure reason unknown\",\r\n                fileInputTitle: \"file input\",\r\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\r\n            },\r\n\r\n            deleteFile: {\r\n                enabled: false,\r\n                method: \"DELETE\",\r\n                endpoint: \"/server/upload\",\r\n                customHeaders: {},\r\n                params: {}\r\n            },\r\n\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false,\r\n                allowXdr: false\r\n            },\r\n\r\n            blobs: {\r\n                defaultName: \"misc_data\"\r\n            },\r\n\r\n            paste: {\r\n                targetElement: null,\r\n                defaultName: \"pasted_image\"\r\n            },\r\n\r\n            camera: {\r\n                ios: false,\r\n\r\n                // if ios is true: button is null means target the default button, otherwise target the button specified\r\n                button: null\r\n            },\r\n\r\n            // This refers to additional upload buttons to be handled by Fine Uploader.\r\n            // Each element is an object, containing `element` as the only required\r\n            // property.  The `element` must be a container that will ultimately\r\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\r\n            // Optional properties of each object include `multiple`, `validation`,\r\n            // and `folders`.\r\n            extraButtons: [],\r\n\r\n            // Depends on the session module.  Used to query the server for an initial file list\r\n            // during initialization and optionally after a `reset`.\r\n            session: {\r\n                endpoint: null,\r\n                params: {},\r\n                customHeaders: {},\r\n                refreshOnReset: true\r\n            },\r\n\r\n            // Send parameters associated with an existing form along with the files\r\n            form: {\r\n                // Element ID, HTMLElement, or null\r\n                element: \"qq-form\",\r\n\r\n                // Overrides the base `autoUpload`, unless `element` is null.\r\n                autoUpload: false,\r\n\r\n                // true = upload files on form submission (and squelch submit event)\r\n                interceptSubmit: true\r\n            },\r\n\r\n            // scale images client side, upload a new file for each scaled version\r\n            scaling: {\r\n                customResizer: null,\r\n\r\n                // send the original file as well\r\n                sendOriginal: true,\r\n\r\n                // fox orientation for scaled images\r\n                orient: true,\r\n\r\n                // If null, scaled image type will match reference image type.  This value will be referred to\r\n                // for any size record that does not specific a type.\r\n                defaultType: null,\r\n\r\n                defaultQuality: 80,\r\n\r\n                failureText: \"Failed to scale\",\r\n\r\n                includeExif: false,\r\n\r\n                // metadata about each requested scaled version\r\n                sizes: []\r\n            },\r\n\r\n            workarounds: {\r\n                iosEmptyVideos: true,\r\n                ios8SafariUploads: true,\r\n                ios8BrowserCrash: false\r\n            }\r\n        };\r\n\r\n        // Replace any default options with user defined ones\r\n        qq.extend(this._options, o, true);\r\n\r\n        this._buttons = [];\r\n        this._extraButtonSpecs = {};\r\n        this._buttonIdsForFileIds = [];\r\n\r\n        this._wrapCallbacks();\r\n        this._disposeSupport =  new qq.DisposeSupport();\r\n\r\n        this._storedIds = [];\r\n        this._autoRetries = [];\r\n        this._retryTimeouts = [];\r\n        this._preventRetries = [];\r\n        this._thumbnailUrls = [];\r\n\r\n        this._netUploadedOrQueued = 0;\r\n        this._netUploaded = 0;\r\n        this._uploadData = this._createUploadDataTracker();\r\n\r\n        this._initFormSupportAndParams();\r\n\r\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\r\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\r\n\r\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\r\n\r\n        this._endpointStore = this._createStore(this._options.request.endpoint);\r\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\r\n\r\n        this._handler = this._createUploadHandler();\r\n\r\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\r\n\r\n        if (this._options.button) {\r\n            this._defaultButtonId = this._createUploadButton({\r\n                element: this._options.button,\r\n                title: this._options.text.fileInputTitle\r\n            }).getButtonId();\r\n        }\r\n\r\n        this._generateExtraButtonSpecs();\r\n\r\n        this._handleCameraAccess();\r\n\r\n        if (this._options.paste.targetElement) {\r\n            if (qq.PasteSupport) {\r\n                this._pasteHandler = this._createPasteHandler();\r\n            }\r\n            else {\r\n                this.log(\"Paste support module not found\", \"error\");\r\n            }\r\n        }\r\n\r\n        this._preventLeaveInProgress();\r\n\r\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\r\n        this._refreshSessionData();\r\n\r\n        this._succeededSinceLastAllComplete = [];\r\n        this._failedSinceLastAllComplete = [];\r\n\r\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\r\n        if (this._scaler.enabled) {\r\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\r\n        }\r\n\r\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\r\n            this._totalProgress = new qq.TotalProgress(\r\n                qq.bind(this._onTotalProgress, this),\r\n\r\n                function(id) {\r\n                    var entry = self._uploadData.retrieve({id: id});\r\n                    return (entry && entry.size) || 0;\r\n                }\r\n            );\r\n        }\r\n\r\n        this._currentItemLimit = this._options.validation.itemLimit;\r\n    };\r\n\r\n    // Define the private & public API methods.\r\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\r\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\r\n}());\r\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\r\n/**\r\n * Base upload handler module.  Controls more specific handlers.\r\n *\r\n * @param o Options.  Passed along to the specific handler submodule as well.\r\n * @param namespace [optional] Namespace for the specific handler.\r\n */\r\nqq.UploadHandlerController = function(o, namespace) {\r\n    \"use strict\";\r\n\r\n    var controller = this,\r\n        chunkingPossible = false,\r\n        concurrentChunkingPossible = false,\r\n        chunking, preventRetryResponse, log, handler,\r\n\r\n    options = {\r\n        paramsStore: {},\r\n        maxConnections: 3, // maximum number of concurrent uploads\r\n        chunking: {\r\n            enabled: false,\r\n            multiple: {\r\n                enabled: false\r\n            }\r\n        },\r\n        log: function(str, level) {},\r\n        onProgress: function(id, fileName, loaded, total) {},\r\n        onComplete: function(id, fileName, response, xhr) {},\r\n        onCancel: function(id, fileName) {},\r\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\r\n        onUpload: function(id, fileName) {},\r\n        onUploadChunk: function(id, fileName, chunkData) {},\r\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\r\n        onAutoRetry: function(id, fileName, response, xhr) {},\r\n        onResume: function(id, fileName, chunkData) {},\r\n        onUuidChanged: function(id, newUuid) {},\r\n        getName: function(id) {},\r\n        setSize: function(id, newSize) {},\r\n        isQueued: function(id) {},\r\n        getIdsInProxyGroup: function(id) {},\r\n        getIdsInBatch: function(id) {}\r\n    },\r\n\r\n    chunked = {\r\n        // Called when each chunk has uploaded successfully\r\n        done: function(id, chunkIdx, response, xhr) {\r\n            var chunkData = handler._getChunkData(id, chunkIdx);\r\n\r\n            handler._getFileState(id).attemptingResume = false;\r\n\r\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\r\n            handler._getFileState(id).loaded += chunkData.size;\r\n\r\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\r\n        },\r\n\r\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\r\n        // logic associated with closing out the file, such as combining the chunks.\r\n        finalize: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id);\r\n\r\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\r\n            handler.finalizeChunks(id).then(\r\n                function(response, xhr) {\r\n                    log(\"Finalize successful for \" + id);\r\n\r\n                    var normaizedResponse = upload.normalizeResponse(response, true);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    handler._maybeDeletePersistedChunkData(id);\r\n                    upload.cleanup(id, normaizedResponse, xhr);\r\n                },\r\n                function(response, xhr) {\r\n                    var normaizedResponse = upload.normalizeResponse(response, false);\r\n\r\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\r\n\r\n                    if (normaizedResponse.reset) {\r\n                        chunked.reset(id);\r\n                    }\r\n\r\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\r\n                        upload.cleanup(id, normaizedResponse, xhr);\r\n                    }\r\n                }\r\n            );\r\n        },\r\n\r\n        handleFailure: function(chunkIdx, id, response, xhr) {\r\n            var name = options.getName(id);\r\n\r\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\r\n\r\n            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n            var responseToReport = upload.normalizeResponse(response, false),\r\n                inProgressIdx;\r\n\r\n            if (responseToReport.reset) {\r\n                chunked.reset(id);\r\n            }\r\n            else {\r\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\r\n                if (inProgressIdx >= 0) {\r\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\r\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\r\n                }\r\n            }\r\n\r\n            // We may have aborted all other in-progress chunks for this file due to a failure.\r\n            // If so, ignore the failures associated with those aborts.\r\n            if (!handler._getFileState(id).temp.ignoreFailure) {\r\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\r\n                // chunks since they will be explicitly aborted\r\n                if (concurrentChunkingPossible) {\r\n                    handler._getFileState(id).temp.ignoreFailure = true;\r\n\r\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\r\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\r\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\r\n                        ckXhr.abort();\r\n                        // Flag the transport, in case we are waiting for some other async operation\r\n                        // to complete before attempting to upload the chunk\r\n                        ckXhr._cancelled = true;\r\n                    });\r\n\r\n                    // We must indicate that all aborted chunks are no longer in progress\r\n                    handler.moveInProgressToRemaining(id);\r\n\r\n                    // Free up any connections used by these chunks, but don't allow any\r\n                    // other files to take up the connections (until we have exhausted all auto-retries)\r\n                    connectionManager.free(id, true);\r\n                }\r\n\r\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\r\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\r\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\r\n                    // is a failure or not.\r\n                    upload.cleanup(id, responseToReport, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        hasMoreParts: function(id) {\r\n            return !!handler._getFileState(id).chunking.remaining.length;\r\n        },\r\n\r\n        nextPart: function(id) {\r\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\r\n\r\n            if (nextIdx >= handler._getTotalChunks(id)) {\r\n                nextIdx = null;\r\n            }\r\n\r\n            return nextIdx;\r\n        },\r\n\r\n        reset: function(id) {\r\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\r\n\r\n            handler._maybeDeletePersistedChunkData(id);\r\n            handler.reevaluateChunking(id);\r\n            handler._getFileState(id).loaded = 0;\r\n        },\r\n\r\n        sendNext: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id),\r\n                chunkIdx = chunked.nextPart(id),\r\n                chunkData = handler._getChunkData(id, chunkIdx),\r\n                resuming = handler._getFileState(id).attemptingResume,\r\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\r\n\r\n            if (handler._getFileState(id).loaded == null) {\r\n                handler._getFileState(id).loaded = 0;\r\n            }\r\n\r\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\r\n            if (resuming && options.onResume(id, name, chunkData) === false) {\r\n                chunked.reset(id);\r\n                chunkIdx = chunked.nextPart(id);\r\n                chunkData = handler._getChunkData(id, chunkIdx);\r\n                resuming = false;\r\n            }\r\n\r\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\r\n            if (chunkIdx == null && inProgressChunks.length === 0) {\r\n                chunked.finalize(id);\r\n            }\r\n\r\n            // Send the next chunk\r\n            else {\r\n                log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\r\n                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\r\n                inProgressChunks.push(chunkIdx);\r\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\r\n\r\n                if (concurrentChunkingPossible) {\r\n                    connectionManager.open(id, chunkIdx);\r\n                }\r\n\r\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\r\n                    chunked.sendNext(id);\r\n                }\r\n\r\n                if (chunkData.blob.size === 0) {\r\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\r\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\r\n                }\r\n                else {\r\n                    handler.uploadChunk(id, chunkIdx, resuming).then(\r\n                        // upload chunk success\r\n                        function success(response, xhr) {\r\n                            log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\r\n\r\n                            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n                            var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\r\n                                responseToReport = upload.normalizeResponse(response, true),\r\n                                inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\r\n\r\n                            log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\r\n\r\n                            chunked.done(id, chunkIdx, responseToReport, xhr);\r\n\r\n                            if (inProgressChunkIdx >= 0) {\r\n                                inProgressChunks.splice(inProgressChunkIdx, 1);\r\n                            }\r\n\r\n                            handler._maybePersistChunkedState(id);\r\n\r\n                            if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\r\n                                chunked.finalize(id);\r\n                            }\r\n                            else if (chunked.hasMoreParts(id)) {\r\n                                chunked.sendNext(id);\r\n                            }\r\n                            else {\r\n                                log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\r\n                            }\r\n                        },\r\n\r\n                        // upload chunk failure\r\n                        function failure(response, xhr) {\r\n                            chunked.handleFailure(chunkIdx, id, response, xhr);\r\n                        }\r\n                        )\r\n                        .done(function() {\r\n                            handler.clearXhr(id, chunkIdx);\r\n                        });\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    connectionManager = {\r\n        _open: [],\r\n        _openChunks: {},\r\n        _waiting: [],\r\n\r\n        available: function() {\r\n            var max = options.maxConnections,\r\n                openChunkEntriesCount = 0,\r\n                openChunksCount = 0;\r\n\r\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\r\n                openChunkEntriesCount++;\r\n                openChunksCount += openChunkIndexes.length;\r\n            });\r\n\r\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\r\n        },\r\n\r\n        /**\r\n         * Removes element from queue, starts upload of next\r\n         */\r\n        free: function(id, dontAllowNext) {\r\n            var allowNext = !dontAllowNext,\r\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\r\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\r\n                nextId;\r\n\r\n            delete connectionManager._openChunks[id];\r\n\r\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\r\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\r\n                delete handler._getFileState(id).file;\r\n            }\r\n\r\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\r\n            if (waitingIndex >= 0) {\r\n                connectionManager._waiting.splice(waitingIndex, 1);\r\n            }\r\n            // If this file was consuming a connection, allow the next file to be uploaded\r\n            else if (allowNext && connectionsIndex >= 0) {\r\n                connectionManager._open.splice(connectionsIndex, 1);\r\n\r\n                nextId = connectionManager._waiting.shift();\r\n                if (nextId >= 0) {\r\n                    connectionManager._open.push(nextId);\r\n                    upload.start(nextId);\r\n                }\r\n            }\r\n        },\r\n\r\n        getWaitingOrConnected: function() {\r\n            var waitingOrConnected = [];\r\n\r\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\r\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\r\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\r\n                if (chunks && chunks.length) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // For non-chunked files, only one connection will be consumed per file.\r\n            // This is where we aggregate those file IDs.\r\n            qq.each(connectionManager._open, function(idx, fileId) {\r\n                if (!connectionManager._openChunks[fileId]) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // There may be files waiting for a connection.\r\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\r\n\r\n            return waitingOrConnected;\r\n        },\r\n\r\n        isUsingConnection: function(id) {\r\n            return qq.indexOf(connectionManager._open, id) >= 0;\r\n        },\r\n\r\n        open: function(id, chunkIdx) {\r\n            if (chunkIdx == null) {\r\n                var alreadyInWaiting = qq.indexOf(connectionManager._waiting, id);\r\n                var alreadyInOpen = qq.indexOf(connectionManager._open, id);\r\n                if (alreadyInWaiting === -1 && alreadyInOpen === -1) {\r\n                    connectionManager._waiting.push(id);\r\n                }\r\n            }\r\n\r\n            if (connectionManager.available()) {\r\n                if (chunkIdx == null) {\r\n                    connectionManager._waiting.pop();\r\n                    connectionManager._open.push(id);\r\n                }\r\n                else {\r\n                    (function() {\r\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\r\n                        openChunksEntry.push(chunkIdx);\r\n                        connectionManager._openChunks[id] = openChunksEntry;\r\n                    }());\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        reset: function() {\r\n            connectionManager._waiting = [];\r\n            connectionManager._open = [];\r\n        }\r\n    },\r\n\r\n    simple = {\r\n        send: function(id, name) {\r\n            handler._getFileState(id).loaded = 0;\r\n\r\n            log(\"Sending simple upload request for \" + id);\r\n            handler.uploadFile(id).then(\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request succeeded for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, true),\r\n                        size = options.getSize(id);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    upload.maybeNewUuid(id, responseToReport);\r\n                    upload.cleanup(id, responseToReport, optXhr);\r\n                },\r\n\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request failed for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, false);\r\n\r\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\r\n                        upload.cleanup(id, responseToReport, optXhr);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    },\r\n\r\n    upload = {\r\n        cancel: function(id) {\r\n            log(\"Cancelling \" + id);\r\n            options.paramsStore.remove(id);\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        cleanup: function(id, response, optXhr) {\r\n            var name = options.getName(id);\r\n\r\n            options.onComplete(id, name, response, optXhr);\r\n\r\n            if (handler._getFileState(id)) {\r\n                handler._clearXhrs && handler._clearXhrs(id);\r\n            }\r\n\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\r\n        // if none of these are available for the ID\r\n        getProxyOrBlob: function(id) {\r\n            return (handler.getProxy && handler.getProxy(id)) ||\r\n                (handler.getFile && handler.getFile(id));\r\n        },\r\n\r\n        initHandler: function() {\r\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\r\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\r\n\r\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\r\n                options,\r\n                {\r\n                    getDataByUuid: options.getDataByUuid,\r\n                    getName: options.getName,\r\n                    getSize: options.getSize,\r\n                    getUuid: options.getUuid,\r\n                    log: log,\r\n                    onCancel: options.onCancel,\r\n                    onProgress: options.onProgress,\r\n                    onUuidChanged: options.onUuidChanged\r\n                }\r\n            );\r\n\r\n            if (handler._removeExpiredChunkingRecords) {\r\n                handler._removeExpiredChunkingRecords();\r\n            }\r\n        },\r\n\r\n        isDeferredEligibleForUpload: function(id) {\r\n            return options.isQueued(id);\r\n        },\r\n\r\n        // For Blobs that are part of a group of generated images, along with a reference image,\r\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\r\n        // even if some async processing must be completed on one or more Blobs first.\r\n        maybeDefer: function(id, blob) {\r\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\r\n            // and then submit the upload to the specific handler once the blob is available.\r\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\r\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\r\n\r\n                // Blob creation may take some time, so the caller may want to update the\r\n                // UI to indicate that an operation is in progress, even before the actual\r\n                // upload begins and an onUpload callback is invoked.\r\n                options.onUploadPrep(id);\r\n\r\n                log(\"Attempting to generate a blob on-demand for \" + id);\r\n                blob.create().then(function(generatedBlob) {\r\n                    log(\"Generated an on-demand blob for \" + id);\r\n\r\n                    // Update record associated with this file by providing the generated Blob\r\n                    handler.updateBlob(id, generatedBlob);\r\n\r\n                    // Propagate the size for this generated Blob\r\n                    options.setSize(id, generatedBlob.size);\r\n\r\n                    // Order handler to recalculate chunking possibility, if applicable\r\n                    handler.reevaluateChunking(id);\r\n\r\n                    upload.maybeSendDeferredFiles(id);\r\n                },\r\n\r\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\r\n                function(errorMessage) {\r\n                    var errorResponse = {};\r\n\r\n                    if (errorMessage) {\r\n                        errorResponse.error = errorMessage;\r\n                    }\r\n\r\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\r\n\r\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\r\n                    upload.maybeSendDeferredFiles(id);\r\n                    connectionManager.free(id);\r\n                });\r\n            }\r\n            else {\r\n                return upload.maybeSendDeferredFiles(id);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\r\n        maybeSendDeferredFiles: function(id) {\r\n            var idsInGroup = options.getIdsInProxyGroup(id),\r\n                uploadedThisId = false;\r\n\r\n            if (idsInGroup && idsInGroup.length) {\r\n                log(\"Maybe ready to upload proxy group file \" + id);\r\n\r\n                qq.each(idsInGroup, function(idx, idInGroup) {\r\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\r\n                        uploadedThisId = idInGroup === id;\r\n                        upload.now(idInGroup);\r\n                    }\r\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                uploadedThisId = true;\r\n                upload.now(id);\r\n            }\r\n\r\n            return uploadedThisId;\r\n        },\r\n\r\n        maybeNewUuid: function(id, response) {\r\n            if (response.newUuid !== undefined) {\r\n                options.onUuidChanged(id, response.newUuid);\r\n            }\r\n        },\r\n\r\n        // The response coming from handler implementations may be in various formats.\r\n        // Instead of hoping a promise nested 5 levels deep will always return an object\r\n        // as its first param, let's just normalize the response here.\r\n        normalizeResponse: function(originalResponse, successful) {\r\n            var response = originalResponse;\r\n\r\n            // The passed \"response\" param may not be a response at all.\r\n            // It could be a string, detailing the error, for example.\r\n            if (!qq.isObject(originalResponse)) {\r\n                response = {};\r\n\r\n                if (qq.isString(originalResponse) && !successful) {\r\n                    response.error = originalResponse;\r\n                }\r\n            }\r\n\r\n            response.success = successful;\r\n\r\n            return response;\r\n        },\r\n\r\n        now: function(id) {\r\n            var name = options.getName(id);\r\n\r\n            if (!controller.isValid(id)) {\r\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\r\n            }\r\n\r\n            options.onUpload(id, name);\r\n\r\n            if (chunkingPossible && handler._shouldChunkThisFile(id)) {\r\n                chunked.sendNext(id);\r\n            }\r\n            else {\r\n                simple.send(id, name);\r\n            }\r\n        },\r\n\r\n        start: function(id) {\r\n            var blobToUpload = upload.getProxyOrBlob(id);\r\n\r\n            if (blobToUpload) {\r\n                return upload.maybeDefer(id, blobToUpload);\r\n            }\r\n            else {\r\n                upload.now(id);\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Adds file or file input to the queue\r\n         **/\r\n        add: function(id, file) {\r\n            handler.add.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Sends the file identified by id\r\n         */\r\n        upload: function(id) {\r\n            if (connectionManager.open(id)) {\r\n                return upload.start(id);\r\n            }\r\n            return false;\r\n        },\r\n\r\n        retry: function(id) {\r\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\r\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\r\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\r\n            // any more failures at this point.\r\n            if (concurrentChunkingPossible) {\r\n                handler._getFileState(id).temp.ignoreFailure = false;\r\n            }\r\n\r\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\r\n            // Just go ahead and ask the handler to upload again.\r\n            if (connectionManager.isUsingConnection(id)) {\r\n                return upload.start(id);\r\n            }\r\n\r\n            // If we are attempting to retry a file that is not currently consuming a connection,\r\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\r\n            // before the retry commences.\r\n            else {\r\n                return controller.upload(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels file upload by id\r\n         */\r\n        cancel: function(id) {\r\n            var cancelRetVal = handler.cancel(id);\r\n\r\n            if (qq.isGenericPromise(cancelRetVal)) {\r\n                cancelRetVal.then(function() {\r\n                    upload.cancel(id);\r\n                });\r\n            }\r\n            else if (cancelRetVal !== false) {\r\n                upload.cancel(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels all queued or in-progress uploads\r\n         */\r\n        cancelAll: function() {\r\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\r\n                i;\r\n\r\n            // ensure files are cancelled in reverse order which they were added\r\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\r\n            if (waitingOrConnected.length) {\r\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\r\n                    controller.cancel(waitingOrConnected[i]);\r\n                }\r\n            }\r\n\r\n            connectionManager.reset();\r\n        },\r\n\r\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\r\n        // Undefined if no file record is available.\r\n        getFile: function(id) {\r\n            if (handler.getProxy && handler.getProxy(id)) {\r\n                return handler.getProxy(id).referenceBlob;\r\n            }\r\n\r\n            return handler.getFile && handler.getFile(id);\r\n        },\r\n\r\n        // Returns true if the Blob associated with the ID is related to a proxy s\r\n        isProxied: function(id) {\r\n            return !!(handler.getProxy && handler.getProxy(id));\r\n        },\r\n\r\n        getInput: function(id) {\r\n            if (handler.getInput) {\r\n                return handler.getInput(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            log(\"Resetting upload handler\");\r\n            controller.cancelAll();\r\n            connectionManager.reset();\r\n            handler.reset();\r\n        },\r\n\r\n        expunge: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.expunge(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Determine if the file exists.\r\n         */\r\n        isValid: function(id) {\r\n            return handler.isValid(id);\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            if (handler.getResumableFilesData) {\r\n                return handler.getResumableFilesData();\r\n            }\r\n            return [];\r\n        },\r\n\r\n        /**\r\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\r\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\r\n         * will be undefined.\r\n         *\r\n         * @param id Internal file ID\r\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\r\n         */\r\n        getThirdPartyFileId: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.getThirdPartyFileId(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\r\n         * @param id ID of the upload/file to pause\r\n         * @returns {boolean} true if the upload was paused\r\n         */\r\n        pause: function(id) {\r\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\r\n                connectionManager.free(id);\r\n                handler.moveInProgressToRemaining(id);\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        // True if the file is eligible for pause/resume.\r\n        isResumable: function(id) {\r\n            return !!handler.isResumable && handler.isResumable(id);\r\n        }\r\n    });\r\n\r\n    qq.extend(options, o);\r\n    log = options.log;\r\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\r\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\r\n\r\n    preventRetryResponse = (function() {\r\n        var response = {};\r\n\r\n        response[options.preventRetryParam] = true;\r\n\r\n        return response;\r\n    }());\r\n\r\n    upload.initHandler();\r\n};\r\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id);\n\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now()\n                };\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n",";(function (root, factory, undef) {\nif (qq.CryptoJS) { factory(qq.CryptoJS); } else { qq.CryptoJS = factory(); }\n}\n(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /*\n\t     * Local polyfil of Object.create\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {};\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));",";(function (root, factory, undef) {\nif (qq.CryptoJS) { factory(qq.CryptoJS); } else { qq.CryptoJS = factory(); }\n}\n(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));",";(function (root, factory, undef) {\nif (qq.CryptoJS) { factory(qq.CryptoJS); } else { qq.CryptoJS = factory(); }\n}\n(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));",";(function (root, factory, undef) {\nif (qq.CryptoJS) { factory(qq.CryptoJS); } else { qq.CryptoJS = factory(); }\n}\n(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));",";(function (root, factory, undef) {\nif (qq.CryptoJS) { factory(qq.CryptoJS); } else { qq.CryptoJS = factory(); }\n}\n(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));",";(function (root, factory, undef) {\nif (qq.CryptoJS) { factory(qq.CryptoJS); } else { qq.CryptoJS = factory(); }\n}\n(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != 'function') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));","/*globals qq */\r\nqq.s3 = qq.s3 || {};\r\n\r\nqq.s3.util = qq.s3.util || (function() {\r\n    \"use strict\";\r\n\r\n    return {\r\n        ALGORITHM_PARAM_NAME: \"x-amz-algorithm\",\r\n\r\n        AWS_PARAM_PREFIX: \"x-amz-meta-\",\r\n\r\n        CREDENTIAL_PARAM_NAME: \"x-amz-credential\",\r\n\r\n        DATE_PARAM_NAME: \"x-amz-date\",\r\n\r\n        REDUCED_REDUNDANCY_PARAM_NAME: \"x-amz-storage-class\",\r\n        REDUCED_REDUNDANCY_PARAM_VALUE: \"REDUCED_REDUNDANCY\",\r\n\r\n        SERVER_SIDE_ENCRYPTION_PARAM_NAME: \"x-amz-server-side-encryption\",\r\n        SERVER_SIDE_ENCRYPTION_PARAM_VALUE: \"AES256\",\r\n\r\n        SESSION_TOKEN_PARAM_NAME: \"x-amz-security-token\",\r\n\r\n        V4_ALGORITHM_PARAM_VALUE: \"AWS4-HMAC-SHA256\",\r\n\r\n        V4_SIGNATURE_PARAM_NAME: \"x-amz-signature\",\r\n\r\n        CASE_SENSITIVE_PARAM_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\"\r\n        ],\r\n\r\n        UNSIGNABLE_REST_HEADER_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\"\r\n        ],\r\n\r\n        UNPREFIXED_PARAM_NAMES: [\r\n            \"Cache-Control\",\r\n            \"Content-Disposition\",\r\n            \"Content-Encoding\",\r\n            \"Content-MD5\",\r\n            \"x-amz-server-side-encryption-customer-algorithm\",\r\n            \"x-amz-server-side-encryption-customer-key\",\r\n            \"x-amz-server-side-encryption-customer-key-MD5\"\r\n        ],\r\n\r\n        /**\r\n         * This allows for the region to be specified in the bucket's endpoint URL, or not.\r\n         *\r\n         * Examples of some valid endpoints are:\r\n         *     http://foo.s3.amazonaws.com\r\n         *     https://foo.s3.amazonaws.com\r\n         *     http://foo.s3-ap-northeast-1.amazonaws.com\r\n         *     foo.s3.amazonaws.com\r\n         *     http://foo.bar.com\r\n         *     http://s3.amazonaws.com/foo.bar.com\r\n         * ...etc\r\n         *\r\n         * @param endpoint The bucket's URL.\r\n         * @returns {String || undefined} The bucket name, or undefined if the URL cannot be parsed.\r\n         */\r\n        getBucket: function(endpoint) {\r\n            var patterns = [\r\n                    //bucket in domain\r\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)\\.s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com/i,\r\n                    //bucket in path\r\n                    /^(?:https?:\\/\\/)?s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com\\/([a-z0-9.\\-_]+)/i,\r\n                    //custom domain\r\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)/i\r\n                ],\r\n                bucket;\r\n\r\n            qq.each(patterns, function(idx, pattern) {\r\n                var match = pattern.exec(endpoint);\r\n\r\n                if (match) {\r\n                    bucket = match[1];\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            return bucket;\r\n        },\r\n\r\n        /** Create Prefixed request headers which are appropriate for S3.\r\n         *\r\n         * If the request header is appropriate for S3 (e.g. Cache-Control) then pass\r\n         * it along without a metadata prefix. For all other request header parameter names,\r\n         * apply qq.s3.util.AWS_PARAM_PREFIX before the name.\r\n         * See: http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html\r\n         */\r\n        _getPrefixedParamName: function(name) {\r\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\r\n                return name;\r\n            }\r\n            return qq.s3.util.AWS_PARAM_PREFIX + name;\r\n        },\r\n\r\n        /**\r\n         * Create a policy document to be signed and sent along with the S3 upload request.\r\n         *\r\n         * @param spec Object with properties use to construct the policy document.\r\n         * @returns {Object} Policy doc.\r\n         */\r\n        getPolicy: function(spec) {\r\n            var policy = {},\r\n                conditions = [],\r\n                bucket = spec.bucket,\r\n                date = spec.date,\r\n                drift = spec.clockDrift,\r\n                key = spec.key,\r\n                accessKey = spec.accessKey,\r\n                acl = spec.acl,\r\n                type = spec.type,\r\n                expectedStatus = spec.expectedStatus,\r\n                sessionToken = spec.sessionToken,\r\n                params = spec.params,\r\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\r\n                minFileSize = spec.minFileSize,\r\n                maxFileSize = spec.maxFileSize,\r\n                reducedRedundancy = spec.reducedRedundancy,\r\n                region = spec.region,\r\n                serverSideEncryption = spec.serverSideEncryption,\r\n                signatureVersion = spec.signatureVersion;\r\n\r\n            policy.expiration = qq.s3.util.getPolicyExpirationDate(date, drift);\r\n\r\n            conditions.push({acl: acl});\r\n            conditions.push({bucket: bucket});\r\n\r\n            if (type) {\r\n                conditions.push({\"Content-Type\": type});\r\n            }\r\n\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            if (expectedStatus) {\r\n                conditions.push({success_action_status: expectedStatus.toString()});\r\n            }\r\n\r\n            if (successRedirectUrl) {\r\n                conditions.push({success_action_redirect: successRedirectUrl});\r\n            }\r\n            // jscs:enable\r\n            if (reducedRedundancy) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\r\n            }\r\n\r\n            if (sessionToken) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\r\n            }\r\n\r\n            if (serverSideEncryption) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\r\n            }\r\n\r\n            if (signatureVersion === 2) {\r\n                conditions.push({key: key});\r\n            }\r\n            else if (signatureVersion === 4) {\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1].key = key;\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.CREDENTIAL_PARAM_NAME] =\r\n                    qq.s3.util.getV4CredentialsString({date: date, key: accessKey, region: region});\r\n\r\n                conditions.push({});\r\n                conditions[conditions.length - 1][qq.s3.util.DATE_PARAM_NAME] =\r\n                    qq.s3.util.getV4PolicyDate(date, drift);\r\n            }\r\n\r\n            // user metadata\r\n            qq.each(params, function(name, val) {\r\n                var awsParamName = qq.s3.util._getPrefixedParamName(name),\r\n                    param = {};\r\n\r\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\r\n                    param[awsParamName] = val;\r\n                }\r\n                else {\r\n                    param[awsParamName] = encodeURIComponent(val);\r\n                }\r\n\r\n                conditions.push(param);\r\n            });\r\n\r\n            policy.conditions = conditions;\r\n\r\n            qq.s3.util.enforceSizeLimits(policy, minFileSize, maxFileSize);\r\n\r\n            return policy;\r\n        },\r\n\r\n        /**\r\n         * Update a previously constructed policy document with updated credentials.  Currently, this only requires we\r\n         * update the session token.  This is only relevant if requests are being signed client-side.\r\n         *\r\n         * @param policy Live policy document\r\n         * @param newSessionToken Updated session token.\r\n         */\r\n        refreshPolicyCredentials: function(policy, newSessionToken) {\r\n            var sessionTokenFound = false;\r\n\r\n            qq.each(policy.conditions, function(oldCondIdx, oldCondObj) {\r\n                qq.each(oldCondObj, function(oldCondName, oldCondVal) {\r\n                    if (oldCondName === qq.s3.util.SESSION_TOKEN_PARAM_NAME) {\r\n                        oldCondObj[oldCondName] = newSessionToken;\r\n                        sessionTokenFound = true;\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (!sessionTokenFound) {\r\n                policy.conditions.push({});\r\n                policy.conditions[policy.conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = newSessionToken;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generates all parameters to be passed along with the S3 upload request.  This includes invoking a callback\r\n         * that is expected to asynchronously retrieve a signature for the policy document.  Note that the server\r\n         * signing the request should reject a \"tainted\" policy document that includes unexpected values, since it is\r\n         * still possible for a malicious user to tamper with these values during policy document generation,\r\n         * before it is sent to the server for signing.\r\n         *\r\n         * @param spec Object with properties: `params`, `type`, `key`, `accessKey`, `acl`, `expectedStatus`, `successRedirectUrl`,\r\n         * `reducedRedundancy`, `region`, `serverSideEncryption`, `version`, and `log()`, along with any options associated with `qq.s3.util.getPolicy()`.\r\n         * @returns {qq.Promise} Promise that will be fulfilled once all parameters have been determined.\r\n         */\r\n        generateAwsParams: function(spec, signPolicyCallback) {\r\n            var awsParams = {},\r\n                customParams = spec.params,\r\n                promise = new qq.Promise(),\r\n                sessionToken = spec.sessionToken,\r\n                drift = spec.clockDrift,\r\n                type = spec.type,\r\n                key = spec.key,\r\n                accessKey = spec.accessKey,\r\n                acl = spec.acl,\r\n                expectedStatus = spec.expectedStatus,\r\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\r\n                reducedRedundancy = spec.reducedRedundancy,\r\n                region = spec.region,\r\n                serverSideEncryption = spec.serverSideEncryption,\r\n                signatureVersion = spec.signatureVersion,\r\n                now = new Date(),\r\n                log = spec.log,\r\n                policyJson;\r\n\r\n            spec.date = now;\r\n            policyJson = qq.s3.util.getPolicy(spec);\r\n\r\n            awsParams.key = key;\r\n\r\n            if (type) {\r\n                awsParams[\"Content-Type\"] = type;\r\n            }\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            if (expectedStatus) {\r\n                awsParams.success_action_status = expectedStatus;\r\n            }\r\n\r\n            if (successRedirectUrl) {\r\n                awsParams.success_action_redirect = successRedirectUrl;\r\n            }\r\n            // jscs:enable\r\n            if (reducedRedundancy) {\r\n                awsParams[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\r\n            }\r\n\r\n            if (serverSideEncryption) {\r\n                awsParams[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\r\n            }\r\n\r\n            if (sessionToken) {\r\n                awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\r\n            }\r\n\r\n            awsParams.acl = acl;\r\n\r\n            // Custom (user-supplied) params must be prefixed with the value of `qq.s3.util.AWS_PARAM_PREFIX`.\r\n            // Params such as Cache-Control or Content-Disposition will not be prefixed.\r\n            // Prefixed param values will be URI encoded as well.\r\n            qq.each(customParams, function(name, val) {\r\n                var awsParamName = qq.s3.util._getPrefixedParamName(name);\r\n\r\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\r\n                    awsParams[awsParamName] = val;\r\n                }\r\n                else {\r\n                    awsParams[awsParamName] = encodeURIComponent(val);\r\n                }\r\n            });\r\n\r\n            if (signatureVersion === 2) {\r\n                awsParams.AWSAccessKeyId = accessKey;\r\n            }\r\n            else if (signatureVersion === 4) {\r\n                awsParams[qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\r\n                awsParams[qq.s3.util.CREDENTIAL_PARAM_NAME] = qq.s3.util.getV4CredentialsString({date: now, key: accessKey, region: region});\r\n                awsParams[qq.s3.util.DATE_PARAM_NAME] = qq.s3.util.getV4PolicyDate(now, drift);\r\n            }\r\n\r\n            // Invoke a promissory callback that should provide us with a base64-encoded policy doc and an\r\n            // HMAC signature for the policy doc.\r\n            signPolicyCallback(policyJson).then(\r\n                function(policyAndSignature, updatedAccessKey, updatedSessionToken) {\r\n                    awsParams.policy = policyAndSignature.policy;\r\n\r\n                    if (spec.signatureVersion === 2) {\r\n                        awsParams.signature = policyAndSignature.signature;\r\n\r\n                        if (updatedAccessKey) {\r\n                            awsParams.AWSAccessKeyId = updatedAccessKey;\r\n                        }\r\n                    }\r\n                    else if (spec.signatureVersion === 4) {\r\n                        awsParams[qq.s3.util.V4_SIGNATURE_PARAM_NAME] = policyAndSignature.signature;\r\n                    }\r\n\r\n                    if (updatedSessionToken) {\r\n                        awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\r\n                    }\r\n\r\n                    promise.success(awsParams);\r\n                },\r\n                function(errorMessage) {\r\n                    errorMessage = errorMessage || \"Can't continue further with request to S3 as we did not receive \" +\r\n                                                   \"a valid signature and policy from the server.\";\r\n\r\n                    log(\"Policy signing failed.  \" + errorMessage, \"error\");\r\n                    promise.failure(errorMessage);\r\n                }\r\n            );\r\n\r\n            return promise;\r\n        },\r\n\r\n        /**\r\n         * Add a condition to an existing S3 upload request policy document used to ensure AWS enforces any size\r\n         * restrictions placed on files server-side.  This is important to do, in case users mess with the client-side\r\n         * checks already in place.\r\n         *\r\n         * @param policy Policy document as an `Object`, with a `conditions` property already attached\r\n         * @param minSize Minimum acceptable size, in bytes\r\n         * @param maxSize Maximum acceptable size, in bytes (0 = unlimited)\r\n         */\r\n        enforceSizeLimits: function(policy, minSize, maxSize) {\r\n            var adjustedMinSize = minSize < 0 ? 0 : minSize,\r\n                // Adjust a maxSize of 0 to the largest possible integer, since we must specify a high and a low in the request\r\n                adjustedMaxSize = maxSize <= 0 ? 9007199254740992 : maxSize;\r\n\r\n            if (minSize > 0 || maxSize > 0) {\r\n                policy.conditions.push([\"content-length-range\", adjustedMinSize.toString(), adjustedMaxSize.toString()]);\r\n            }\r\n        },\r\n\r\n        getPolicyExpirationDate: function(date, drift) {\r\n            var adjustedDate = new Date(date.getTime() + drift);\r\n            return qq.s3.util.getPolicyDate(adjustedDate, 5);\r\n        },\r\n\r\n        getCredentialsDate: function(date) {\r\n            if (!date) {\r\n                date = new Date();\r\n            }\r\n            return date.getUTCFullYear() + \"\" +\r\n                (\"0\" + (date.getUTCMonth() + 1)).slice(-2) +\r\n                (\"0\" + date.getUTCDate()).slice(-2);\r\n        },\r\n\r\n        getPolicyDate: function(date, _minutesToAdd_) {\r\n            var minutesToAdd = _minutesToAdd_ || 0,\r\n                pad, r;\r\n\r\n            /*jshint -W014 */\r\n            // Is this going to be a problem if we encounter this moments before 2 AM just before daylight savings time ends?\r\n            date.setMinutes(date.getMinutes() + (minutesToAdd || 0));\r\n\r\n            if (Date.prototype.toISOString) {\r\n                return date.toISOString();\r\n            }\r\n            else {\r\n                pad = function(number) {\r\n                    r = String(number);\r\n\r\n                    if (r.length === 1) {\r\n                        r = \"0\" + r;\r\n                    }\r\n\r\n                    return r;\r\n                };\r\n\r\n                return date.getUTCFullYear()\r\n                    + \"-\" + pad(date.getUTCMonth() + 1)\r\n                    + \"-\" + pad(date.getUTCDate())\r\n                    + \"T\" + pad(date.getUTCHours())\r\n                    + \":\" + pad(date.getUTCMinutes())\r\n                    + \":\" + pad(date.getUTCSeconds())\r\n                    + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\r\n                    + \"Z\";\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Looks at a response from S3 contained in an iframe and parses the query string in an attempt to identify\r\n         * the associated resource.\r\n         *\r\n         * @param iframe Iframe containing response\r\n         * @returns {{bucket: *, key: *, etag: *}}\r\n         */\r\n        parseIframeResponse: function(iframe) {\r\n            var doc = iframe.contentDocument || iframe.contentWindow.document,\r\n                queryString = doc.location.search,\r\n                match = /bucket=(.+)&key=(.+)&etag=(.+)/.exec(queryString);\r\n\r\n            if (match) {\r\n                return {\r\n                    bucket: match[1],\r\n                    key: match[2],\r\n                    etag: match[3].replace(/%22/g, \"\")\r\n                };\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param successRedirectUrl Relative or absolute location of success redirect page\r\n         * @returns {*|string} undefined if the parameter is undefined, otherwise the absolute location of the success redirect page\r\n         */\r\n        getSuccessRedirectAbsoluteUrl: function(successRedirectUrl) {\r\n            if (successRedirectUrl) {\r\n                var targetAnchorContainer = document.createElement(\"div\"),\r\n                    targetAnchor;\r\n\r\n                if (qq.ie7()) {\r\n                    // Note that we must make use of `innerHTML` for IE7 only instead of simply creating an anchor via\r\n                    // `document.createElement('a')` and setting the `href` attribute.  The latter approach does not allow us to\r\n                    // obtain an absolute URL in IE7 if the `endpoint` is a relative URL.\r\n                    targetAnchorContainer.innerHTML = \"<a href='\" + successRedirectUrl + \"'></a>\";\r\n                    targetAnchor = targetAnchorContainer.firstChild;\r\n                    return targetAnchor.href;\r\n                }\r\n                else {\r\n                    // IE8 and IE9 do not seem to derive an absolute URL from a relative URL using the `innerHTML`\r\n                    // approach above, so we'll just create an anchor this way and set it's `href` attribute.\r\n                    // Due to yet another quirk in IE8 and IE9, we have to set the `href` equal to itself\r\n                    // in order to ensure relative URLs will be properly parsed.\r\n                    targetAnchor = document.createElement(\"a\");\r\n                    targetAnchor.href = successRedirectUrl;\r\n                    targetAnchor.href = targetAnchor.href;\r\n                    return targetAnchor.href;\r\n                }\r\n            }\r\n        },\r\n\r\n        getV4CredentialsString: function(spec) {\r\n            return spec.key + \"/\" +\r\n                qq.s3.util.getCredentialsDate(spec.date) + \"/\" +\r\n                spec.region + \"/s3/aws4_request\";\r\n        },\r\n\r\n        getV4PolicyDate: function(date, drift) {\r\n            var adjustedDate = new Date(date.getTime() + drift);\r\n\r\n            return qq.s3.util.getCredentialsDate(adjustedDate) + \"T\" +\r\n                    (\"0\" + adjustedDate.getUTCHours()).slice(-2) +\r\n                    (\"0\" + adjustedDate.getUTCMinutes()).slice(-2) +\r\n                    (\"0\" + adjustedDate.getUTCSeconds()).slice(-2) +\r\n                    \"Z\";\r\n        },\r\n\r\n        // AWS employs a strict interpretation of [RFC 3986](http://tools.ietf.org/html/rfc3986#page-12).\r\n        // So, we must ensure all reserved characters listed in the spec are percent-encoded,\r\n        // and spaces are replaced with \"+\".\r\n        encodeQueryStringParam: function(param) {\r\n            var percentEncoded = encodeURIComponent(param);\r\n\r\n            // %-encode characters not handled by `encodeURIComponent` (to follow RFC 3986)\r\n            percentEncoded = percentEncoded.replace(/[!'()]/g, escape);\r\n\r\n            // %-encode characters not handled by `escape` (to follow RFC 3986)\r\n            percentEncoded = percentEncoded.replace(/\\*/g, \"%2A\");\r\n\r\n            // replace percent-encoded spaces with a \"+\"\r\n            return percentEncoded.replace(/%20/g, \"+\");\r\n        },\r\n        /**\r\n         * Escapes url part as for AWS requirements\r\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\r\n         */\r\n        uriEscape: function(string) {\r\n            var output = encodeURIComponent(string);\r\n            output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);\r\n            output = output.replace(/[*]/g, function(ch) {\r\n                return \"%\" + ch.charCodeAt(0).toString(16).toUpperCase();\r\n            });\r\n            return output;\r\n        },\r\n        /**\r\n         * Escapes a path as for AWS requirement\r\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\r\n         */\r\n        uriEscapePath: function(path) {\r\n            var parts = [];\r\n            qq.each(path.split(\"/\"), function(idx, item) {\r\n                parts.push(qq.s3.util.uriEscape(item));\r\n            });\r\n            return parts.join(\"/\");\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to S3.\n * Some inherited options and API methods have a special meaning in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploaderBasic = function(o) {\n        var options = {\n            request: {\n                // public key (required for server-side signing, ignored if `credentials` have been provided)\n                accessKey: null,\n\n                // padding, in milliseconds, to add to the x-amz-date header & the policy expiration date\n                clockDrift: 0\n            },\n\n            objectProperties: {\n                acl: \"private\",\n\n                // string or a function which may be promissory\n                bucket: qq.bind(function(id) {\n                    return qq.s3.util.getBucket(this.getEndpoint(id));\n                }, this),\n\n                // string or a function which may be promissory - only used for V4 multipart uploads\n                host: qq.bind(function(id) {\n                    return (/(?:http|https):\\/\\/(.+)(?:\\/.+)?/).exec(this._endpointStore.get(id))[1];\n                }, this),\n\n                // 'uuid', 'filename', or a function which may be promissory\n                key: \"uuid\",\n\n                reducedRedundancy: false,\n\n                // Defined at http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\n                region: \"us-east-1\",\n\n                serverSideEncryption: false\n            },\n\n            credentials: {\n                // Public key (required).\n                accessKey: null,\n                // Private key (required).\n                secretKey: null,\n                // Expiration date for the credentials (required).  May be an ISO string or a `Date`.\n                expiration: null,\n                // Temporary credentials session token.\n                // Only required for temporary credentials obtained via AssumeRoleWithWebIdentity.\n                sessionToken: null\n            },\n\n            // All but `version` are ignored if `credentials` is provided.\n            signature: {\n                customHeaders: {},\n                endpoint: null,\n                version: 2\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            // required if non-File-API browsers, such as IE9 and older, are used\n            iframeSupport: {\n                localBlankPagePath: null\n            },\n\n            chunking: {\n                // minimum part size is 5 MiB when uploading to S3\n                partSize: 5242880\n            },\n\n            cors: {\n                allowXdr: true\n            },\n\n            callbacks: {\n                onCredentialsExpired: function() {}\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        if (!this.setCredentials(options.credentials, true)) {\n            this._currentCredentials.accessKey = options.request.accessKey;\n        }\n\n        this._aclStore = this._createStore(options.objectProperties.acl);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds S3 keys for file representations constructed from a session request.\n        this._cannedKeys = {};\n        // Holds S3 buckets for file representations constructed from a session request.\n        this._cannedBuckets = {};\n\n        this._buckets = {};\n        this._hosts = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, {\n        getBucket: function(id) {\n            if (this._cannedBuckets[id] == null) {\n                return this._buckets[id];\n            }\n            return this._cannedBuckets[id];\n        },\n\n        /**\n         * @param id File ID\n         * @returns {*} Key name associated w/ the file, if one exists\n         */\n        getKey: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedKeys[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n\n            return this._cannedKeys[id];\n        },\n\n        /**\n         * Override the parent's reset function to cleanup various S3-related items.\n         */\n        reset: function() {\n            qq.FineUploaderBasic.prototype.reset.call(this);\n            this._failedSuccessRequestCallbacks = [];\n            this._buckets = {};\n            this._hosts = {};\n        },\n\n        setCredentials: function(credentials, ignoreEmpty) {\n            if (credentials && credentials.secretKey) {\n                if (!credentials.accessKey) {\n                    throw new qq.Error(\"Invalid credentials: no accessKey\");\n                }\n                else if (!credentials.expiration) {\n                    throw new qq.Error(\"Invalid credentials: no expiration\");\n                }\n                else {\n                    this._currentCredentials = qq.extend({}, credentials);\n\n                    // Ensure expiration is a `Date`.  If initially a string, assuming it is in ISO format.\n                    if (qq.isString(credentials.expiration)) {\n                        this._currentCredentials.expiration = new Date(credentials.expiration);\n                    }\n                }\n\n                return true;\n            }\n            else if (!ignoreEmpty) {\n                throw new qq.Error(\"Invalid credentials parameter!\");\n            }\n            else {\n                this._currentCredentials = {};\n            }\n        },\n\n        setAcl: function(acl, id) {\n            this._aclStore.set(acl, id);\n        },\n\n        /**\n         * Ensures the parent's upload handler creator passes any additional S3-specific options to the handler as well\n         * as information required to instantiate the specific handler based on the current browser's capabilities.\n         *\n         * @returns {qq.UploadHandlerController}\n         * @private\n         */\n        _createUploadHandler: function() {\n            var self = this,\n                additionalOptions = {\n                    aclStore: this._aclStore,\n                    getBucket: qq.bind(this._determineBucket, this),\n                    getHost: qq.bind(this._determineHost, this),\n                    getKeyName: qq.bind(this._determineKeyName, this),\n                    iframeSupport: this._options.iframeSupport,\n                    objectProperties: this._options.objectProperties,\n                    signature: this._options.signature,\n                    clockDrift: this._options.request.clockDrift,\n                    // pass size limit validation values to include in the request so AWS enforces this server-side\n                    validation: {\n                        minSizeLimit: this._options.validation.minSizeLimit,\n                        maxSizeLimit: this._options.validation.sizeLimit\n                    }\n                };\n\n            // We assume HTTP if it is missing from the start of the endpoint string.\n            qq.override(this._endpointStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var endpoint = super_.get(id);\n\n                        if (endpoint.indexOf(\"http\") < 0) {\n                            return \"http://\" + endpoint;\n                        }\n\n                        return endpoint;\n                    }\n                };\n            });\n\n            // Some param names should be lower case to avoid signature mismatches\n            qq.override(this._paramsStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var oldParams = super_.get(id),\n                            modifiedParams = {};\n\n                        qq.each(oldParams, function(name, val) {\n                            var paramName = name;\n\n                            if (qq.indexOf(qq.s3.util.CASE_SENSITIVE_PARAM_NAMES, paramName) < 0) {\n                                paramName = paramName.toLowerCase();\n                            }\n\n                            modifiedParams[paramName] = qq.isFunction(val) ? val() : val;\n                        });\n\n                        return modifiedParams;\n                    }\n                };\n            });\n\n            additionalOptions.signature.credentialsProvider = {\n                get: function() {\n                    return self._currentCredentials;\n                },\n\n                onExpired: function() {\n                    var updateCredentials = new qq.Promise(),\n                        callbackRetVal = self._options.callbacks.onCredentialsExpired();\n\n                    if (qq.isGenericPromise(callbackRetVal)) {\n                        callbackRetVal.then(function(credentials) {\n                            try {\n                                self.setCredentials(credentials);\n                                updateCredentials.success();\n                            }\n                            catch (error) {\n                                self.log(\"Invalid credentials returned from onCredentialsExpired callback! (\" + error.message + \")\", \"error\");\n                                updateCredentials.failure(\"onCredentialsExpired did not return valid credentials.\");\n                            }\n                        }, function(errorMsg) {\n                            self.log(\"onCredentialsExpired callback indicated failure! (\" + errorMsg + \")\", \"error\");\n                            updateCredentials.failure(\"onCredentialsExpired callback failed.\");\n                        });\n                    }\n                    else {\n                        self.log(\"onCredentialsExpired callback did not return a promise!\", \"error\");\n                        updateCredentials.failure(\"Unexpected return value for onCredentialsExpired.\");\n                    }\n\n                    return updateCredentials;\n                }\n            };\n\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this, additionalOptions, \"s3\");\n        },\n\n        _determineObjectPropertyValue: function(id, property) {\n            var maybe = this._options.objectProperties[property],\n                promise = new qq.Promise(),\n                self = this;\n\n            if (qq.isFunction(maybe)) {\n                maybe = maybe(id);\n                if (qq.isGenericPromise(maybe)) {\n                    promise = maybe;\n                }\n                else {\n                    promise.success(maybe);\n                }\n            }\n            else if (qq.isString(maybe)) {\n                promise.success(maybe);\n            }\n\n            promise.then(\n                function success(value) {\n                    self[\"_\" + property + \"s\"][id] = value;\n                },\n\n                function failure(errorMsg) {\n                    qq.log(\"Problem determining \" + property + \" for ID \" + id + \" (\" + errorMsg + \")\", \"error\");\n                }\n            );\n\n            return promise;\n        },\n\n        _determineBucket: function(id) {\n            return this._determineObjectPropertyValue(id, \"bucket\");\n        },\n\n        _determineHost: function(id) {\n            return this._determineObjectPropertyValue(id, \"host\");\n        },\n\n        /**\n         * Determine the file's key name and passes it to the caller via a promissory callback.  This also may\n         * delegate to an integrator-defined function that determines the file's key name on demand,\n         * which also may be promissory.\n         *\n         * @param id ID of the file\n         * @param filename Name of the file\n         * @returns {qq.Promise} A promise that will be fulfilled when the key name has been determined (and will be passed to the caller via the success callback).\n         * @private\n         */\n        _determineKeyName: function(id, filename) {\n            /*jshint -W015*/\n            var promise = new qq.Promise(),\n                keynameLogic = this._options.objectProperties.key,\n                extension = qq.getExtension(filename),\n                onGetKeynameFailure = promise.failure,\n                onGetKeynameSuccess = function(keyname, extension) {\n                    var keynameToUse = keyname;\n\n                    if (extension !== undefined) {\n                        keynameToUse += \".\" + extension;\n                    }\n\n                    promise.success(keynameToUse);\n                };\n\n            switch (keynameLogic) {\n                case \"uuid\":\n                    onGetKeynameSuccess(this.getUuid(id), extension);\n                    break;\n                case \"filename\":\n                    onGetKeynameSuccess(filename);\n                    break;\n                default:\n                    if (qq.isFunction(keynameLogic)) {\n                        this._handleKeynameFunction(keynameLogic, id, onGetKeynameSuccess, onGetKeynameFailure);\n                    }\n                    else {\n                        this.log(keynameLogic + \" is not a valid value for the s3.keyname option!\", \"error\");\n                        onGetKeynameFailure();\n                    }\n            }\n\n            return promise;\n        },\n\n        /**\n         * Called by the internal onUpload handler if the integrator has supplied a function to determine\n         * the file's key name.  The integrator's function may be promissory.  We also need to fulfill\n         * the promise contract associated with the caller as well.\n         *\n         * @param keynameFunc Integrator-supplied function that must be executed to determine the key name.  May be promissory.\n         * @param id ID of the associated file\n         * @param successCallback Invoke this if key name retrieval is successful, passing in the key name.\n         * @param failureCallback Invoke this if key name retrieval was unsuccessful.\n         * @private\n         */\n        _handleKeynameFunction: function(keynameFunc, id, successCallback, failureCallback) {\n            var self = this,\n                onSuccess = function(keyname) {\n                    successCallback(keyname);\n                },\n                onFailure = function(reason) {\n                    self.log(qq.format(\"Failed to retrieve key name for {}.  Reason: {}\", id, reason || \"null\"), \"error\");\n                    failureCallback(reason);\n                },\n                keyname = keynameFunc.call(this, id);\n\n            if (qq.isGenericPromise(keyname)) {\n                keyname.then(onSuccess, onFailure);\n            }\n            /*jshint -W116*/\n            else if (keyname == null) {\n                onFailure();\n            }\n            else {\n                onSuccess(keyname);\n            }\n        },\n\n        _getEndpointSpecificParams: function(id, response, maybeXhr) {\n            var params = {\n                key: this.getKey(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                bucket: this.getBucket(id)\n            };\n\n            if (maybeXhr && maybeXhr.getResponseHeader(\"ETag\")) {\n                params.etag = maybeXhr.getResponseHeader(\"ETag\");\n            }\n            else if (response.etag) {\n                params.etag = response.etag;\n            }\n\n            return params;\n        },\n\n        // Hooks into the base internal `_onSubmitDelete` to add key and bucket params to the delete file request.\n        _onSubmitDelete: function(id, onSuccessCallback) {\n            var additionalMandatedParams = {\n                key: this.getKey(id),\n                bucket: this.getBucket(id)\n            };\n\n            return qq.FineUploaderBasic.prototype._onSubmitDelete.call(this, id, onSuccessCallback, additionalMandatedParams);\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.s3Key == null) {\n                throw new qq.Error(\"Did not find s3Key property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedKeys[id] = sessionData.s3Key;\n                this._cannedBuckets[id] = sessionData.s3Bucket;\n            }\n\n            return id;\n        }\n    });\n}());\n","/* globals qq, CryptoJS */\r\n\r\n// IE 10 does not support Uint8ClampedArray. We don't need it, but CryptoJS attempts to reference it\r\n// inside a conditional via an instanceof check, which breaks S3 v4 signatures for chunked uploads.\r\nif (!window.Uint8ClampedArray) {\r\n    window.Uint8ClampedArray = function() {};\r\n}\r\n/**\r\n * Handles signature determination for HTML Form Upload requests and Multipart Uploader requests (via the S3 REST API).\r\n *\r\n * If the S3 requests are to be signed server side, this module will send a POST request to the server in an attempt\r\n * to solicit signatures for various S3-related requests.  This module also parses the response and attempts\r\n * to determine if the effort was successful.\r\n *\r\n * If the S3 requests are to be signed client-side, without the help of a server, this module will utilize CryptoJS to\r\n * sign the requests directly in the browser and send them off to S3.\r\n *\r\n * @param o Options associated with all such requests\r\n * @returns {{getSignature: Function}} API method used to initiate the signature request.\r\n * @constructor\r\n */\r\nqq.s3.RequestSigner = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        thisSignatureRequester = this,\r\n        pendingSignatures = {},\r\n        options = {\r\n            expectingPolicy: false,\r\n            method: \"POST\",\r\n            signatureSpec: {\r\n                drift: 0,\r\n                credentialsProvider: {},\r\n                endpoint: null,\r\n                customHeaders: {},\r\n                version: 2,\r\n                useWorker: false\r\n            },\r\n            maxConnections: 3,\r\n            endpointStore: {},\r\n            paramsStore: {},\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            log: function(str, level) {}\r\n        },\r\n        credentialsProvider,\r\n\r\n        generateHeaders = function(signatureConstructor, signature, promise) {\r\n            var headers = signatureConstructor.getHeaders();\r\n\r\n            if (options.signatureSpec.version === 4) {\r\n                headers.Authorization = qq.s3.util.V4_ALGORITHM_PARAM_VALUE +\r\n                    \" Credential=\" + options.signatureSpec.credentialsProvider.get().accessKey + \"/\" +\r\n                    qq.s3.util.getCredentialsDate(signatureConstructor.getRequestDate()) + \"/\" +\r\n                    options.signatureSpec.region + \"/\" +\r\n                    \"s3/aws4_request,\" +\r\n                    \"SignedHeaders=\" + signatureConstructor.getSignedHeaders() + \",\" +\r\n                    \"Signature=\" + signature;\r\n            }\r\n            else {\r\n                headers.Authorization = \"AWS \" + options.signatureSpec.credentialsProvider.get().accessKey + \":\" + signature;\r\n            }\r\n\r\n            promise.success(headers, signatureConstructor.getEndOfUrl());\r\n        },\r\n\r\n        v2 = {\r\n            getStringToSign: function(signatureSpec) {\r\n                return qq.format(\"{}\\n{}\\n{}\\n\\n{}/{}/{}\",\r\n                    signatureSpec.method,\r\n                    signatureSpec.contentMd5 || \"\",\r\n                    signatureSpec.contentType || \"\",\r\n                    signatureSpec.headersStr || \"\\n\",\r\n                    signatureSpec.bucket,\r\n                    signatureSpec.endOfUrl);\r\n            },\r\n\r\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\r\n                var headersWordArray = qq.CryptoJS.enc.Utf8.parse(headersStr),\r\n                    headersHmacSha1 = qq.CryptoJS.HmacSHA1(headersWordArray, credentialsProvider.get().secretKey),\r\n                    headersHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(headersHmacSha1);\r\n\r\n                generateHeaders(signatureConstructor, headersHmacSha1Base64, signatureEffort);\r\n            },\r\n\r\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n                var policyStr = JSON.stringify(policy),\r\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\r\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\r\n                    policyHmacSha1 = qq.CryptoJS.HmacSHA1(base64Policy, credentialsProvider.get().secretKey),\r\n                    policyHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(policyHmacSha1);\r\n\r\n                signatureEffort.success({\r\n                    policy: base64Policy,\r\n                    signature: policyHmacSha1Base64\r\n                }, updatedAccessKey, updatedSessionToken);\r\n            }\r\n        },\r\n\r\n        v4 = {\r\n            getCanonicalQueryString: function(endOfUri) {\r\n                var queryParamIdx = endOfUri.indexOf(\"?\"),\r\n                    canonicalQueryString = \"\",\r\n                    encodedQueryParams, encodedQueryParamNames, queryStrings;\r\n\r\n                if (queryParamIdx >= 0) {\r\n                    encodedQueryParams = {};\r\n                    queryStrings = endOfUri.substr(queryParamIdx + 1).split(\"&\");\r\n\r\n                    qq.each(queryStrings, function(idx, queryString) {\r\n                        var nameAndVal = queryString.split(\"=\"),\r\n                            paramVal = nameAndVal[1];\r\n\r\n                        if (paramVal == null) {\r\n                            paramVal = \"\";\r\n                        }\r\n\r\n                        encodedQueryParams[encodeURIComponent(nameAndVal[0])] = encodeURIComponent(paramVal);\r\n                    });\r\n\r\n                    encodedQueryParamNames = Object.keys(encodedQueryParams).sort();\r\n                    encodedQueryParamNames.forEach(function(encodedQueryParamName, idx) {\r\n                        canonicalQueryString += encodedQueryParamName + \"=\" + encodedQueryParams[encodedQueryParamName];\r\n                        if (idx < encodedQueryParamNames.length - 1) {\r\n                            canonicalQueryString += \"&\";\r\n                        }\r\n                    });\r\n                }\r\n\r\n                return canonicalQueryString;\r\n            },\r\n\r\n            getCanonicalRequest: function(signatureSpec) {\r\n                return qq.format(\"{}\\n{}\\n{}\\n{}\\n{}\\n{}\",\r\n                    signatureSpec.method,\r\n                    v4.getCanonicalUri(signatureSpec.endOfUrl),\r\n                    v4.getCanonicalQueryString(signatureSpec.endOfUrl),\r\n                    signatureSpec.headersStr || \"\\n\",\r\n                    v4.getSignedHeaders(signatureSpec.headerNames),\r\n                    signatureSpec.hashedContent);\r\n            },\r\n\r\n            getCanonicalUri: function(endOfUri) {\r\n                var path = endOfUri,\r\n                    queryParamIdx = endOfUri.indexOf(\"?\");\r\n\r\n                if (queryParamIdx > 0) {\r\n                    path = endOfUri.substr(0, queryParamIdx);\r\n                }\r\n                return \"/\" + path;\r\n            },\r\n\r\n            getEncodedHashedPayload: function(body) {\r\n                var promise = new qq.Promise(),\r\n                    reader,\r\n                    self = this;\r\n\r\n                if (qq.isBlob(body)) {\r\n                    // Only if a worker is requested will we load it.\r\n                    // We will fallback to the inline reader if the worker\r\n                    // fails to load.\r\n                    if (options.signatureSpec.useWorker) {\r\n                        if (!this._worker) {\r\n                            try {\r\n                                // allow the worker path to be overwritten.. Eg. we aren't using an inline worker.\r\n                                var workerUrl = options.signatureSpec.useWorker;\r\n                                if (workerUrl === true) {\r\n                                    if (!qq.s3.worker) {\r\n                                        throw new Error(\"Missing inline s3 worker.\");\r\n                                    }\r\n                                    workerUrl = qq.s3.worker();\r\n                                }\r\n                                this._worker = new Worker(workerUrl);\r\n                                this._workerPromises = {};\r\n                                this._worker.onmessage = function (e) {\r\n                                    if (!self._workerPromises[e.data.id]) {\r\n                                        options.log(\"Worker returned a result for an request we dont know about.\");\r\n                                        return;\r\n                                    }\r\n                                    if (e.data.err) {\r\n                                        self._workerPromises[e.data.id].failure(e.data.err);\r\n                                    } else {\r\n                                        self._workerPromises[e.data.id].success(e.data.resp);\r\n                                    }\r\n                                    delete self._workerPromises[e.data.id];\r\n                                };\r\n                            } catch (ex) {\r\n                                // worker is not supported or invalid\r\n                                options.log(\"Worker failed to be created. Defaulting back to main thread processing.\", ex);\r\n                                options.signatureSpec.useWorker = false;\r\n                            }\r\n                        }\r\n                        if (this._worker) {\r\n                            var task = {file: body, id: qq.getUniqueId()};\r\n                            this._workerPromises[task.id] = promise;\r\n                            this._worker.postMessage(task);\r\n                            return promise;\r\n                        }\r\n                    }\r\n                    reader = new FileReader();\r\n                    reader.onloadend = function(e) {\r\n                        if (e.target.readyState === FileReader.DONE) {\r\n                            if (e.target.error) {\r\n                                promise.failure(e.target.error);\r\n                            }\r\n                            else {\r\n                                var wordArray = qq.CryptoJS.lib.WordArray.create(e.target.result);\r\n                                promise.success(qq.CryptoJS.SHA256(wordArray).toString());\r\n                            }\r\n                        }\r\n                    };\r\n                    reader.readAsArrayBuffer(body);\r\n                }\r\n                else {\r\n                    body = body || \"\";\r\n                    promise.success(qq.CryptoJS.SHA256(body).toString());\r\n                }\r\n\r\n                return promise;\r\n            },\r\n\r\n            getScope: function(date, region) {\r\n                return qq.s3.util.getCredentialsDate(date) + \"/\" +\r\n                    region + \"/s3/aws4_request\";\r\n            },\r\n\r\n            getStringToSign: function(signatureSpec) {\r\n                var canonicalRequest = v4.getCanonicalRequest(signatureSpec),\r\n                    date = qq.s3.util.getV4PolicyDate(signatureSpec.date, signatureSpec.drift),\r\n                    hashedRequest = qq.CryptoJS.SHA256(canonicalRequest).toString(),\r\n                    scope = v4.getScope(signatureSpec.date, options.signatureSpec.region),\r\n                    stringToSignTemplate = \"AWS4-HMAC-SHA256\\n{}\\n{}\\n{}\";\r\n\r\n                return {\r\n                    hashed: qq.format(stringToSignTemplate, date, scope, hashedRequest),\r\n                    raw: qq.format(stringToSignTemplate, date, scope, canonicalRequest)\r\n                };\r\n            },\r\n\r\n            getSignedHeaders: function(headerNames) {\r\n                var signedHeaders = \"\";\r\n\r\n                headerNames.forEach(function(headerName, idx) {\r\n                    signedHeaders += headerName.toLowerCase();\r\n\r\n                    if (idx < headerNames.length - 1) {\r\n                        signedHeaders += \";\";\r\n                    }\r\n                });\r\n\r\n                return signedHeaders;\r\n            },\r\n\r\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\r\n                var secretKey = credentialsProvider.get().secretKey,\r\n                    headersPattern = /.+\\n.+\\n(\\d+)\\/(.+)\\/s3\\/.+\\n(.+)/,\r\n                    matches = headersPattern.exec(headersStr),\r\n                    dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\r\n\r\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\r\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\r\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\r\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\r\n\r\n                generateHeaders(signatureConstructor, qq.CryptoJS.HmacSHA256(headersStr, signingKey), signatureEffort);\r\n            },\r\n\r\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n                var policyStr = JSON.stringify(policy),\r\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\r\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\r\n                    secretKey = credentialsProvider.get().secretKey,\r\n                    credentialPattern = /.+\\/(.+)\\/(.+)\\/s3\\/aws4_request/,\r\n                    credentialCondition = (function() {\r\n                        var credential = null;\r\n                        qq.each(policy.conditions, function(key, condition) {\r\n                            var val = condition[\"x-amz-credential\"];\r\n                            if (val) {\r\n                                credential = val;\r\n                                return false;\r\n                            }\r\n                        });\r\n                        return credential;\r\n                    }()),\r\n                    matches, dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\r\n\r\n                matches = credentialPattern.exec(credentialCondition);\r\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\r\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\r\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\r\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\r\n\r\n                signatureEffort.success({\r\n                    policy: base64Policy,\r\n                    signature: qq.CryptoJS.HmacSHA256(base64Policy, signingKey).toString()\r\n                }, updatedAccessKey, updatedSessionToken);\r\n            }\r\n        };\r\n\r\n    qq.extend(options, o, true);\r\n    credentialsProvider = options.signatureSpec.credentialsProvider;\r\n\r\n    function handleSignatureReceived(id, xhrOrXdr, isError) {\r\n        var responseJson = xhrOrXdr.responseText,\r\n            pendingSignatureData = pendingSignatures[id],\r\n            promise = pendingSignatureData.promise,\r\n            signatureConstructor = pendingSignatureData.signatureConstructor,\r\n            errorMessage, response;\r\n\r\n        delete pendingSignatures[id];\r\n\r\n        // Attempt to parse what we would expect to be a JSON response\r\n        if (responseJson) {\r\n            try {\r\n                response = qq.parseJson(responseJson);\r\n            }\r\n            catch (error) {\r\n                options.log(\"Error attempting to parse signature response: \" + error, \"error\");\r\n            }\r\n        }\r\n\r\n        // If we have received a parsable response, and it has an `invalid` property,\r\n        // the policy document or request headers may have been tampered with client-side.\r\n        if (response && response.invalid) {\r\n            isError = true;\r\n            errorMessage = \"Invalid policy document or request headers!\";\r\n        }\r\n        // Make sure the response contains policy & signature properties\r\n        else if (response) {\r\n            if (options.expectingPolicy && !response.policy) {\r\n                isError = true;\r\n                errorMessage = \"Response does not include the base64 encoded policy!\";\r\n            }\r\n            else if (!response.signature) {\r\n                isError = true;\r\n                errorMessage = \"Response does not include the signature!\";\r\n            }\r\n        }\r\n        // Something unknown went wrong\r\n        else {\r\n            isError = true;\r\n            errorMessage = \"Received an empty or invalid response from the server!\";\r\n        }\r\n\r\n        if (isError) {\r\n            if (errorMessage) {\r\n                options.log(errorMessage, \"error\");\r\n            }\r\n\r\n            promise.failure(errorMessage);\r\n        }\r\n        else if (signatureConstructor) {\r\n            generateHeaders(signatureConstructor, response.signature, promise);\r\n        }\r\n        else {\r\n            promise.success(response);\r\n        }\r\n    }\r\n\r\n    function getStringToSignArtifacts(id, version, requestInfo) {\r\n        var promise = new qq.Promise(),\r\n            method = \"POST\",\r\n            headerNames = [],\r\n            headersStr = \"\",\r\n            now = new Date(),\r\n            endOfUrl, signatureSpec, toSign,\r\n\r\n            generateStringToSign = function(requestInfo) {\r\n                var contentMd5,\r\n                    headerIndexesToRemove = [];\r\n\r\n                qq.each(requestInfo.headers, function(name) {\r\n                    headerNames.push(name);\r\n                });\r\n                headerNames.sort();\r\n\r\n                qq.each(headerNames, function(idx, headerName) {\r\n                    if (qq.indexOf(qq.s3.util.UNSIGNABLE_REST_HEADER_NAMES, headerName) < 0) {\r\n                        headersStr += headerName.toLowerCase() + \":\" + requestInfo.headers[headerName].trim() + \"\\n\";\r\n                    }\r\n                    else if (headerName === \"Content-MD5\") {\r\n                        contentMd5 = requestInfo.headers[headerName];\r\n                    }\r\n                    else {\r\n                        headerIndexesToRemove.unshift(idx);\r\n                    }\r\n                });\r\n\r\n                qq.each(headerIndexesToRemove, function(idx, headerIdx) {\r\n                    headerNames.splice(headerIdx, 1);\r\n                });\r\n\r\n                signatureSpec = {\r\n                    bucket: requestInfo.bucket,\r\n                    contentMd5: contentMd5,\r\n                    contentType: requestInfo.contentType,\r\n                    date: now,\r\n                    drift: options.signatureSpec.drift,\r\n                    endOfUrl: endOfUrl,\r\n                    hashedContent: requestInfo.hashedContent,\r\n                    headerNames: headerNames,\r\n                    headersStr: headersStr,\r\n                    method: method\r\n                };\r\n\r\n                toSign = version === 2 ? v2.getStringToSign(signatureSpec) : v4.getStringToSign(signatureSpec);\r\n\r\n                return {\r\n                    date: now,\r\n                    endOfUrl: endOfUrl,\r\n                    signedHeaders: version === 4 ? v4.getSignedHeaders(signatureSpec.headerNames) : null,\r\n                    toSign: version === 4 ? toSign.hashed : toSign,\r\n                    toSignRaw: version === 4 ? toSign.raw : toSign\r\n                };\r\n            };\r\n\r\n        /*jshint indent:false */\r\n        switch (requestInfo.type) {\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_ABORT:\r\n                method = \"DELETE\";\r\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\r\n                break;\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_INITIATE:\r\n                endOfUrl = \"uploads\";\r\n                break;\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_COMPLETE:\r\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\r\n                break;\r\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_UPLOAD:\r\n                method = \"PUT\";\r\n                endOfUrl = qq.format(\"partNumber={}&uploadId={}\", requestInfo.partNum, requestInfo.uploadId);\r\n                break;\r\n        }\r\n\r\n        endOfUrl = requestInfo.key + \"?\" + endOfUrl;\r\n\r\n        if (version === 4) {\r\n            v4.getEncodedHashedPayload(requestInfo.content).then(function(hashedContent) {\r\n                requestInfo.headers[\"x-amz-content-sha256\"] = hashedContent;\r\n                requestInfo.headers.Host = requestInfo.host;\r\n                requestInfo.headers[\"x-amz-date\"] = qq.s3.util.getV4PolicyDate(now, options.signatureSpec.drift);\r\n                requestInfo.hashedContent = hashedContent;\r\n\r\n                promise.success(generateStringToSign(requestInfo));\r\n            }, function (err) {\r\n                promise.failure(err);\r\n            });\r\n        }\r\n        else {\r\n            promise.success(generateStringToSign(requestInfo));\r\n        }\r\n\r\n        return promise;\r\n    }\r\n\r\n    function determineSignatureClientSide(id, toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n        var updatedHeaders;\r\n\r\n        // REST API request\r\n        if (toBeSigned.signatureConstructor) {\r\n            if (updatedSessionToken) {\r\n                updatedHeaders = toBeSigned.signatureConstructor.getHeaders();\r\n                updatedHeaders[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\r\n                toBeSigned.signatureConstructor.withHeaders(updatedHeaders);\r\n            }\r\n\r\n            toBeSigned.signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\r\n                signApiRequest(toBeSigned.signatureConstructor, signatureArtifacts.stringToSign, signatureEffort);\r\n            }, function (err) {\r\n                signatureEffort.failure(err);\r\n            });\r\n        }\r\n        // Form upload (w/ policy document)\r\n        else {\r\n            updatedSessionToken && qq.s3.util.refreshPolicyCredentials(toBeSigned, updatedSessionToken);\r\n            signPolicy(toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken);\r\n        }\r\n    }\r\n\r\n    function signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\r\n        if (options.signatureSpec.version === 4) {\r\n            v4.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\r\n        }\r\n        else {\r\n            v2.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\r\n        }\r\n    }\r\n\r\n    function signApiRequest(signatureConstructor, headersStr, signatureEffort) {\r\n        if (options.signatureSpec.version === 4) {\r\n            v4.signApiRequest(signatureConstructor, headersStr, signatureEffort);\r\n        }\r\n        else {\r\n            v2.signApiRequest(signatureConstructor, headersStr, signatureEffort);\r\n        }\r\n    }\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        acceptHeader: \"application/json\",\r\n        method: options.method,\r\n        contentType: \"application/json; charset=utf-8\",\r\n        endpointStore: {\r\n            get: function() {\r\n                return options.signatureSpec.endpoint;\r\n            }\r\n        },\r\n        paramsStore: options.paramsStore,\r\n        maxConnections: options.maxConnections,\r\n        customHeaders: options.signatureSpec.customHeaders,\r\n        log: options.log,\r\n        onComplete: handleSignatureReceived,\r\n        cors: options.cors\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * On success, an object containing the parsed JSON response will be passed into the success handler if the\r\n         * request succeeds.  Otherwise an error message will be passed into the failure method.\r\n         *\r\n         * @param id File ID.\r\n         * @param toBeSigned an Object that holds the item(s) to be signed\r\n         * @returns {qq.Promise} A promise that is fulfilled when the response has been received.\r\n         */\r\n        getSignature: function(id, toBeSigned) {\r\n            var params = toBeSigned,\r\n                signatureConstructor = toBeSigned.signatureConstructor,\r\n                signatureEffort = new qq.Promise(),\r\n                queryParams;\r\n\r\n            if (options.signatureSpec.version === 4) {\r\n                queryParams = {v4: true};\r\n            }\r\n\r\n            if (credentialsProvider.get().secretKey && qq.CryptoJS) {\r\n                if (credentialsProvider.get().expiration.getTime() > Date.now()) {\r\n                    determineSignatureClientSide(id, toBeSigned, signatureEffort);\r\n                }\r\n                // If credentials are expired, ask for new ones before attempting to sign request\r\n                else {\r\n                    credentialsProvider.onExpired().then(function() {\r\n                        determineSignatureClientSide(id, toBeSigned,\r\n                            signatureEffort,\r\n                            credentialsProvider.get().accessKey,\r\n                            credentialsProvider.get().sessionToken);\r\n                    }, function(errorMsg) {\r\n                        options.log(\"Attempt to update expired credentials apparently failed! Unable to sign request.  \", \"error\");\r\n                        signatureEffort.failure(\"Unable to sign request - expired credentials.\");\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                options.log(\"Submitting S3 signature request for \" + id);\r\n\r\n                if (signatureConstructor) {\r\n                    signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\r\n                        params = {headers: signatureArtifacts.stringToSignRaw};\r\n                        requester.initTransport(id)\r\n                            .withParams(params)\r\n                            .withQueryParams(queryParams)\r\n                            .send();\r\n                    }, function (err) {\r\n                        options.log(\"Failed to construct signature. \", \"error\");\r\n                        signatureEffort.failure(\"Failed to construct signature.\");\r\n                    });\r\n                }\r\n                else {\r\n                    requester.initTransport(id)\r\n                        .withParams(params)\r\n                        .withQueryParams(queryParams)\r\n                        .send();\r\n                }\r\n\r\n                pendingSignatures[id] = {\r\n                    promise: signatureEffort,\r\n                    signatureConstructor: signatureConstructor\r\n                };\r\n            }\r\n\r\n            return signatureEffort;\r\n        },\r\n\r\n        constructStringToSign: function(type, bucket, host, key) {\r\n            var headers = {},\r\n                uploadId, content, contentType, partNum, artifacts;\r\n\r\n            return {\r\n                withHeaders: function(theHeaders) {\r\n                    headers = theHeaders;\r\n                    return this;\r\n                },\r\n\r\n                withUploadId: function(theUploadId) {\r\n                    uploadId = theUploadId;\r\n                    return this;\r\n                },\r\n\r\n                withContent: function(theContent) {\r\n                    content = theContent;\r\n                    return this;\r\n                },\r\n\r\n                withContentType: function(theContentType) {\r\n                    contentType = theContentType;\r\n                    return this;\r\n                },\r\n\r\n                withPartNum: function(thePartNum) {\r\n                    partNum = thePartNum;\r\n                    return this;\r\n                },\r\n\r\n                getToSign: function(id) {\r\n                    var sessionToken = credentialsProvider.get().sessionToken,\r\n                        promise = new qq.Promise(),\r\n                        adjustedDate = new Date(Date.now() + options.signatureSpec.drift);\r\n\r\n                    headers[\"x-amz-date\"] = adjustedDate.toUTCString();\r\n\r\n                    if (sessionToken) {\r\n                        headers[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\r\n                    }\r\n\r\n                    getStringToSignArtifacts(id, options.signatureSpec.version, {\r\n                        bucket: bucket,\r\n                        content: content,\r\n                        contentType: contentType,\r\n                        headers: headers,\r\n                        host: host,\r\n                        key: key,\r\n                        partNum: partNum,\r\n                        type: type,\r\n                        uploadId: uploadId\r\n                    }).then(function(_artifacts_) {\r\n                        artifacts = _artifacts_;\r\n                        promise.success({\r\n                            headers: (function() {\r\n                                if (contentType) {\r\n                                    headers[\"Content-Type\"] = contentType;\r\n                                }\r\n\r\n                                delete headers.Host; // we don't want this to be set on the XHR-initiated request\r\n                                return headers;\r\n                            }()),\r\n                            date: artifacts.date,\r\n                            endOfUrl: artifacts.endOfUrl,\r\n                            signedHeaders: artifacts.signedHeaders,\r\n                            stringToSign: artifacts.toSign,\r\n                            stringToSignRaw: artifacts.toSignRaw\r\n                        });\r\n                    }, function (err) {\r\n                        promise.failure(err);\r\n                    });\r\n\r\n                    return promise;\r\n                },\r\n\r\n                getHeaders: function() {\r\n                    return qq.extend({}, headers);\r\n                },\r\n\r\n                getEndOfUrl: function() {\r\n                    return artifacts && artifacts.endOfUrl;\r\n                },\r\n\r\n                getRequestDate: function() {\r\n                    return artifacts && artifacts.date;\r\n                },\r\n\r\n                getSignedHeaders: function() {\r\n                    return artifacts && artifacts.signedHeaders;\r\n                }\r\n            };\r\n        }\r\n    });\r\n};\r\n\r\nqq.s3.RequestSigner.prototype.REQUEST_TYPE = {\r\n    MULTIPART_INITIATE: \"multipart_initiate\",\r\n    MULTIPART_COMPLETE: \"multipart_complete\",\r\n    MULTIPART_ABORT: \"multipart_abort\",\r\n    MULTIPART_UPLOAD: \"multipart_upload\"\r\n};\r\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Initiate Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadInitiate.html)\n * request to S3 via the REST API.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.s3.InitiateMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingInitiateRequests = {},\n        options = {\n            filenameParam: \"qqfilename\",\n            method: \"POST\",\n            endpointStore: null,\n            paramsStore: null,\n            signatureSpec: null,\n            aclStore: null,\n            reducedRedundancy: false,\n            serverSideEncryption: false,\n            maxConnections: 3,\n            getContentType: function(id) {},\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            getName: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Determine all headers for the \"Initiate MPU\" request, including the \"Authorization\" header, which must be determined\n     * by the local server.  This is a promissory function.  If the server responds with a signature, the headers\n     * (including the Authorization header) will be passed into the success method of the promise.  Otherwise, the failure\n     * method on the promise will be called.\n     *\n     * @param id Associated file ID\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id) {\n        var bucket = options.getBucket(id),\n            host = options.getHost(id),\n            headers = {},\n            promise = new qq.Promise(),\n            key = options.getKey(id),\n            signatureConstructor;\n\n        headers[\"x-amz-acl\"] = options.aclStore.get(id);\n\n        if (options.reducedRedundancy) {\n            headers[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n        }\n\n        if (options.serverSideEncryption) {\n            headers[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n        }\n\n        headers[qq.s3.util.AWS_PARAM_PREFIX + options.filenameParam] = encodeURIComponent(options.getName(id));\n\n        qq.each(options.paramsStore.get(id), function(name, val) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                headers[name] = val;\n            }\n            else {\n                headers[qq.s3.util.AWS_PARAM_PREFIX + name] = encodeURIComponent(val);\n            }\n        });\n\n        signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n            (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_INITIATE, bucket, host, key)\n            .withContentType(options.getContentType(id))\n            .withHeaders(headers);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Initiate MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleInitiateRequestComplete(id, xhr, isError) {\n        var promise = pendingInitiateRequests[id],\n            domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            uploadIdElements, messageElements, uploadId, errorMessage, status;\n\n        delete pendingInitiateRequests[id];\n\n        // The base ajax requester may declare the request to be a failure based on status code.\n        if (isError) {\n            status = xhr.status;\n\n            messageElements = responseDoc.getElementsByTagName(\"Message\");\n            if (messageElements.length > 0) {\n                errorMessage = messageElements[0].textContent;\n            }\n        }\n        // If the base ajax requester has not declared this a failure, make sure we can retrieve the uploadId from the response.\n        else {\n            uploadIdElements = responseDoc.getElementsByTagName(\"UploadId\");\n            if (uploadIdElements.length > 0) {\n                uploadId = uploadIdElements[0].textContent;\n            }\n            else {\n                errorMessage = \"Upload ID missing from request\";\n            }\n        }\n\n        // Either fail the promise (passing a descriptive error message) or declare it a success (passing the upload ID)\n        if (uploadId === undefined) {\n            if (errorMessage) {\n                options.log(qq.format(\"Specific problem detected initiating multipart upload request for {}: '{}'.\", id, errorMessage), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Unexplained error with initiate multipart upload request for {}.  Status code {}.\", id, status), \"error\");\n            }\n\n            promise.failure(\"Problem initiating upload request.\", xhr);\n        }\n        else {\n            options.log(qq.format(\"Initiate multipart upload request successful for {}.  Upload ID is {}\", id, uploadId));\n            promise.success(uploadId, xhr);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleInitiateRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Initiate MPU\" request to AWS via the REST API.  First, though, we must get a signature from the\n         * local server for the request.  If all is successful, the uploadId from AWS will be passed into the promise's\n         * success handler. Otherwise, an error message will ultimately be passed into the failure method.\n         *\n         * @param id The ID associated with the file\n         * @returns {qq.Promise}\n         */\n        send: function(id) {\n            var promise = new qq.Promise();\n\n            getHeaders(id).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 initiate multipart upload request for \" + id);\n\n                pendingInitiateRequests[id] = promise;\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Complete Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadComplete.html)\n * request to S3 via the REST API.\n *\n * @param o Options passed by the creator, to overwrite any default option values.\n * @constructor\n */\nqq.s3.CompleteMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingCompleteRequests = {},\n        options = {\n            method: \"POST\",\n            contentType: \"text/xml\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Complete\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId, body) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_COMPLETE, bucket, host, options.getKey(id))\n                .withUploadId(uploadId)\n                .withContent(body)\n                .withContentType(\"application/xml; charset=UTF-8\");\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Complete MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleCompleteRequestComplete(id, xhr, isError) {\n        var promise = pendingCompleteRequests[id],\n            domParser = new DOMParser(),\n            bucket = options.getBucket(id),\n            key = options.getKey(id),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            bucketEls = responseDoc.getElementsByTagName(\"Bucket\"),\n            keyEls = responseDoc.getElementsByTagName(\"Key\");\n\n        delete pendingCompleteRequests[id];\n\n        options.log(qq.format(\"Complete response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Complete Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (bucketEls.length && keyEls.length) {\n                if (bucketEls[0].textContent !== bucket) {\n                    isError = true;\n                    options.log(qq.format(\"Wrong bucket in response to Complete Multipart Upload request for {}.\", id), \"error\");\n                }\n\n                // TODO Compare key name from response w/ expected key name if AWS ever fixes the encoding of key names in this response.\n            }\n            else {\n                isError = true;\n                options.log(qq.format(\"Missing bucket and/or key in response to Complete Multipart Upload request for {}.\", id), \"error\");\n            }\n        }\n\n        if (isError) {\n            promise.failure(\"Problem combining the file parts!\", xhr);\n        }\n        else {\n            promise.success({}, xhr);\n        }\n    }\n\n    /**\n     * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n     * @returns {string} XML string containing the body to send with the \"Complete\" request\n     */\n    function getCompleteRequestBody(etagEntries) {\n        var doc = document.implementation.createDocument(null, \"CompleteMultipartUpload\", null);\n\n        // The entries MUST be sorted by part number, per the AWS API spec.\n        etagEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(etagEntries, function(idx, etagEntry) {\n            var part = etagEntry.part,\n                etag = etagEntry.etag,\n                partEl = doc.createElement(\"Part\"),\n                partNumEl = doc.createElement(\"PartNumber\"),\n                partNumTextEl = doc.createTextNode(part),\n                etagTextEl = doc.createTextNode(etag),\n                etagEl = doc.createElement(\"ETag\");\n\n            etagEl.appendChild(etagTextEl);\n            partNumEl.appendChild(partNumTextEl);\n            partEl.appendChild(partNumEl);\n            partEl.appendChild(etagEl);\n            qq(doc).children()[0].appendChild(partEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: \"application/xml; charset=UTF-8\",\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleCompleteRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Complete\" request and fulfills the returned promise when the success of this request is known.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n         * @returns {qq.Promise}\n         */\n        send: function(id, uploadId, etagEntries) {\n            var promise = new qq.Promise(),\n                body = getCompleteRequestBody(etagEntries);\n\n            getHeaders(id, uploadId, body).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 complete multipart upload request for \" + id);\n\n                pendingCompleteRequests[id] = promise;\n                delete headers[\"Content-Type\"];\n\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .withPayload(body)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Ajax requester used to send an [\"Abort Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadAbort.html)\n * request to S3 via the REST API.\n\n * @param o\n * @constructor\n */\nqq.s3.AbortMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Abort\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @param id Associated file ID\n     * @param uploadId ID of the associated upload, according to AWS\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_ABORT, bucket, host, options.getKey(id))\n                .withUploadId(uploadId);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Abort MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleAbortRequestComplete(id, xhr, isError) {\n        var domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            errorEls = responseDoc.getElementsByTagName(\"Error\"),\n            awsErrorMsg;\n\n        options.log(qq.format(\"Abort response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Abort Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (errorEls.length) {\n                isError = true;\n                awsErrorMsg = responseDoc.getElementsByTagName(\"Message\")[0].textContent;\n                options.log(qq.format(\"Failed to Abort Multipart Upload request for {}.  Error: {}\", id, awsErrorMsg), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Abort MPU request succeeded for file ID {}.\", id));\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [\"DELETE\"],\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleAbortRequestComplete,\n        successfulResponseCodes: {\n            DELETE: [204]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Abort\" request.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         */\n        send: function(id, uploadId) {\n            getHeaders(id, uploadId).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 Abort multipart upload request for \" + id);\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            });\n        }\n    });\n};\n","/*globals qq */\r\n/**\r\n * Upload handler used by the upload to S3 module that depends on File API support, and, therefore, makes use of\r\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to S3 buckets via the associated AWS API.\r\n *\r\n * If chunking is supported and enabled, the S3 Multipart Upload REST API is utilized.\r\n *\r\n * @param spec Options passed from the base handler\r\n * @param proxy Callbacks & methods used to query for or push out data/changes\r\n */\r\nqq.s3.XhrUploadHandler = function(spec, proxy) {\r\n    \"use strict\";\r\n\r\n    var getName = proxy.getName,\r\n        log = proxy.log,\r\n        clockDrift = spec.clockDrift,\r\n        expectedStatus = 200,\r\n        onGetBucket = spec.getBucket,\r\n        onGetHost = spec.getHost,\r\n        onGetKeyName = spec.getKeyName,\r\n        filenameParam = spec.filenameParam,\r\n        paramsStore = spec.paramsStore,\r\n        endpointStore = spec.endpointStore,\r\n        aclStore = spec.aclStore,\r\n        reducedRedundancy = spec.objectProperties.reducedRedundancy,\r\n        region = spec.objectProperties.region,\r\n        serverSideEncryption = spec.objectProperties.serverSideEncryption,\r\n        validation = spec.validation,\r\n        signature = qq.extend({region: region, drift: clockDrift}, spec.signature),\r\n        handler = this,\r\n        credentialsProvider = spec.signature.credentialsProvider,\r\n\r\n        chunked = {\r\n            // Sends a \"Complete Multipart Upload\" request and then signals completion of the upload\r\n            // when the response to this request has been parsed.\r\n            combine: function(id) {\r\n                var uploadId = handler._getPersistableData(id).uploadId,\r\n                    etagMap = handler._getPersistableData(id).etags,\r\n                    result = new qq.Promise();\r\n\r\n                requesters.completeMultipart.send(id, uploadId, etagMap).then(\r\n                    result.success,\r\n\r\n                    function failure(reason, xhr) {\r\n                        result.failure(upload.done(id, xhr).response, xhr);\r\n                    }\r\n                );\r\n\r\n                return result;\r\n            },\r\n\r\n            // The last step in handling a chunked upload.  This is called after each chunk has been sent.\r\n            // The request may be successful, or not.  If it was successful, we must extract the \"ETag\" element\r\n            // in the XML response and store that along with the associated part number.\r\n            // We need these items to \"Complete\" the multipart upload after all chunks have been successfully sent.\r\n            done: function(id, xhr, chunkIdx) {\r\n                var response = upload.response.parse(id, xhr),\r\n                    etag;\r\n\r\n                if (response.success) {\r\n                    etag = xhr.getResponseHeader(\"ETag\");\r\n\r\n                    if (!handler._getPersistableData(id).etags) {\r\n                        handler._getPersistableData(id).etags = [];\r\n                    }\r\n                    handler._getPersistableData(id).etags.push({part: chunkIdx + 1, etag: etag});\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Determines headers that must be attached to the chunked (Multipart Upload) request.  One of these headers is an\r\n             * Authorization value, which must be determined by asking the local server to sign the request first.  So, this\r\n             * function returns a promise.  Once all headers are determined, the `success` method of the promise is called with\r\n             * the headers object.  If there was some problem determining the headers, we delegate to the caller's `failure`\r\n             * callback.\r\n             *\r\n             * @param id File ID\r\n             * @param chunkIdx Index of the chunk to PUT\r\n             * @returns {qq.Promise}\r\n             */\r\n            initHeaders: function(id, chunkIdx, blob) {\r\n                var headers = {},\r\n                    bucket = upload.bucket.getName(id),\r\n                    host = upload.host.getName(id),\r\n                    key = upload.key.urlSafe(id),\r\n                    promise = new qq.Promise(),\r\n                    signatureConstructor = requesters.restSignature.constructStringToSign\r\n                        (requesters.restSignature.REQUEST_TYPE.MULTIPART_UPLOAD, bucket, host, key)\r\n                        .withPartNum(chunkIdx + 1)\r\n                        .withContent(blob)\r\n                        .withUploadId(handler._getPersistableData(id).uploadId);\r\n\r\n                // Ask the local server to sign the request.  Use this signature to form the Authorization header.\r\n                requesters.restSignature.getSignature(id + \".\" + chunkIdx, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\r\n\r\n                return promise;\r\n            },\r\n\r\n            put: function(id, chunkIdx) {\r\n                var xhr = handler._createXhr(id, chunkIdx),\r\n                    chunkData = handler._getChunkData(id, chunkIdx),\r\n                    domain = spec.endpointStore.get(id),\r\n                    promise = new qq.Promise();\r\n\r\n                // Add appropriate headers to the multipart upload request.\r\n                // Once these have been determined (asynchronously) attach the headers and send the chunk.\r\n                chunked.initHeaders(id, chunkIdx, chunkData.blob).then(function(headers, endOfUrl) {\r\n                    if (xhr._cancelled) {\r\n                        log(qq.format(\"Upload of item {}.{} cancelled. Upload will not start after successful signature request.\", id, chunkIdx));\r\n                        promise.failure({error: \"Chunk upload cancelled\"});\r\n                    }\r\n                    else {\r\n                        var url = domain + \"/\" + endOfUrl;\r\n                        handler._registerProgressHandler(id, chunkIdx, chunkData.size);\r\n                        upload.track(id, xhr, chunkIdx).then(promise.success, promise.failure);\r\n                        xhr.open(\"PUT\", url, true);\r\n\r\n                        qq.each(headers, function(name, val) {\r\n                            xhr.setRequestHeader(name, val);\r\n                        });\r\n\r\n                        xhr.send(chunkData.blob);\r\n                    }\r\n                }, function() {\r\n                    promise.failure({error: \"Problem signing the chunk!\"}, xhr);\r\n                });\r\n\r\n                return promise;\r\n            },\r\n\r\n            send: function(id, chunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                chunked.setup(id).then(\r\n                    // The \"Initiate\" request succeeded.  We are ready to send the first chunk.\r\n                    function() {\r\n                        chunked.put(id, chunkIdx).then(promise.success, promise.failure);\r\n                    },\r\n\r\n                    // We were unable to initiate the chunked upload process.\r\n                    function(errorMessage, xhr) {\r\n                        promise.failure({error: errorMessage}, xhr);\r\n                    }\r\n                );\r\n\r\n                return promise;\r\n            },\r\n\r\n            /**\r\n             * Sends an \"Initiate Multipart Upload\" request to S3 via the REST API, but only if the MPU has not already been\r\n             * initiated.\r\n             *\r\n             * @param id Associated file ID\r\n             * @returns {qq.Promise} A promise that is fulfilled when the initiate request has been sent and the response has been parsed.\r\n             */\r\n            setup: function(id) {\r\n                var promise = new qq.Promise(),\r\n                    uploadId = handler._getPersistableData(id).uploadId,\r\n                    uploadIdPromise = new qq.Promise();\r\n\r\n                if (!uploadId) {\r\n                    handler._getPersistableData(id).uploadId = uploadIdPromise;\r\n                    requesters.initiateMultipart.send(id).then(\r\n                        function(uploadId) {\r\n                            handler._getPersistableData(id).uploadId = uploadId;\r\n                            uploadIdPromise.success(uploadId);\r\n                            promise.success(uploadId);\r\n                        },\r\n                        function(errorMsg, xhr) {\r\n                            handler._getPersistableData(id).uploadId = null;\r\n                            promise.failure(errorMsg, xhr);\r\n                            uploadIdPromise.failure(errorMsg, xhr);\r\n                        }\r\n                    );\r\n                }\r\n                else if (uploadId instanceof qq.Promise) {\r\n                    uploadId.then(function(uploadId) {\r\n                        promise.success(uploadId);\r\n                    });\r\n                }\r\n                else {\r\n                    promise.success(uploadId);\r\n                }\r\n\r\n                return promise;\r\n            }\r\n        },\r\n\r\n        requesters = {\r\n            abortMultipart: new qq.s3.AbortMultipartAjaxRequester({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                }\r\n            }),\r\n\r\n            completeMultipart: new qq.s3.CompleteMultipartAjaxRequester({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                }\r\n            }),\r\n\r\n            initiateMultipart: new qq.s3.InitiateMultipartAjaxRequester({\r\n                filenameParam: filenameParam,\r\n                endpointStore: endpointStore,\r\n                paramsStore: paramsStore,\r\n                signatureSpec: signature,\r\n                aclStore: aclStore,\r\n                reducedRedundancy: reducedRedundancy,\r\n                serverSideEncryption: serverSideEncryption,\r\n                cors: spec.cors,\r\n                log: log,\r\n                getContentType: function(id) {\r\n                    return handler._getMimeType(id);\r\n                },\r\n                getBucket: function(id) {\r\n                    return upload.bucket.getName(id);\r\n                },\r\n                getHost: function(id) {\r\n                    return upload.host.getName(id);\r\n                },\r\n                getKey: function(id) {\r\n                    return upload.key.urlSafe(id);\r\n                },\r\n                getName: function(id) {\r\n                    return getName(id);\r\n                }\r\n            }),\r\n\r\n            policySignature: new qq.s3.RequestSigner({\r\n                expectingPolicy: true,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log\r\n            }),\r\n\r\n            restSignature: new qq.s3.RequestSigner({\r\n                endpointStore: endpointStore,\r\n                signatureSpec: signature,\r\n                cors: spec.cors,\r\n                log: log\r\n            })\r\n        },\r\n\r\n        simple = {\r\n            /**\r\n             * Used for simple (non-chunked) uploads to determine the parameters to send along with the request.  Part of this\r\n             * process involves asking the local server to sign the request, so this function returns a promise.  The promise\r\n             * is fulfilled when all parameters are determined, or when we determine that all parameters cannot be calculated\r\n             * due to some error.\r\n             *\r\n             * @param id File ID\r\n             * @returns {qq.Promise}\r\n             */\r\n            initParams: function(id) {\r\n                /*jshint -W040 */\r\n                var customParams = paramsStore.get(id);\r\n                customParams[filenameParam] = getName(id);\r\n\r\n                return qq.s3.util.generateAwsParams({\r\n                    endpoint: endpointStore.get(id),\r\n                    clockDrift: clockDrift,\r\n                    params: customParams,\r\n                    type: handler._getMimeType(id),\r\n                    bucket: upload.bucket.getName(id),\r\n                    key: handler.getThirdPartyFileId(id),\r\n                    accessKey: credentialsProvider.get().accessKey,\r\n                    sessionToken: credentialsProvider.get().sessionToken,\r\n                    acl: aclStore.get(id),\r\n                    expectedStatus: expectedStatus,\r\n                    minFileSize: validation.minSizeLimit,\r\n                    maxFileSize: validation.maxSizeLimit,\r\n                    reducedRedundancy: reducedRedundancy,\r\n                    region: region,\r\n                    serverSideEncryption: serverSideEncryption,\r\n                    signatureVersion: signature.version,\r\n                    log: log\r\n                },\r\n                qq.bind(requesters.policySignature.getSignature, this, id));\r\n            },\r\n\r\n            send: function(id) {\r\n                var promise = new qq.Promise(),\r\n                    xhr = handler._createXhr(id),\r\n                    fileOrBlob = handler.getFile(id);\r\n\r\n                handler._registerProgressHandler(id);\r\n                upload.track(id, xhr).then(promise.success, promise.failure);\r\n\r\n                // Delegate to a function the sets up the XHR request and notifies us when it is ready to be sent, along w/ the payload.\r\n                simple.setup(id, xhr, fileOrBlob).then(function(toSend) {\r\n                    log(\"Sending upload request for \" + id);\r\n                    xhr.send(toSend);\r\n                }, promise.failure);\r\n\r\n                return promise;\r\n            },\r\n\r\n            /**\r\n             * Starts the upload process by delegating to an async function that determine parameters to be attached to the\r\n             * request.  If all params can be determined, we are called back with the params and the caller of this function is\r\n             * informed by invoking the `success` method on the promise returned by this function, passing the payload of the\r\n             * request.  If some error occurs here, we delegate to a function that signals a failure for this upload attempt.\r\n             *\r\n             * Note that this is only used by the simple (non-chunked) upload process.\r\n             *\r\n             * @param id File ID\r\n             * @param xhr XMLHttpRequest to use for the upload\r\n             * @param fileOrBlob `File` or `Blob` to send\r\n             * @returns {qq.Promise}\r\n             */\r\n            setup: function(id, xhr, fileOrBlob) {\r\n                var formData = new FormData(),\r\n                    endpoint = endpointStore.get(id),\r\n                    url = endpoint,\r\n                    promise = new qq.Promise();\r\n\r\n                simple.initParams(id).then(\r\n                    // Success - all params determined\r\n                    function(awsParams) {\r\n                        xhr.open(\"POST\", url, true);\r\n\r\n                        qq.obj2FormData(awsParams, formData);\r\n\r\n                        // AWS requires the file field be named \"file\".\r\n                        formData.append(\"file\", fileOrBlob);\r\n\r\n                        promise.success(formData);\r\n                    },\r\n\r\n                    // Failure - we couldn't determine some params (likely the signature)\r\n                    function(errorMessage) {\r\n                        promise.failure({error: errorMessage});\r\n                    }\r\n                );\r\n\r\n                return promise;\r\n            }\r\n        },\r\n\r\n        upload = {\r\n            /**\r\n             * Note that this is called when an upload has reached a termination point,\r\n             * regardless of success/failure.  For example, it is called when we have\r\n             * encountered an error during the upload or when the file may have uploaded successfully.\r\n             *\r\n             * @param id file ID\r\n             */\r\n            bucket: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        cachedBucket = handler._getFileState(id).bucket;\r\n\r\n                    if (cachedBucket) {\r\n                        promise.success(cachedBucket);\r\n                    }\r\n                    else {\r\n                        onGetBucket(id).then(function(bucket) {\r\n                            handler._getFileState(id).bucket = bucket;\r\n                            promise.success(bucket);\r\n                        }, promise.failure);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                getName: function(id) {\r\n                    return handler._getFileState(id).bucket;\r\n                }\r\n            },\r\n\r\n            host: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        cachedHost = handler._getFileState(id).host;\r\n\r\n                    if (cachedHost) {\r\n                        promise.success(cachedHost);\r\n                    }\r\n                    else {\r\n                        onGetHost(id).then(function(host) {\r\n                            handler._getFileState(id).host = host;\r\n                            promise.success(host);\r\n                        }, promise.failure);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                getName: function(id) {\r\n                    return handler._getFileState(id).host;\r\n                }\r\n            },\r\n\r\n            done: function(id, xhr) {\r\n                var response = upload.response.parse(id, xhr),\r\n                    isError = response.success !== true;\r\n\r\n                if (isError && upload.response.shouldReset(response.code)) {\r\n                    log(\"This is an unrecoverable error, we must restart the upload entirely on the next retry attempt.\", \"error\");\r\n                    response.reset = true;\r\n                }\r\n\r\n                return {\r\n                    success: !isError,\r\n                    response: response\r\n                };\r\n            },\r\n\r\n            key: {\r\n                promise: function(id) {\r\n                    var promise = new qq.Promise(),\r\n                        key = handler.getThirdPartyFileId(id);\r\n\r\n                    /* jshint eqnull:true */\r\n                    if (key == null) {\r\n                        handler._setThirdPartyFileId(id, promise);\r\n                        onGetKeyName(id, getName(id)).then(\r\n                            function(keyName) {\r\n                                handler._setThirdPartyFileId(id, keyName);\r\n                                promise.success(keyName);\r\n                            },\r\n                            function(errorReason) {\r\n                                handler._setThirdPartyFileId(id, null);\r\n                                promise.failure(errorReason);\r\n                            }\r\n                        );\r\n                    }\r\n                    else if (qq.isGenericPromise(key)) {\r\n                        key.then(promise.success, promise.failure);\r\n                    }\r\n                    else {\r\n                        promise.success(key);\r\n                    }\r\n\r\n                    return promise;\r\n                },\r\n\r\n                urlSafe: function(id) {\r\n                    var encodedKey = handler.getThirdPartyFileId(id);\r\n                    return qq.s3.util.uriEscapePath(encodedKey);\r\n                }\r\n            },\r\n\r\n            response: {\r\n                parse: function(id, xhr) {\r\n                    var response = {},\r\n                        parsedErrorProps;\r\n\r\n                    try {\r\n                        log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\r\n\r\n                        if (xhr.status === expectedStatus) {\r\n                            response.success = true;\r\n                        }\r\n                        else {\r\n                            parsedErrorProps = upload.response.parseError(xhr.responseText);\r\n\r\n                            if (parsedErrorProps) {\r\n                                response.error = parsedErrorProps.message;\r\n                                response.code = parsedErrorProps.code;\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\r\n                    }\r\n\r\n                    return response;\r\n                },\r\n\r\n                /**\r\n                 * This parses an XML response by extracting the \"Message\" and \"Code\" elements that accompany AWS error responses.\r\n                 *\r\n                 * @param awsResponseXml XML response from AWS\r\n                 * @returns {object} Object w/ `code` and `message` properties, or undefined if we couldn't find error info in the XML document.\r\n                 */\r\n                parseError: function(awsResponseXml) {\r\n                    var parser = new DOMParser(),\r\n                        parsedDoc = parser.parseFromString(awsResponseXml, \"application/xml\"),\r\n                        errorEls = parsedDoc.getElementsByTagName(\"Error\"),\r\n                        errorDetails = {},\r\n                        codeEls, messageEls;\r\n\r\n                    if (errorEls.length) {\r\n                        codeEls = parsedDoc.getElementsByTagName(\"Code\");\r\n                        messageEls = parsedDoc.getElementsByTagName(\"Message\");\r\n\r\n                        if (messageEls.length) {\r\n                            errorDetails.message = messageEls[0].textContent;\r\n                        }\r\n\r\n                        if (codeEls.length) {\r\n                            errorDetails.code = codeEls[0].textContent;\r\n                        }\r\n\r\n                        return errorDetails;\r\n                    }\r\n                },\r\n\r\n                // Determine if the upload should be restarted on the next retry attempt\r\n                // based on the error code returned in the response from AWS.\r\n                shouldReset: function(errorCode) {\r\n                    /*jshint -W014 */\r\n                    return errorCode === \"EntityTooSmall\"\r\n                        || errorCode === \"InvalidPart\"\r\n                        || errorCode === \"InvalidPartOrder\"\r\n                        || errorCode === \"NoSuchUpload\";\r\n                }\r\n            },\r\n\r\n            start: function(id, optChunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                upload.key.promise(id).then(function() {\r\n                    upload.bucket.promise(id).then(function() {\r\n                        upload.host.promise(id).then(function() {\r\n                            /* jshint eqnull:true */\r\n                            if (optChunkIdx == null) {\r\n                                simple.send(id).then(promise.success, promise.failure);\r\n                            }\r\n                            else {\r\n                                chunked.send(id, optChunkIdx).then(promise.success, promise.failure);\r\n                            }\r\n                        });\r\n                    });\r\n                },\r\n                function(errorReason) {\r\n                    promise.failure({error: errorReason});\r\n                });\r\n\r\n                return promise;\r\n            },\r\n\r\n            track: function(id, xhr, optChunkIdx) {\r\n                var promise = new qq.Promise();\r\n\r\n                xhr.onreadystatechange = function() {\r\n                    if (xhr.readyState === 4) {\r\n                        var result;\r\n\r\n                        /* jshint eqnull:true */\r\n                        if (optChunkIdx == null) {\r\n                            result = upload.done(id, xhr);\r\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\r\n                        }\r\n                        else {\r\n                            chunked.done(id, xhr, optChunkIdx);\r\n                            result = upload.done(id, xhr);\r\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                return promise;\r\n            }\r\n        };\r\n\r\n    qq.extend(this, {\r\n        uploadChunk: upload.start,\r\n        uploadFile: upload.start\r\n    });\r\n\r\n    qq.extend(this, new qq.XhrUploadHandler({\r\n        options: qq.extend({namespace: \"s3\"}, spec),\r\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\r\n    }));\r\n\r\n    qq.override(this, function(super_) {\r\n        return {\r\n            expunge: function(id) {\r\n                var uploadId = handler._getPersistableData(id) && handler._getPersistableData(id).uploadId,\r\n                    existedInLocalStorage = handler._maybeDeletePersistedChunkData(id);\r\n\r\n                if (uploadId !== undefined && existedInLocalStorage) {\r\n                    requesters.abortMultipart.send(id, uploadId);\r\n                }\r\n\r\n                super_.expunge(id);\r\n            },\r\n\r\n            finalizeChunks: function(id) {\r\n                return chunked.combine(id);\r\n            },\r\n\r\n            _getLocalStorageId: function(id) {\r\n                var baseStorageId = super_._getLocalStorageId(id),\r\n                    bucketName = upload.bucket.getName(id);\r\n\r\n                return baseStorageId + \"-\" + bucketName;\r\n            }\r\n        };\r\n    });\r\n};\r\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to S3 buckets via the associated\n * AWS API.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        clockDrift = options.clockDrift,\n        onUuidChanged = proxy.onUuidChanged,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        onGetBucket = options.getBucket,\n        onGetKeyName = options.getKeyName,\n        filenameParam = options.filenameParam,\n        paramsStore = options.paramsStore,\n        endpointStore = options.endpointStore,\n        aclStore = options.aclStore,\n        reducedRedundancy = options.objectProperties.reducedRedundancy,\n        region = options.objectProperties.region,\n        serverSideEncryption = options.objectProperties.serverSideEncryption,\n        validation = options.validation,\n        signature = options.signature,\n        successRedirectUrl = options.iframeSupport.localBlankPagePath,\n        credentialsProvider = options.signature.credentialsProvider,\n        getSignatureAjaxRequester = new qq.s3.RequestSigner({\n            signatureSpec: signature,\n            cors: options.cors,\n            log: log\n        });\n\n    if (successRedirectUrl === undefined) {\n        throw new Error(\"successRedirectEndpoint MUST be defined if you intend to use browsers that do not support the File API!\");\n    }\n\n    /**\n     * Attempt to parse the contents of an iframe after receiving a response from the server.  If the contents cannot be\n     * read (perhaps due to a security error) it is safe to assume that the upload was not successful since Amazon should\n     * have redirected to a known endpoint that should provide a parseable response.\n     *\n     * @param id ID of the associated file\n     * @param iframe target of the form submit\n     * @returns {boolean} true if the contents can be read, false otherwise\n     */\n    function isValidResponse(id, iframe) {\n        var response,\n            endpoint = options.endpointStore.get(id),\n            bucket = handler._getFileState(id).bucket,\n            doc,\n            innerHtml,\n            responseData;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            responseData = qq.s3.util.parseIframeResponse(iframe);\n            if (responseData.bucket === bucket &&\n                responseData.key === qq.s3.util.encodeQueryStringParam(handler.getThirdPartyFileId(id))) {\n\n                return true;\n            }\n\n            log(\"Response from AWS included an unexpected bucket or key name.\", \"error\");\n\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n        }\n\n        return false;\n    }\n\n    function generateAwsParams(id) {\n        /*jshint -W040 */\n        var customParams = paramsStore.get(id);\n\n        customParams[filenameParam] = getName(id);\n\n        return qq.s3.util.generateAwsParams({\n            endpoint: endpointStore.get(id),\n            clockDrift: clockDrift,\n            params: customParams,\n            bucket: handler._getFileState(id).bucket,\n            key: handler.getThirdPartyFileId(id),\n            accessKey: credentialsProvider.get().accessKey,\n            sessionToken: credentialsProvider.get().sessionToken,\n            acl: aclStore.get(id),\n            minFileSize: validation.minSizeLimit,\n            maxFileSize: validation.maxSizeLimit,\n            successRedirectUrl: successRedirectUrl,\n            reducedRedundancy: reducedRedundancy,\n            region: region,\n            serverSideEncryption: serverSideEncryption,\n            signatureVersion: signature.version,\n            log: log\n        },\n        qq.bind(getSignatureAjaxRequester.getSignature, this, id));\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            endpoint = options.endpointStore.get(id),\n            fileName = getName(id);\n\n        generateAwsParams(id).then(function(params) {\n            var form = handler._initFormForUpload({\n                method: method,\n                endpoint: endpoint,\n                params: params,\n                paramsInBody: true,\n                targetName: iframe.name\n            });\n\n            promise.success(form);\n        }, function(errorMessage) {\n            promise.failure(errorMessage);\n            handleFinishedUpload(id, iframe, fileName, {error: errorMessage});\n        });\n\n        return promise;\n    }\n\n    function handleUpload(id) {\n        var iframe = handler._createIframe(id),\n            input = handler.getInput(id),\n            promise = new qq.Promise();\n\n        createForm(id, iframe).then(function(form) {\n            form.appendChild(input);\n\n            // Register a callback when the response comes in from S3\n            handler._attachLoadEvent(iframe, function(response) {\n                log(\"iframe loaded\");\n\n                // If the common response handler has determined success or failure immediately\n                if (response) {\n                    // If there is something fundamentally wrong with the response (such as iframe content is not accessible)\n                    if (response.success === false) {\n                        log(\"Amazon likely rejected the upload request\", \"error\");\n                        promise.failure(response);\n                    }\n                }\n                // The generic response (iframe onload) handler was not able to make a determination regarding the success of the request\n                else {\n                    response = {};\n                    response.success = isValidResponse(id, iframe);\n\n                    // If the more specific response handle detected a problem with the response from S3\n                    if (response.success === false) {\n                        log(\"A success response was received by Amazon, but it was invalid in some way.\", \"error\");\n                        promise.failure(response);\n                    }\n                    else {\n                        qq.extend(response, qq.s3.util.parseIframeResponse(iframe));\n                        promise.success(response);\n                    }\n                }\n\n                handleFinishedUpload(id, iframe);\n            });\n\n            log(\"Sending upload request for \" + id);\n            form.submit();\n            qq(form).remove();\n        }, promise.failure);\n\n        return promise;\n    }\n\n    function handleFinishedUpload(id, iframe) {\n        handler._detachLoadEvent(id);\n        iframe && qq(iframe).remove();\n    }\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: false,\n            inputName: \"file\"\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            onUuidChanged: onUuidChanged,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n\n    qq.extend(this, {\n        uploadFile: function(id) {\n            var name = getName(id),\n                promise = new qq.Promise();\n\n            if (handler.getThirdPartyFileId(id)) {\n                if (handler._getFileState(id).bucket) {\n                    handleUpload(id).then(promise.success, promise.failure);\n                }\n                else {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handleUpload(id).then(promise.success, promise.failure);\n                    });\n                }\n            }\n            else {\n                // The S3 uploader module will either calculate the key or ask the server for it\n                // and will call us back once it is known.\n                onGetKeyName(id, name).then(function(key) {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handler._setThirdPartyFileId(id, key);\n                        handleUpload(id).then(promise.success, promise.failure);\n                    }, function(errorReason) {\n                        promise.failure({error: errorReason});\n                    });\n                }, function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n            }\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\r\n/**\r\n * Defines the public API for FineUploader mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.uiPublicApi = {\r\n        addInitialFiles: function(cannedFileList) {\r\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\r\n            this._templating.addCacheToDom();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\r\n            this._templating.clearFiles();\r\n        },\r\n\r\n        addExtraDropzone: function(element) {\r\n            this._dnd && this._dnd.setupExtraDropzone(element);\r\n        },\r\n\r\n        removeExtraDropzone: function(element) {\r\n            if (this._dnd) {\r\n                return this._dnd.removeDropzone(element);\r\n            }\r\n        },\r\n\r\n        getItemByFileId: function(id) {\r\n            if (!this._templating.isHiddenForever(id)) {\r\n                return this._templating.getFileContainer(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            this._parent.prototype.reset.apply(this, arguments);\r\n            this._templating.reset();\r\n\r\n            if (!this._options.button && this._templating.getButton()) {\r\n                this._defaultButtonId = this._createUploadButton({\r\n                    element: this._templating.getButton(),\r\n                    title: this._options.text.fileInputTitle\r\n                }).getButtonId();\r\n            }\r\n\r\n            if (this._dnd) {\r\n                this._dnd.dispose();\r\n                this._dnd = this._setupDragAndDrop();\r\n            }\r\n\r\n            this._totalFilesInBatch = 0;\r\n            this._filesInBatchAddedToUi = 0;\r\n\r\n            this._setupClickAndEditEventHandlers();\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            var formattedFilename = this._options.formatFileName(newName);\r\n\r\n            this._parent.prototype.setName.apply(this, arguments);\r\n            this._templating.updateFilename(id, formattedFilename);\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\r\n\r\n            paused && this._templating.uploadPaused(id);\r\n            return paused;\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\r\n\r\n            continued && this._templating.uploadContinued(id);\r\n            return continued;\r\n        },\r\n\r\n        getId: function(fileContainerOrChildEl) {\r\n            return this._templating.getFileId(fileContainerOrChildEl);\r\n        },\r\n\r\n        getDropTarget: function(fileId) {\r\n            var file = this.getFile(fileId);\r\n\r\n            return file.qqDropTarget;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploader mode.\r\n     */\r\n    qq.uiPrivateApi = {\r\n        _getButton: function(buttonId) {\r\n            var button = this._parent.prototype._getButton.apply(this, arguments);\r\n\r\n            if (!button) {\r\n                if (buttonId === this._defaultButtonId) {\r\n                    button = this._templating.getButton();\r\n                }\r\n            }\r\n\r\n            return button;\r\n        },\r\n\r\n        _removeFileItem: function(fileId) {\r\n            this._templating.removeFile(fileId);\r\n        },\r\n\r\n        _setupClickAndEditEventHandlers: function() {\r\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\r\n\r\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\r\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\r\n            this._focusinEventSupported = !qq.firefox();\r\n\r\n            if (this._isEditFilenameEnabled())\r\n            {\r\n                this._filenameClickHandler = this._bindFilenameClickEvent();\r\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\r\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\r\n            }\r\n        },\r\n\r\n        _setupDragAndDrop: function() {\r\n            var self = this,\r\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\r\n                templating = this._templating,\r\n                defaultDropZone = templating.getDropZone();\r\n\r\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\r\n\r\n            return new qq.DragAndDrop({\r\n                dropZoneElements: dropZoneElements,\r\n                allowMultipleItems: this._options.multiple,\r\n                classes: {\r\n                    dropActive: this._options.classes.dropActive\r\n                },\r\n                callbacks: {\r\n                    processingDroppedFiles: function() {\r\n                        templating.showDropProcessing();\r\n                    },\r\n                    processingDroppedFilesComplete: function(files, targetEl) {\r\n                        templating.hideDropProcessing();\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            file.qqDropTarget = targetEl;\r\n                        });\r\n\r\n                        if (files.length) {\r\n                            self.addFiles(files, null, null);\r\n                        }\r\n                    },\r\n                    dropError: function(code, errorData) {\r\n                        self._itemError(code, errorData);\r\n                    },\r\n                    dropLog: function(message, level) {\r\n                        self.log(message, level);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _bindFileButtonsClickEvent: function() {\r\n            var self = this;\r\n\r\n            return new qq.FileButtonsClickHandler({\r\n                templating: this._templating,\r\n\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n\r\n                onDeleteFile: function(fileId) {\r\n                    self.deleteFile(fileId);\r\n                },\r\n\r\n                onCancel: function(fileId) {\r\n                    self.cancel(fileId);\r\n                },\r\n\r\n                onRetry: function(fileId) {\r\n                    self.retry(fileId);\r\n                },\r\n\r\n                onPause: function(fileId) {\r\n                    self.pauseUpload(fileId);\r\n                },\r\n\r\n                onContinue: function(fileId) {\r\n                    self.continueUpload(fileId);\r\n                },\r\n\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                }\r\n            });\r\n        },\r\n\r\n        _isEditFilenameEnabled: function() {\r\n            /*jshint -W014 */\r\n            return this._templating.isEditFilenamePossible()\r\n                && !this._options.autoUpload\r\n                && qq.FilenameClickHandler\r\n                && qq.FilenameInputFocusHandler\r\n                && qq.FilenameInputFocusHandler;\r\n        },\r\n\r\n        _filenameEditHandler: function() {\r\n            var self = this,\r\n                templating = this._templating;\r\n\r\n            return {\r\n                templating: templating,\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n                onGetUploadStatus: function(fileId) {\r\n                    return self.getUploads({id: fileId}).status;\r\n                },\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                },\r\n                onSetName: function(id, newName) {\r\n                    self.setName(id, newName);\r\n                },\r\n                onEditingStatusChange: function(id, isEditing) {\r\n                    var qqInput = qq(templating.getEditInput(id)),\r\n                        qqFileContainer = qq(templating.getFileContainer(id));\r\n\r\n                    if (isEditing) {\r\n                        qqInput.addClass(\"qq-editing\");\r\n                        templating.hideFilename(id);\r\n                        templating.hideEditIcon(id);\r\n                    }\r\n                    else {\r\n                        qqInput.removeClass(\"qq-editing\");\r\n                        templating.showFilename(id);\r\n                        templating.showEditIcon(id);\r\n                    }\r\n\r\n                    // Force IE8 and older to repaint\r\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\r\n                }\r\n            };\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\r\n\r\n            if (this._isEditFilenameEnabled()) {\r\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\r\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\r\n                    this._templating.markFilenameEditable(id);\r\n                    this._templating.hideEditIcon(id);\r\n                }\r\n            }\r\n\r\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\r\n                this._templating.hideRetry(id);\r\n                this._templating.setStatusText(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\r\n            }\r\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\r\n                this._templating.hidePause(id);\r\n            }\r\n        },\r\n\r\n        _bindFilenameInputFocusInEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusInHandler(spec);\r\n        },\r\n\r\n        _bindFilenameInputFocusEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusHandler(spec);\r\n        },\r\n\r\n        _bindFilenameClickEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameClickHandler(spec);\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._parent.prototype._storeForLater.apply(this, arguments);\r\n            this._templating.hideSpinner(id);\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._parent.prototype._onAllComplete.apply(this, arguments);\r\n            this._templating.resetTotalProgress();\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            var file = this.getFile(id);\r\n\r\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\r\n                this._paramsStore.addReadOnly(id, {\r\n                    qqpath: file.qqPath\r\n                });\r\n            }\r\n\r\n            this._parent.prototype._onSubmit.apply(this, arguments);\r\n            this._addToList(id, name);\r\n        },\r\n\r\n        // The file item has been added to the DOM.\r\n        _onSubmitted: function(id) {\r\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\r\n            if (this._isEditFilenameEnabled()) {\r\n                this._templating.markFilenameEditable(id);\r\n                this._templating.showEditIcon(id);\r\n\r\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\r\n                if (!this._focusinEventSupported) {\r\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\r\n                }\r\n            }\r\n        },\r\n\r\n        // Update the progress bar & percentage as the file is uploaded\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._parent.prototype._onProgress.apply(this, arguments);\r\n\r\n            this._templating.updateProgress(id, loaded, total);\r\n\r\n            if (Math.round(loaded / total * 100) === 100) {\r\n                this._templating.hideCancel(id);\r\n                this._templating.hidePause(id);\r\n                this._templating.hideProgress(id);\r\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\r\n\r\n                // If ~last byte was sent, display total file size\r\n                this._displayFileSize(id);\r\n            }\r\n            else {\r\n                // If still uploading, display percentage - total size is actually the total request(s) size\r\n                this._displayFileSize(id, loaded, total);\r\n            }\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\r\n            this._templating.updateTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\r\n                templating = this._templating,\r\n                fileContainer = templating.getFileContainer(id),\r\n                self = this;\r\n\r\n            function completeUpload(result) {\r\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\r\n                // If so, don't perform any UI-related tasks related to this file.\r\n                if (!fileContainer) {\r\n                    return;\r\n                }\r\n\r\n                templating.setStatusText(id);\r\n\r\n                qq(fileContainer).removeClass(self._classes.retrying);\r\n                templating.hideProgress(id);\r\n\r\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\r\n                    templating.hideCancel(id);\r\n                }\r\n                templating.hideSpinner(id);\r\n\r\n                if (result.success) {\r\n                    self._markFileAsSuccessful(id);\r\n                }\r\n                else {\r\n                    qq(fileContainer).addClass(self._classes.fail);\r\n                    templating.showCancel(id);\r\n\r\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\r\n                        qq(fileContainer).addClass(self._classes.retryable);\r\n                        templating.showRetry(id);\r\n                    }\r\n                    self._controlFailureTextDisplay(id, result);\r\n                }\r\n            }\r\n\r\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\r\n            if (parentRetVal instanceof qq.Promise) {\r\n                parentRetVal.done(function(newResult) {\r\n                    completeUpload(newResult);\r\n                });\r\n\r\n            }\r\n            else {\r\n                completeUpload(result);\r\n            }\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _markFileAsSuccessful: function(id) {\r\n            var templating = this._templating;\r\n\r\n            if (this._isDeletePossible()) {\r\n                templating.showDeleteButton(id);\r\n            }\r\n\r\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\r\n\r\n            this._maybeUpdateThumbnail(id);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\r\n            this._templating.showSpinner(id);\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\r\n\r\n            this._templating.showSpinner(id);\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\r\n\r\n            // Only display the pause button if we have finished uploading at least one chunk\r\n            // & this file can be resumed\r\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\r\n                this._templating.allowPause(id);\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._parent.prototype._onCancel.apply(this, arguments);\r\n            this._removeFileItem(id);\r\n\r\n            if (this._getNotFinished() === 0) {\r\n                this._templating.resetTotalProgress();\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id) {\r\n            var retryNumForDisplay, maxAuto, retryNote;\r\n\r\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\r\n\r\n            this._showCancelLink(id);\r\n\r\n            if (this._options.retry.showAutoRetryNote) {\r\n                retryNumForDisplay = this._autoRetries[id];\r\n                maxAuto = this._options.retry.maxAutoAttempts;\r\n\r\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\r\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\r\n\r\n                this._templating.setStatusText(id, retryNote);\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\r\n            }\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\r\n                this._templating.resetProgress(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\r\n                this._templating.setStatusText(id);\r\n                this._templating.showSpinner(id);\r\n                this._showCancelLink(id);\r\n                return true;\r\n            }\r\n            else {\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\r\n                this._templating.showRetry(id);\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id) {\r\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\r\n\r\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\r\n        },\r\n\r\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\r\n            if (this._options.deleteFile.forceConfirm) {\r\n                this._showDeleteConfirm.apply(this, arguments);\r\n            }\r\n            else {\r\n                this._sendDeleteRequest.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhr, isError) {\r\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\r\n\r\n            this._templating.hideSpinner(id);\r\n\r\n            if (isError) {\r\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\r\n                this._templating.showDeleteButton(id);\r\n            }\r\n            else {\r\n                this._removeFileItem(id);\r\n            }\r\n        },\r\n\r\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\r\n            this._templating.hideDeleteButton(id);\r\n            this._templating.showSpinner(id);\r\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\r\n            this._deleteHandler.sendDelete.apply(this, arguments);\r\n        },\r\n\r\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\r\n            /*jshint -W004 */\r\n            var fileName = this.getName(id),\r\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\r\n                uuid = this.getUuid(id),\r\n                deleteRequestArgs = arguments,\r\n                self = this,\r\n                retVal;\r\n\r\n            retVal = this._options.showConfirm(confirmMessage);\r\n\r\n            if (qq.isGenericPromise(retVal)) {\r\n                retVal.then(function() {\r\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n                });\r\n            }\r\n            else if (retVal !== false) {\r\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n            }\r\n        },\r\n\r\n        _addToList: function(id, name, canned) {\r\n            var prependData,\r\n                prependIndex = 0,\r\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\r\n                record;\r\n\r\n            if (this._options.display.prependFiles) {\r\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\r\n                    prependIndex = this._filesInBatchAddedToUi - 1;\r\n                }\r\n\r\n                prependData = {\r\n                    index: prependIndex\r\n                };\r\n            }\r\n\r\n            if (!canned) {\r\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\r\n                    this._templating.disableCancel();\r\n                }\r\n\r\n                // Cancel all existing (previous) files and clear the list if this file is not part of\r\n                // a scaled file group that has already been accepted, or if this file is not part of\r\n                // a scaled file group at all.\r\n                if (!this._options.multiple) {\r\n                    record = this.getUploads({id: id});\r\n\r\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\r\n\r\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\r\n                        this._handler.cancelAll();\r\n                        this._clearList();\r\n                        this._handledProxyGroup = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (canned) {\r\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\r\n            }\r\n            else {\r\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\r\n            }\r\n\r\n            this._filesInBatchAddedToUi += 1;\r\n\r\n            if (canned ||\r\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\r\n\r\n                this._displayFileSize(id);\r\n            }\r\n        },\r\n\r\n        _clearList: function() {\r\n            this._templating.clearFiles();\r\n            this.clearStoredFiles();\r\n        },\r\n\r\n        _displayFileSize: function(id, loadedSize, totalSize) {\r\n            var size = this.getSize(id),\r\n                sizeForDisplay = this._formatSize(size);\r\n\r\n            if (size >= 0) {\r\n                if (loadedSize !== undefined && totalSize !== undefined) {\r\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\r\n                }\r\n\r\n                this._templating.updateSize(id, sizeForDisplay);\r\n            }\r\n        },\r\n\r\n        _formatProgress: function(uploadedSize, totalSize) {\r\n            var message = this._options.text.formatProgress;\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\r\n            r(\"{total_size}\", this._formatSize(totalSize));\r\n            return message;\r\n        },\r\n\r\n        _controlFailureTextDisplay: function(id, response) {\r\n            var mode, responseProperty, failureReason;\r\n\r\n            mode = this._options.failedUploadTextDisplay.mode;\r\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\r\n\r\n            if (mode === \"custom\") {\r\n                failureReason = response[responseProperty];\r\n                if (!failureReason) {\r\n                    failureReason = this._options.text.failUpload;\r\n                }\r\n\r\n                this._templating.setStatusText(id, failureReason);\r\n\r\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\r\n                    this._showTooltip(id, failureReason);\r\n                }\r\n            }\r\n            else if (mode === \"default\") {\r\n                this._templating.setStatusText(id, this._options.text.failUpload);\r\n            }\r\n            else if (mode !== \"none\") {\r\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\r\n            }\r\n        },\r\n\r\n        _showTooltip: function(id, text) {\r\n            this._templating.getFileContainer(id).title = text;\r\n        },\r\n\r\n        _showCancelLink: function(id) {\r\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\r\n                this._templating.showCancel(id);\r\n            }\r\n        },\r\n\r\n        _itemError: function(code, name, item) {\r\n            var message = this._parent.prototype._itemError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._parent.prototype._batchError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _setupPastePrompt: function() {\r\n            var self = this;\r\n\r\n            this._options.callbacks.onPasteReceived = function() {\r\n                var message = self._options.paste.namePromptMessage,\r\n                    defaultVal = self._options.paste.defaultName;\r\n\r\n                return self._options.showPrompt(message, defaultVal);\r\n            };\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id, name) {\r\n            this._totalFilesInBatch -= 1;\r\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            this._totalFilesInBatch = items.length;\r\n            this._filesInBatchAddedToUi = 0;\r\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\r\n        },\r\n\r\n        _maybeUpdateThumbnail: function(fileId) {\r\n            var thumbnailUrl = this._thumbnailUrls[fileId],\r\n                fileStatus = this.getUploads({id: fileId}).status;\r\n\r\n            if (fileStatus !== qq.status.DELETED &&\r\n                (thumbnailUrl ||\r\n                this._options.thumbnails.placeholders.waitUntilResponse ||\r\n                !qq.supportedFeatures.imagePreviews)) {\r\n\r\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\r\n                // if called with a null thumbnailUrl.\r\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\r\n            }\r\n        },\r\n\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\r\n\r\n            this._addToList(id, this.getName(id), true);\r\n            this._templating.hideSpinner(id);\r\n            this._templating.hideCancel(id);\r\n            this._markFileAsSuccessful(id);\r\n\r\n            return id;\r\n        },\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._parent.prototype._setSize.apply(this, arguments);\r\n\r\n            this._templating.updateSize(id, this._formatSize(newSize));\r\n        },\r\n\r\n        _sessionRequestComplete: function() {\r\n            this._templating.addCacheToDom();\r\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\r\n        }\r\n    };\r\n}());\r\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to S3.\n * This module inherits all logic from FineUploader mode and FineUploaderBasicS3 mode and adds some UI-related logic\n * specific to the upload-to-S3 workflow.  Some inherited options and API methods have a special meaning\n * in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from s3.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"s3\");\n\n        if (!qq.supportedFeatures.ajaxUploading && options.iframeSupport.localBlankPagePath === undefined) {\n            this._options.element.innerHTML = \"<div>You MUST set the <code>localBlankPagePath</code> property \" +\n                \"of the <code>iframeSupport</code> option since this browser does not support the File API!</div>\";\n        }\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.s3.FineUploader.prototype, qq.s3.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPrivateApi);\n}());\n"]}