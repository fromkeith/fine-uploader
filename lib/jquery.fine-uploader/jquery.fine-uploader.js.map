{"version":3,"sources":["?","../client/js/jquery-plugin.js","../client/js/jquery-dnd.js","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/traditional/traditional.form.upload.handler.js","../client/js/traditional/traditional.xhr.upload.handler.js","../client/js/traditional/all-chunks-done.ajax.requester.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js"],"names":["global","$","$el","pluginOptions","init","options","xformedOpts","transformVariables","newUploaderInstance","getNewUploaderInstance","uploader","addCallbacks","params","uploaderType","pluginOption","namespace","charAt","toUpperCase","slice","toLowerCase","qq","FineUploader","dataStore","key","val","data","undefined","instanceToStore","option","optionVal","transformedOpts","callbacks","each","_options","prop","nonJqueryCallback","name","callbackEventTarget","exec","substring","originalArgs","Array","prototype","call","arguments","transformedArgs","nonJqueryCallbackRetVal","jqueryEventCallbackRetVal","idx","arg","push","maybeWrapInJquery","apply","this","triggerHandler","error","log","message","source","dest","xformed","arrayVals","element","inArray","isPlainObject","isArray","arrayVal","arrayObjDest","merge","isValidCommand","command","type","match","delegateCommand","xformedArgs","origArgs","retVal","transformedVal","nodeType","cloneNode","fn","fineUploader","optionsOrCommand","self","selfArgs","retVals","index","el","length","jQuery","rootDataKey","dropZoneElements","dnd","DragAndDrop","func","$callbackEl","args","jqueryHandlerResult","fineUploaderDnd","hide","style","display","attach","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","getFirstByClass","children","child","firstChild","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","getAttribute","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","Uint8Array","character","charCodeAt","level","console","isObject","variable","Object","toString","isFunction","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","newStr","nextIdxToReplace","strBefore","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","override","target","sourceFn","super_","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","Storage","getItem","bind","oldFunc","context","newArgs","concat","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","disposeSupport","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_onDeleteComplete","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","UploadHandlerController","_fileOrBlobRejected","_formatSize","max","toFixed","sizeSymbols","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","expunge","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","errorMessage","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","paramsInBody","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partIndex","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","alreadyInWaiting","alreadyInOpen","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","getIframeContentJson","doc","innerHtml","contentWindow","nodeValue","createForm","responseFromMessage","multipart","addChunkingSpecificParams","allChunksDoneRequester","AllChunksDoneAjaxRequester","createReadyStateChangedHandler","onUploadOrChunkComplete","getChunksCompleteParams","isErrorUploadResponse","parseResponse","sendChunksCompleteRequest","complete","setParamsAndGetEntityToSend","setUploadHeaders","extraHeaders","toSend","promises","endpointHandler","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","content","createDocumentFragment","map","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","update","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"jquery.fine-uploader.js","sourcesContent":[null,"/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var $el,\n        pluginOptions = [\"uploaderType\", \"endpointType\"];\n\n    function init(options) {\n        var xformedOpts = transformVariables(options || {}),\n            newUploaderInstance = getNewUploaderInstance(xformedOpts);\n\n        uploader(newUploaderInstance);\n        addCallbacks(xformedOpts, newUploaderInstance);\n\n        return $el;\n    }\n\n    function getNewUploaderInstance(params) {\n        var uploaderType = pluginOption(\"uploaderType\"),\n            namespace = pluginOption(\"endpointType\");\n\n        // If the integrator has defined a specific type of uploader to load, use that, otherwise assume `qq.FineUploader`\n        if (uploaderType) {\n            // We can determine the correct constructor function to invoke by combining \"FineUploader\"\n            // with the upper camel cased `uploaderType` value.\n            uploaderType = uploaderType.charAt(0).toUpperCase() + uploaderType.slice(1).toLowerCase();\n\n            if (namespace) {\n                return new qq[namespace][\"FineUploader\" + uploaderType](params);\n            }\n\n            return new qq[\"FineUploader\" + uploaderType](params);\n        }\n        else {\n            if (namespace) {\n                return new qq[namespace].FineUploader(params);\n            }\n\n            return new qq.FineUploader(params);\n        }\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(\"fineuploader\");\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(\"fineuploader\", data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    //the underlying Fine Uploader instance is stored in jQuery's data stored, associated with the element\n    // tied to this instance of the plug-in\n    function uploader(instanceToStore) {\n        return dataStore(\"uploader\", instanceToStore);\n    }\n\n    function pluginOption(option, optionVal) {\n        return dataStore(option, optionVal);\n    }\n\n    // Implement all callbacks defined in Fine Uploader as functions that trigger appropriately names events and\n    // return the result of executing the bound handler back to Fine Uploader\n    function addCallbacks(transformedOpts, newUploaderInstance) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(newUploaderInstance._options.callbacks, function(prop, nonJqueryCallback) {\n            var name, callbackEventTarget;\n\n            name = /^on(\\w+)/.exec(prop)[1];\n            name = name.substring(0, 1).toLowerCase() + name.substring(1);\n            callbackEventTarget = $el;\n\n            callbacks[prop] = function() {\n                var originalArgs = Array.prototype.slice.call(arguments),\n                    transformedArgs = [],\n                    nonJqueryCallbackRetVal, jqueryEventCallbackRetVal;\n\n                $.each(originalArgs, function(idx, arg) {\n                    transformedArgs.push(maybeWrapInJquery(arg));\n                });\n\n                nonJqueryCallbackRetVal = nonJqueryCallback.apply(this, originalArgs);\n\n                try {\n                    jqueryEventCallbackRetVal = callbackEventTarget.triggerHandler(name, transformedArgs);\n                }\n                catch (error) {\n                    qq.log(\"Caught error in Fine Uploader jQuery event handler: \" + error.message, \"error\");\n                }\n\n                /*jshint -W116*/\n                if (nonJqueryCallbackRetVal != null) {\n                    return nonJqueryCallbackRetVal;\n                }\n                return jqueryEventCallbackRetVal;\n            };\n        });\n\n        newUploaderInstance._options.callbacks = callbacks;\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            if (source.uploaderType !== \"basic\") {\n                xformed = { element: $el[0] };\n            }\n            else {\n                xformed = {};\n            }\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if ($.inArray(prop, pluginOptions) >= 0) {\n                pluginOption(prop, val);\n            }\n            else if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    var arrayObjDest = {};\n\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else if ($.isPlainObject(arrayVal)) {\n                        transformVariables(arrayVal, arrayObjDest);\n                        arrayVals.push(arrayObjDest);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            !command.match(/^_/) && //enforce private methods convention\n            uploader()[command] !== undefined;\n    }\n\n    // Assuming we have already verified that this is a valid command, call the associated function in the underlying\n    // Fine Uploader instance (passing along the arguments from the caller) and return the result of the call back to the caller\n    function delegateCommand(command) {\n        var xformedArgs = [],\n            origArgs = Array.prototype.slice.call(arguments, 1),\n            retVal;\n\n        transformVariables(origArgs, xformedArgs);\n\n        retVal = uploader()[command].apply(uploader(), xformedArgs);\n\n        return maybeWrapInJquery(retVal);\n    }\n\n    // If the value is an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n    function maybeWrapInJquery(val) {\n        var transformedVal = val;\n\n        // If the command is returning an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n        /*jshint -W116*/\n        if (val != null && typeof val === \"object\" &&\n           (val.nodeType === 1 || val.nodeType === 9) && val.cloneNode) {\n\n            transformedVal = $(val);\n        }\n\n        return transformedVal;\n    }\n\n    $.fn.fineUploader = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (uploader() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist on jQuery.fineUploader\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var rootDataKey = \"fineUploaderDnd\",\n        $el;\n\n    function init(options) {\n        if (!options) {\n            options = {};\n        }\n\n        options.dropZoneElements = [$el];\n        var xformedOpts = transformVariables(options);\n        addCallbacks(xformedOpts);\n        dnd(new qq.DragAndDrop(xformedOpts));\n\n        return $el;\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(rootDataKey);\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(rootDataKey, data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    function dnd(instanceToStore) {\n        return dataStore(\"dndInstance\", instanceToStore);\n    }\n\n    function addCallbacks(transformedOpts) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(new qq.DragAndDrop.callbacks(), function(prop, func) {\n            var name = prop,\n                $callbackEl;\n\n            $callbackEl = $el;\n\n            callbacks[prop] = function() {\n                var args = Array.prototype.slice.call(arguments),\n                    jqueryHandlerResult = $callbackEl.triggerHandler(name, args);\n\n                return jqueryHandlerResult;\n            };\n        });\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            xformed = {};\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            command === \"dispose\" &&\n            dnd()[command] !== undefined;\n    }\n\n    function delegateCommand(command) {\n        var xformedArgs = [], origArgs = Array.prototype.slice.call(arguments, 1);\n        transformVariables(origArgs, xformedArgs);\n        return dnd()[command].apply(dnd(), xformedArgs);\n    }\n\n    $.fn.fineUploaderDnd = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (dnd() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist in Fine Uploader's DnD module.\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\r\nqq.version = \"5.11.9patchs\";\r\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\r\n/**\r\n * Defines the public API for FineUploaderBasic mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.basePublicApi = {\r\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\r\n        addBlobs: function(blobDataOrArray, params, endpoint) {\r\n            this.addFiles(blobDataOrArray, params, endpoint);\r\n        },\r\n\r\n        addInitialFiles: function(cannedFileList) {\r\n            var self = this;\r\n\r\n            qq.each(cannedFileList, function(index, cannedFile) {\r\n                self._addCannedFile(cannedFile);\r\n            });\r\n        },\r\n\r\n        addFiles: function(data, params, endpoint) {\r\n            this._maybeHandleIos8SafariWorkaround();\r\n\r\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\r\n\r\n                processBlob = qq.bind(function(blob) {\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processBlobData = qq.bind(function(blobData) {\r\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvas = qq.bind(function(canvas) {\r\n                    var blob = qq.canvasToBlob(canvas);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName + \".png\"\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvasData = qq.bind(function(canvasData) {\r\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\r\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: canvasData.name\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processFileOrInput = qq.bind(function(fileOrInput) {\r\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\r\n                        var files = Array.prototype.slice.call(fileOrInput.files),\r\n                            self = this;\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            self._handleNewFile(file, batchId, verifiedFiles);\r\n                        });\r\n                    }\r\n                    else {\r\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\r\n                    }\r\n                }, this),\r\n\r\n                normalizeData = function() {\r\n                    if (qq.isFileList(data)) {\r\n                        data = Array.prototype.slice.call(data);\r\n                    }\r\n                    data = [].concat(data);\r\n                },\r\n\r\n                self = this,\r\n                verifiedFiles = [];\r\n\r\n            this._currentBatchId = batchId;\r\n\r\n            if (data) {\r\n                normalizeData();\r\n\r\n                qq.each(data, function(idx, fileContainer) {\r\n                    if (qq.isFileOrInput(fileContainer)) {\r\n                        processFileOrInput(fileContainer);\r\n                    }\r\n                    else if (qq.isBlob(fileContainer)) {\r\n                        processBlob(fileContainer);\r\n                    }\r\n                    else if (qq.isObject(fileContainer)) {\r\n                        if (fileContainer.blob && fileContainer.name) {\r\n                            processBlobData(fileContainer);\r\n                        }\r\n                        else if (fileContainer.canvas && fileContainer.name) {\r\n                            processCanvasData(fileContainer);\r\n                        }\r\n                    }\r\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\r\n                        processCanvas(fileContainer);\r\n                    }\r\n                    else {\r\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\r\n                    }\r\n                });\r\n\r\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\r\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\r\n            }\r\n        },\r\n\r\n        cancel: function(id) {\r\n            this._handler.cancel(id);\r\n        },\r\n\r\n        cancelAll: function() {\r\n            var storedIdsCopy = [],\r\n                self = this;\r\n\r\n            qq.extend(storedIdsCopy, this._storedIds);\r\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\r\n                self.cancel(storedFileId);\r\n            });\r\n\r\n            this._handler.cancelAll();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._storedIds = [];\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (uploadData.status === qq.status.PAUSED) {\r\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\r\n                this._uploadFile(id);\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        deleteFile: function(id) {\r\n            return this._onSubmitDelete(id);\r\n        },\r\n\r\n        // TODO document?\r\n        doesExist: function(fileOrBlobId) {\r\n            return this._handler.isValid(fileOrBlobId);\r\n        },\r\n\r\n        // Generate a variable size thumbnail on an img or canvas,\r\n        // returning a promise that is fulfilled when the attempt completes.\r\n        // Thumbnail can either be based off of a URL for an image returned\r\n        // by the server in the upload response, or the associated `Blob`.\r\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\r\n            var promiseToReturn = new qq.Promise(),\r\n                fileOrUrl, options;\r\n\r\n            if (this._imageGenerator) {\r\n                fileOrUrl = this._thumbnailUrls[fileId];\r\n                options = {\r\n                    customResizeFunction: customResizeFunction,\r\n                    maxSize: maxSize > 0 ? maxSize : null,\r\n                    scale: maxSize > 0\r\n                };\r\n\r\n                // If client-side preview generation is possible\r\n                // and we are not specifically looking for the image URl returned by the server...\r\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\r\n                    fileOrUrl = this.getFile(fileId);\r\n                }\r\n\r\n                /* jshint eqeqeq:false,eqnull:true */\r\n                if (fileOrUrl == null) {\r\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\r\n                }\r\n                else {\r\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\r\n                        function success(modifiedContainer) {\r\n                            promiseToReturn.success(modifiedContainer);\r\n                        },\r\n\r\n                        function failure(container, reason) {\r\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n            else {\r\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\r\n            }\r\n\r\n            return promiseToReturn;\r\n        },\r\n\r\n        getButton: function(fileId) {\r\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\r\n        },\r\n\r\n        getEndpoint: function(fileId) {\r\n            return this._endpointStore.get(fileId);\r\n        },\r\n\r\n        getFile: function(fileOrBlobId) {\r\n            return this._handler.getFile(fileOrBlobId) || null;\r\n        },\r\n\r\n        getInProgress: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        getName: function(id) {\r\n            return this._uploadData.retrieve({id: id}).name;\r\n        },\r\n\r\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\r\n        getParentId: function(id) {\r\n            var uploadDataEntry = this.getUploads({id: id}),\r\n                parentId = null;\r\n\r\n            if (uploadDataEntry) {\r\n                if (uploadDataEntry.parentId !== undefined) {\r\n                    parentId = uploadDataEntry.parentId;\r\n                }\r\n            }\r\n\r\n            return parentId;\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            return this._handler.getResumableFilesData();\r\n        },\r\n\r\n        getSize: function(id) {\r\n            return this._uploadData.retrieve({id: id}).size;\r\n        },\r\n\r\n        getNetUploads: function() {\r\n            return this._netUploaded;\r\n        },\r\n\r\n        getRemainingAllowedItems: function() {\r\n            var allowedItems = this._currentItemLimit;\r\n\r\n            if (allowedItems > 0) {\r\n                return allowedItems - this._netUploadedOrQueued;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        getUploads: function(optionalFilter) {\r\n            return this._uploadData.retrieve(optionalFilter);\r\n        },\r\n\r\n        getUuid: function(id) {\r\n            return this._uploadData.retrieve({id: id}).uuid;\r\n        },\r\n\r\n        log: function(str, level) {\r\n            if (this._options.debug && (!level || level === \"info\")) {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\r\n            }\r\n            else if (level && level !== \"info\") {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\r\n\r\n            }\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            // Pause only really makes sense if the file is uploading or retrying\r\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\r\n                if (this._handler.pause(id)) {\r\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\r\n                }\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        reset: function() {\r\n            this.log(\"Resetting uploader...\");\r\n\r\n            this._handler.reset();\r\n            this._storedIds = [];\r\n            this._autoRetries = [];\r\n            this._retryTimeouts = [];\r\n            this._preventRetries = [];\r\n            this._thumbnailUrls = [];\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n\r\n            this._paramsStore.reset();\r\n            this._endpointStore.reset();\r\n            this._netUploadedOrQueued = 0;\r\n            this._netUploaded = 0;\r\n            this._uploadData.reset();\r\n            this._buttonIdsForFileIds = [];\r\n\r\n            this._pasteHandler && this._pasteHandler.reset();\r\n            this._options.session.refreshOnReset && this._refreshSessionData();\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n\r\n            this._totalProgress && this._totalProgress.reset();\r\n        },\r\n\r\n        retry: function(id) {\r\n            return this._manualRetry(id);\r\n        },\r\n\r\n        scaleImage: function(id, specs) {\r\n            var self = this;\r\n\r\n            return qq.Scaler.prototype.scaleImage(id, specs, {\r\n                log: qq.bind(self.log, self),\r\n                getFile: qq.bind(self.getFile, self),\r\n                uploadData: self._uploadData\r\n            });\r\n        },\r\n\r\n        setCustomHeaders: function(headers, id) {\r\n            this._customHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileCustomHeaders: function(headers, id) {\r\n            this._deleteFileCustomHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileEndpoint: function(endpoint, id) {\r\n            this._deleteFileEndpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setDeleteFileParams: function(params, id) {\r\n            this._deleteFileParamsStore.set(params, id);\r\n        },\r\n\r\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\r\n        setEndpoint: function(endpoint, id) {\r\n            this._endpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setForm: function(elementOrId) {\r\n            this._updateFormSupportAndParams(elementOrId);\r\n        },\r\n\r\n        setItemLimit: function(newItemLimit) {\r\n            this._currentItemLimit = newItemLimit;\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            this._uploadData.updateName(id, newName);\r\n        },\r\n\r\n        setParams: function(params, id) {\r\n            this._paramsStore.set(params, id);\r\n        },\r\n\r\n        setUuid: function(id, newUuid) {\r\n            return this._uploadData.uuidChanged(id, newUuid);\r\n        },\r\n\r\n        uploadStoredFiles: function() {\r\n            if (this._storedIds.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n            }\r\n            else {\r\n                this._uploadStoredFiles();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploaderBasic mode.\r\n     */\r\n    qq.basePrivateApi = {\r\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._uploadData.addFile({\r\n                uuid: sessionData.uuid,\r\n                name: sessionData.name,\r\n                size: sessionData.size,\r\n                status: qq.status.UPLOAD_SUCCESSFUL\r\n            });\r\n\r\n            sessionData.deleteFileEndpoint && this.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\r\n            sessionData.deleteFileParams && this.setDeleteFileParams(sessionData.deleteFileParams, id);\r\n\r\n            if (sessionData.thumbnailUrl) {\r\n                this._thumbnailUrls[id] = sessionData.thumbnailUrl;\r\n            }\r\n\r\n            this._netUploaded++;\r\n            this._netUploadedOrQueued++;\r\n\r\n            return id;\r\n        },\r\n\r\n        _annotateWithButtonId: function(file, associatedInput) {\r\n            if (qq.isFile(file)) {\r\n                file.qqButtonId = this._getButtonId(associatedInput);\r\n            }\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._options.callbacks.onError(null, null, message, undefined);\r\n        },\r\n\r\n        _createDeleteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.DeleteFileAjaxRequester({\r\n                method: this._options.deleteFile.method.toUpperCase(),\r\n                maxConnections: this._options.maxConnections,\r\n                uuidParamName: this._options.request.uuidName,\r\n                customHeaders: this._deleteFileCustomHeadersStore,\r\n                paramsStore: this._deleteFileParamsStore,\r\n                endpointStore: this._deleteFileEndpointStore,\r\n                cors: this._options.cors,\r\n                log: qq.bind(self.log, self),\r\n                onDelete: function(id) {\r\n                    self._onDelete(id);\r\n                    self._options.callbacks.onDelete(id);\r\n                },\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\r\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        _createPasteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.PasteSupport({\r\n                targetElement: this._options.paste.targetElement,\r\n                callbacks: {\r\n                    log: qq.bind(self.log, self),\r\n                    pasteReceived: function(blob) {\r\n                        self._handleCheckedCallback({\r\n                            name: \"onPasteReceived\",\r\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\r\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\r\n                            identifier: \"pasted image\"\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _createStore: function(initialValue, _readOnlyValues_) {\r\n            var store = {},\r\n                catchall = initialValue,\r\n                perIdReadOnlyValues = {},\r\n                readOnlyValues = _readOnlyValues_,\r\n                copy = function(orig) {\r\n                    if (qq.isObject(orig)) {\r\n                        return qq.extend({}, orig);\r\n                    }\r\n                    return orig;\r\n                },\r\n                getReadOnlyValues = function() {\r\n                    if (qq.isFunction(readOnlyValues)) {\r\n                        return readOnlyValues();\r\n                    }\r\n                    return readOnlyValues;\r\n                },\r\n                includeReadOnlyValues = function(id, existing) {\r\n                    if (readOnlyValues && qq.isObject(existing)) {\r\n                        qq.extend(existing, getReadOnlyValues());\r\n                    }\r\n\r\n                    if (perIdReadOnlyValues[id]) {\r\n                        qq.extend(existing, perIdReadOnlyValues[id]);\r\n                    }\r\n                };\r\n\r\n            return {\r\n                set: function(val, id) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id == null) {\r\n                        store = {};\r\n                        catchall = copy(val);\r\n                    }\r\n                    else {\r\n                        store[id] = copy(val);\r\n                    }\r\n                },\r\n\r\n                get: function(id) {\r\n                    var values;\r\n\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id != null && store[id]) {\r\n                        values = store[id];\r\n                    }\r\n                    else {\r\n                        values = copy(catchall);\r\n                    }\r\n\r\n                    includeReadOnlyValues(id, values);\r\n\r\n                    return copy(values);\r\n                },\r\n\r\n                addReadOnly: function(id, values) {\r\n                    // Only applicable to Object stores\r\n                    if (qq.isObject(store)) {\r\n                        // If null ID, apply readonly values to all files\r\n                        if (id === null) {\r\n                            if (qq.isFunction(values)) {\r\n                                readOnlyValues = values;\r\n                            }\r\n                            else {\r\n                                readOnlyValues = readOnlyValues || {};\r\n                                qq.extend(readOnlyValues, values);\r\n                            }\r\n                        }\r\n                        else {\r\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\r\n                            qq.extend(perIdReadOnlyValues[id], values);\r\n                        }\r\n                    }\r\n                },\r\n\r\n                remove: function(fileId) {\r\n                    return delete store[fileId];\r\n                },\r\n\r\n                reset: function() {\r\n                    store = {};\r\n                    perIdReadOnlyValues = {};\r\n                    catchall = initialValue;\r\n                }\r\n            };\r\n        },\r\n\r\n        _createUploadDataTracker: function() {\r\n            var self = this;\r\n\r\n            return new qq.UploadData({\r\n                getName: function(id) {\r\n                    return self.getName(id);\r\n                },\r\n                getUuid: function(id) {\r\n                    return self.getUuid(id);\r\n                },\r\n                getSize: function(id) {\r\n                    return self.getSize(id);\r\n                },\r\n                onStatusChange: function(id, oldStatus, newStatus) {\r\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\r\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\r\n                    self._maybeAllComplete(id, newStatus);\r\n\r\n                    if (self._totalProgress) {\r\n                        setTimeout(function() {\r\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\r\n                        }, 0);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Generate a tracked upload button.\r\n         *\r\n         * @param spec Object containing a required `element` property\r\n         * along with optional `multiple`, `accept`, and `folders`.\r\n         * @returns {qq.UploadButton}\r\n         * @private\r\n         */\r\n        _createUploadButton: function(spec) {\r\n            var self = this,\r\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\r\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\r\n                button;\r\n\r\n            function allowMultiple() {\r\n                if (qq.supportedFeatures.ajaxUploading) {\r\n                    // Workaround for bug in iOS7+ (see #1039)\r\n                    if (self._options.workarounds.iosEmptyVideos &&\r\n                        qq.ios() &&\r\n                        !qq.ios6() &&\r\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\r\n\r\n                        return false;\r\n                    }\r\n\r\n                    if (spec.multiple === undefined) {\r\n                        return self._options.multiple;\r\n                    }\r\n\r\n                    return spec.multiple;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            button = new qq.UploadButton({\r\n                acceptFiles: acceptFiles,\r\n                element: spec.element,\r\n                focusClass: this._options.classes.buttonFocus,\r\n                folders: spec.folders,\r\n                hoverClass: this._options.classes.buttonHover,\r\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\r\n                multiple: allowMultiple(),\r\n                name: this._options.request.inputName,\r\n                onChange: function(input) {\r\n                    self._onInputChange(input);\r\n                },\r\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\r\n            });\r\n\r\n            this._disposeSupport.addDisposer(function() {\r\n                button.dispose();\r\n            });\r\n\r\n            self._buttons.push(button);\r\n\r\n            return button;\r\n        },\r\n\r\n        _createUploadHandler: function(additionalOptions, namespace) {\r\n            var self = this,\r\n                lastOnProgress = {},\r\n                options = {\r\n                    debug: this._options.debug,\r\n                    maxConnections: this._options.maxConnections,\r\n                    cors: this._options.cors,\r\n                    paramsStore: this._paramsStore,\r\n                    endpointStore: this._endpointStore,\r\n                    chunking: this._options.chunking,\r\n                    resume: this._options.resume,\r\n                    blobs: this._options.blobs,\r\n                    log: qq.bind(self.log, self),\r\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\r\n                    onProgress: function(id, name, loaded, total) {\r\n                        if (loaded < 0 || total < 0) {\r\n                            return;\r\n                        }\r\n\r\n                        if (lastOnProgress[id]) {\r\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\r\n                                self._onProgress(id, name, loaded, total);\r\n                                self._options.callbacks.onProgress(id, name, loaded, total);\r\n                            }\r\n                        }\r\n                        else {\r\n                            self._onProgress(id, name, loaded, total);\r\n                            self._options.callbacks.onProgress(id, name, loaded, total);\r\n                        }\r\n\r\n                        lastOnProgress[id] = {loaded: loaded, total: total};\r\n\r\n                    },\r\n                    onComplete: function(id, name, result, xhr) {\r\n                        delete lastOnProgress[id];\r\n\r\n                        var status = self.getUploads({id: id}).status,\r\n                            retVal;\r\n\r\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\r\n                        // invoked by the browser multiple times for the same XHR instance with the same state\r\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\r\n                        // done this.\r\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\r\n                            return;\r\n                        }\r\n\r\n                        retVal = self._onComplete(id, name, result, xhr);\r\n\r\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\r\n                        // until the promise has been fulfilled.\r\n                        if (retVal instanceof  qq.Promise) {\r\n                            retVal.done(function() {\r\n                                self._options.callbacks.onComplete(id, name, result, xhr);\r\n                            });\r\n                        }\r\n                        else {\r\n                            self._options.callbacks.onComplete(id, name, result, xhr);\r\n                        }\r\n                    },\r\n                    onCancel: function(id, name, cancelFinalizationEffort) {\r\n                        var promise = new qq.Promise();\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onCancel\",\r\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\r\n                            onFailure: promise.failure,\r\n                            onSuccess: function() {\r\n                                cancelFinalizationEffort.then(function() {\r\n                                    self._onCancel(id, name);\r\n                                });\r\n\r\n                                promise.success();\r\n                            },\r\n                            identifier: id\r\n                        });\r\n\r\n                        return promise;\r\n                    },\r\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\r\n                    onUpload: function(id, name) {\r\n                        self._onUpload(id, name);\r\n                        self._options.callbacks.onUpload(id, name);\r\n                    },\r\n                    onUploadChunk: function(id, name, chunkData) {\r\n                        self._onUploadChunk(id, chunkData);\r\n                        self._options.callbacks.onUploadChunk(id, name, chunkData);\r\n                    },\r\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\r\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\r\n                    },\r\n                    onResume: function(id, name, chunkData) {\r\n                        return self._options.callbacks.onResume(id, name, chunkData);\r\n                    },\r\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\r\n                        return self._onAutoRetry.apply(self, arguments);\r\n                    },\r\n                    onUuidChanged: function(id, newUuid) {\r\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\r\n                        self.setUuid(id, newUuid);\r\n                    },\r\n                    getName: qq.bind(self.getName, self),\r\n                    getUuid: qq.bind(self.getUuid, self),\r\n                    getSize: qq.bind(self.getSize, self),\r\n                    setSize: qq.bind(self._setSize, self),\r\n                    getDataByUuid: function(uuid) {\r\n                        return self.getUploads({uuid: uuid});\r\n                    },\r\n                    isQueued: function(id) {\r\n                        var status = self.getUploads({id: id}).status;\r\n                        return status === qq.status.QUEUED ||\r\n                            status === qq.status.SUBMITTED ||\r\n                            status === qq.status.UPLOAD_RETRYING ||\r\n                            status === qq.status.PAUSED;\r\n                    },\r\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\r\n                    getIdsInBatch: self._uploadData.getIdsInBatch\r\n                };\r\n\r\n            qq.each(this._options.request, function(prop, val) {\r\n                options[prop] = val;\r\n            });\r\n\r\n            options.customHeaders = this._customHeadersStore;\r\n\r\n            if (additionalOptions) {\r\n                qq.each(additionalOptions, function(key, val) {\r\n                    options[key] = val;\r\n                });\r\n            }\r\n\r\n            return new qq.UploadHandlerController(options, namespace);\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id) {\r\n            this._netUploadedOrQueued--;\r\n            this._uploadData.setStatus(id, qq.status.REJECTED);\r\n        },\r\n\r\n        _formatSize: function(bytes) {\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1000;\r\n                i++;\r\n            } while (bytes > 999);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\r\n        },\r\n\r\n        // Creates an internal object that tracks various properties of each extra button,\r\n        // and then actually creates the extra button.\r\n        _generateExtraButtonSpecs: function() {\r\n            var self = this;\r\n\r\n            this._extraButtonSpecs = {};\r\n\r\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\r\n                var multiple = extraButtonOptionEntry.multiple,\r\n                    validation = qq.extend({}, self._options.validation, true),\r\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\r\n\r\n                if (multiple === undefined) {\r\n                    multiple = self._options.multiple;\r\n                }\r\n\r\n                if (extraButtonSpec.validation) {\r\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\r\n                }\r\n\r\n                qq.extend(extraButtonSpec, {\r\n                    multiple: multiple,\r\n                    validation: validation\r\n                }, true);\r\n\r\n                self._initExtraButton(extraButtonSpec);\r\n            });\r\n        },\r\n\r\n        _getButton: function(buttonId) {\r\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            if (extraButtonsSpec) {\r\n                return extraButtonsSpec.element;\r\n            }\r\n            else if (buttonId === this._defaultButtonId) {\r\n                return this._options.button;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the internally used tracking ID for a button.\r\n         *\r\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\r\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\r\n         * @private\r\n         */\r\n        _getButtonId: function(buttonOrFileInputOrFile) {\r\n            var inputs, fileInput,\r\n                fileBlobOrInput = buttonOrFileInputOrFile;\r\n\r\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\r\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\r\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\r\n            }\r\n\r\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\r\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\r\n                if (qq.isFile(fileBlobOrInput)) {\r\n                    return fileBlobOrInput.qqButtonId;\r\n                }\r\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\r\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\r\n\r\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n\r\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\r\n\r\n                qq.each(inputs, function(idx, input) {\r\n                    if (input.getAttribute(\"type\") === \"file\") {\r\n                        fileInput = input;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                if (fileInput) {\r\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n            }\r\n        },\r\n\r\n        _getNotFinished: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED,\r\n                    qq.status.SUBMITTING,\r\n                    qq.status.SUBMITTED,\r\n                    qq.status.PAUSED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        // Get the validation options for this button.  Could be the default validation option\r\n        // or a specific one assigned to this particular button.\r\n        _getValidationBase: function(buttonId) {\r\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\r\n        },\r\n\r\n        _getValidationDescriptor: function(fileWrapper) {\r\n            if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                return {\r\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\r\n                    size: fileWrapper.file.referenceBlob.size\r\n                };\r\n            }\r\n\r\n            return {\r\n                name: this.getUploads({id: fileWrapper.id}).name,\r\n                size: this.getUploads({id: fileWrapper.id}).size\r\n            };\r\n        },\r\n\r\n        _getValidationDescriptors: function(fileWrappers) {\r\n            var self = this,\r\n                fileDescriptors = [];\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\r\n            });\r\n\r\n            return fileDescriptors;\r\n        },\r\n\r\n        // Allows camera access on either the default or an extra button for iOS devices.\r\n        _handleCameraAccess: function() {\r\n            if (this._options.camera.ios && qq.ios()) {\r\n                var acceptIosCamera = \"image/*;capture=camera\",\r\n                    button = this._options.camera.button,\r\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\r\n                    optionRoot = this._options;\r\n\r\n                // If we are not targeting the default button, it is an \"extra\" button\r\n                if (buttonId && buttonId !== this._defaultButtonId) {\r\n                    optionRoot = this._extraButtonSpecs[buttonId];\r\n                }\r\n\r\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\r\n                optionRoot.multiple = false;\r\n\r\n                // update the options\r\n                if (optionRoot.validation.acceptFiles === null) {\r\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\r\n                }\r\n                else {\r\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\r\n                }\r\n\r\n                // update the already-created button\r\n                qq.each(this._buttons, function(idx, button) {\r\n                    if (button.getButtonId() === buttonId) {\r\n                        button.setMultiple(optionRoot.multiple);\r\n                        button.setAcceptFiles(optionRoot.acceptFiles);\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        _handleCheckedCallback: function(details) {\r\n            var self = this,\r\n                callbackRetVal = details.callback();\r\n\r\n            if (qq.isGenericPromise(callbackRetVal)) {\r\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\r\n                return callbackRetVal.then(\r\n                    function(successParam) {\r\n                        self.log(details.name + \" promise success for \" + details.identifier);\r\n                        details.onSuccess(successParam);\r\n                    },\r\n                    function() {\r\n                        if (details.onFailure) {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                            details.onFailure();\r\n                        }\r\n                        else {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            if (callbackRetVal !== false) {\r\n                details.onSuccess(callbackRetVal);\r\n            }\r\n            else {\r\n                if (details.onFailure) {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\r\n                    details.onFailure();\r\n                }\r\n                else {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\r\n                }\r\n            }\r\n\r\n            return callbackRetVal;\r\n        },\r\n\r\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\r\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\r\n            var self = this,\r\n                uuid = qq.getUniqueId(),\r\n                size = -1,\r\n                name = qq.getFilename(file),\r\n                actualFile = file.blob || file,\r\n                handler = this._customNewFileHandler ?\r\n                    this._customNewFileHandler :\r\n                    qq.bind(self._handleNewFileGeneric, self);\r\n\r\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\r\n                size = actualFile.size;\r\n            }\r\n\r\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\r\n                uploadData: self._uploadData,\r\n                paramsStore: self._paramsStore,\r\n                addFileToHandler: function(id, file) {\r\n                    self._handler.add(id, file);\r\n                    self._netUploadedOrQueued++;\r\n                    self._trackButton(id);\r\n                }\r\n            });\r\n        },\r\n\r\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\r\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\r\n\r\n            this._handler.add(id, file);\r\n            this._trackButton(id);\r\n\r\n            this._netUploadedOrQueued++;\r\n\r\n            fileList.push({id: id, file: file});\r\n        },\r\n\r\n        _handlePasteSuccess: function(blob, extSuppliedName) {\r\n            var extension = blob.type.split(\"/\")[1],\r\n                name = extSuppliedName;\r\n\r\n            /*jshint eqeqeq: true, eqnull: true*/\r\n            if (name == null) {\r\n                name = this._options.paste.defaultName;\r\n            }\r\n\r\n            name += \".\" + extension;\r\n\r\n            this.addFiles({\r\n                name: name,\r\n                blob: blob\r\n            });\r\n        },\r\n\r\n        // Creates an extra button element\r\n        _initExtraButton: function(spec) {\r\n            var button = this._createUploadButton({\r\n                accept: spec.validation.acceptFiles,\r\n                allowedExtensions: spec.validation.allowedExtensions,\r\n                element: spec.element,\r\n                folders: spec.folders,\r\n                multiple: spec.multiple,\r\n                title: spec.fileInputTitle\r\n            });\r\n\r\n            this._extraButtonSpecs[button.getButtonId()] = spec;\r\n        },\r\n\r\n        _initFormSupportAndParams: function() {\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n            );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore = this._createStore(\r\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\r\n                );\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\r\n                }\r\n            }\r\n            else {\r\n                this._paramsStore = this._createStore(this._options.request.params);\r\n            }\r\n        },\r\n\r\n        _isDeletePossible: function() {\r\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (this._options.cors.expected) {\r\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\r\n                    return true;\r\n                }\r\n\r\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _isAllowedExtension: function(allowed, fileName) {\r\n            var valid = false;\r\n\r\n            if (!allowed.length) {\r\n                return true;\r\n            }\r\n\r\n            qq.each(allowed, function(idx, allowedExt) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExt)) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\r\n\r\n                    if (fileName.match(extRegex) != null) {\r\n                        valid = true;\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return valid;\r\n        },\r\n\r\n        /**\r\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\r\n         *\r\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\r\n         * @param maybeNameOrNames names of the items that have failed, if applicable\r\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\r\n         * @private\r\n         */\r\n        _itemError: function(code, maybeNameOrNames, item) {\r\n            var message = this._options.messages[code],\r\n                allowedExtensions = [],\r\n                names = [].concat(maybeNameOrNames),\r\n                name = names[0],\r\n                buttonId = this._getButtonId(item),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                extensionsForMessage, placeholderMatch;\r\n\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExtension)) {\r\n                    allowedExtensions.push(allowedExtension);\r\n                }\r\n            });\r\n\r\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\r\n\r\n            r(\"{file}\", this._options.formatFileName(name));\r\n            r(\"{extensions}\", extensionsForMessage);\r\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\r\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\r\n\r\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\r\n            if (placeholderMatch !== null) {\r\n                qq.each(placeholderMatch, function(idx, placeholder) {\r\n                    r(placeholder, names[idx]);\r\n                });\r\n            }\r\n\r\n            this._options.callbacks.onError(null, name, message, undefined);\r\n\r\n            return message;\r\n        },\r\n\r\n        /**\r\n         * Conditionally orders a manual retry of a failed upload.\r\n         *\r\n         * @param id File ID of the failed upload\r\n         * @param callback Optional callback to invoke if a retry is prudent.\r\n         * In lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if a manual retry will occur\r\n         * @private\r\n         */\r\n        _manualRetry: function(id, callback) {\r\n            if (this._onBeforeManualRetry(id)) {\r\n                this._netUploadedOrQueued++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n\r\n                if (callback) {\r\n                    callback(id);\r\n                }\r\n                else {\r\n                    this._handler.retry(id);\r\n                }\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _maybeAllComplete: function(id, status) {\r\n            var self = this,\r\n                notFinished = this._getNotFinished();\r\n\r\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\r\n                this._succeededSinceLastAllComplete.push(id);\r\n            }\r\n            else if (status === qq.status.UPLOAD_FAILED) {\r\n                this._failedSinceLastAllComplete.push(id);\r\n            }\r\n\r\n            if (notFinished === 0 &&\r\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\r\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\r\n                setTimeout(function() {\r\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _maybeHandleIos8SafariWorkaround: function() {\r\n            var self = this;\r\n\r\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\r\n                setTimeout(function() {\r\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\r\n                }, 0);\r\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\r\n            }\r\n        },\r\n\r\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\r\n            // Assuming no one will actually set the response code to something other than 200\r\n            // and still set 'success' to true...\r\n            if (!response.success) {\r\n                if (xhr && xhr.status !== 200 && !response.error) {\r\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\r\n                }\r\n                else {\r\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\r\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\r\n            var self = this;\r\n\r\n            if (items.length > index) {\r\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\r\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\r\n                    setTimeout(function() {\r\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\r\n                            buttonId = self._getButtonId(items[index].file),\r\n                            button = self._getButton(buttonId);\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onValidate\",\r\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\r\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\r\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\r\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\r\n                        });\r\n                    }, 0);\r\n                }\r\n                else if (!validItem) {\r\n                    for (; index < items.length; index++) {\r\n                        self._fileOrBlobRejected(items[index].id);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\r\n\r\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n        },\r\n\r\n        /**\r\n         * Attempt to automatically retry a failed upload.\r\n         *\r\n         * @param id The file ID of the failed upload\r\n         * @param name The name of the file associated with the failed upload\r\n         * @param responseJSON Response from the server, parsed into a javascript object\r\n         * @param xhr Ajax transport used to send the failed request\r\n         * @param callback Optional callback to be invoked if a retry is prudent.\r\n         * Invoked in lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if an auto-retry will occur\r\n         * @private\r\n         */\r\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\r\n            var self = this;\r\n\r\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\r\n\r\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\r\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\r\n\r\n                self._maybeParseAndSendUploadError.apply(self, arguments);\r\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\r\n                self._onBeforeAutoRetry(id, name);\r\n\r\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n                self._retryTimeouts[id] = setTimeout(function() {\r\n                    self.log(\"Starting retry for \" + name + \"...\");\r\n\r\n                    if (callback) {\r\n                        callback(id);\r\n                    }\r\n                    else {\r\n                        self._handler.retry(id);\r\n                    }\r\n                }, retryWaitPeriod);\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id, name) {\r\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            var itemLimit = this._currentItemLimit,\r\n                fileName;\r\n\r\n            if (this._preventRetries[id]) {\r\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\r\n                return false;\r\n            }\r\n            else if (this._handler.isValid(id)) {\r\n                fileName = this.getName(id);\r\n\r\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\r\n                    return false;\r\n                }\r\n\r\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\r\n                    this._itemError(\"retryFailTooManyItems\");\r\n                    return false;\r\n                }\r\n\r\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._netUploadedOrQueued--;\r\n\r\n            clearTimeout(this._retryTimeouts[id]);\r\n\r\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\r\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\r\n                this._storedIds.splice(storedItemIndex, 1);\r\n            }\r\n\r\n            this._uploadData.setStatus(id, qq.status.CANCELED);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            if (!result.success) {\r\n                this._netUploadedOrQueued--;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\r\n\r\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\r\n                    this._preventRetries[id] = true;\r\n                }\r\n            }\r\n            else {\r\n                if (result.thumbnailUrl) {\r\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\r\n                }\r\n\r\n                this._netUploaded++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\r\n            }\r\n\r\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\r\n\r\n            return result.success ? true : false;\r\n        },\r\n\r\n        _onDelete: function(id) {\r\n            this._uploadData.setStatus(id, qq.status.DELETING);\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n            var name = this.getName(id);\r\n\r\n            if (isError) {\r\n                this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\r\n                this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\r\n\r\n                // For error reporting, we only have access to the response status if this is not\r\n                // an `XDomainRequest`.\r\n                if (xhrOrXdr.withCredentials === undefined) {\r\n                    this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\r\n                }\r\n                else {\r\n                    this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\r\n                }\r\n            }\r\n            else {\r\n                this._netUploadedOrQueued--;\r\n                this._netUploaded--;\r\n                this._handler.expunge(id);\r\n                this._uploadData.setStatus(id, qq.status.DELETED);\r\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\r\n            }\r\n        },\r\n\r\n        _onInputChange: function(input) {\r\n            var fileIndex;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\r\n                    this._annotateWithButtonId(input.files[fileIndex], input);\r\n                }\r\n\r\n                this.addFiles(input.files);\r\n            }\r\n            // Android 2.3.x will fire `onchange` even if no file has been selected\r\n            else if (input.value.length > 0) {\r\n                this.addFiles(input);\r\n            }\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n        },\r\n\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            //nothing to do yet in core uploader\r\n        },\r\n\r\n        _onSubmitCallbackSuccess: function(id, name) {\r\n            this._onSubmit.apply(this, arguments);\r\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\r\n            this._onSubmitted.apply(this, arguments);\r\n\r\n            if (this._options.autoUpload) {\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n                this._uploadFile(id);\r\n            }\r\n            else {\r\n                this._storeForLater(id);\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\r\n            var uuid = this.getUuid(id),\r\n                adjustedOnSuccessCallback;\r\n\r\n            if (onSuccessCallback) {\r\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\r\n            }\r\n\r\n            if (this._isDeletePossible()) {\r\n                this._handleCheckedCallback({\r\n                    name: \"onSubmitDelete\",\r\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\r\n                    onSuccess: adjustedOnSuccessCallback ||\r\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\r\n                    identifier: id\r\n                });\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\r\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitted: function(id) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._options.callbacks.onTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            // nothing to do in the core uploader for now\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\r\n            if (newStatus === qq.status.PAUSED) {\r\n                clearTimeout(this._retryTimeouts[id]);\r\n            }\r\n        },\r\n\r\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\r\n            var self = this;\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                self._fileOrBlobRejected(fileWrapper.id);\r\n            });\r\n        },\r\n\r\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\r\n            var errorMessage,\r\n                itemLimit = this._currentItemLimit,\r\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\r\n\r\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\r\n                if (items.length > 0) {\r\n                    this._handleCheckedCallback({\r\n                        name: \"onValidate\",\r\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\r\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\r\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\r\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\r\n                    });\r\n                }\r\n                else {\r\n                    this._itemError(\"noFilesError\");\r\n                }\r\n            }\r\n            else {\r\n                this._onValidateBatchCallbackFailure(items);\r\n                errorMessage = this._options.messages.tooManyItemsError\r\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\r\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\r\n                this._batchError(errorMessage);\r\n            }\r\n        },\r\n\r\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\r\n            var nextIndex = index + 1;\r\n\r\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\r\n\r\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n        },\r\n\r\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\r\n            var self = this,\r\n                nextIndex = index + 1,\r\n                validationDescriptor = this._getValidationDescriptor(items[index]);\r\n\r\n            this._validateFileOrBlobData(items[index], validationDescriptor)\r\n                .then(\r\n                function() {\r\n                    self._upload(items[index].id, params, endpoint);\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\r\n                },\r\n                function() {\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n                }\r\n            );\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            if (items.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n                return;\r\n            }\r\n\r\n            var validationDescriptors = this._getValidationDescriptors(items),\r\n                buttonId = this._getButtonId(items[0].file),\r\n                button = this._getButton(buttonId);\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onValidateBatch\",\r\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\r\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\r\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\r\n                identifier: \"batch validation\"\r\n            });\r\n        },\r\n\r\n        _preventLeaveInProgress: function() {\r\n            var self = this;\r\n\r\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\r\n                if (self.getInProgress()) {\r\n                    e = e || window.event;\r\n                    // for ie, ff\r\n                    e.returnValue = self._options.messages.onLeave;\r\n                    // for webkit\r\n                    return self._options.messages.onLeave;\r\n                }\r\n            });\r\n        },\r\n\r\n        // Attempts to refresh session data only if the `qq.Session` module exists\r\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\r\n        // callback will be invoked once the refresh is complete.\r\n        _refreshSessionData: function() {\r\n            var self = this,\r\n                options = this._options.session;\r\n\r\n            /* jshint eqnull:true */\r\n            if (qq.Session && this._options.session.endpoint != null) {\r\n                if (!this._session) {\r\n                    qq.extend(options, {cors: this._options.cors});\r\n\r\n                    options.log = qq.bind(this.log, this);\r\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\r\n\r\n                    this._session = new qq.Session(options);\r\n                }\r\n\r\n                setTimeout(function() {\r\n                    self._session.refresh().then(function(response, xhrOrXdr) {\r\n                        self._sessionRequestComplete();\r\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\r\n\r\n                    }, function(response, xhrOrXdr) {\r\n\r\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\r\n                    });\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _sessionRequestComplete: function() {},\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._uploadData.updateSize(id, newSize);\r\n            this._totalProgress && this._totalProgress.onNewSize(id);\r\n        },\r\n\r\n        _shouldAutoRetry: function(id, name, responseJSON) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            /*jshint laxbreak: true */\r\n            if (!this._preventRetries[id]\r\n                && this._options.retry.enableAuto\r\n                && uploadData.status !== qq.status.PAUSED) {\r\n\r\n                if (this._autoRetries[id] === undefined) {\r\n                    this._autoRetries[id] = 0;\r\n                }\r\n\r\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\r\n                    this._autoRetries[id] += 1;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._storedIds.push(id);\r\n        },\r\n\r\n        // Maps a file with the button that was used to select it.\r\n        _trackButton: function(id) {\r\n            var buttonId;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                buttonId = this._handler.getFile(id).qqButtonId;\r\n            }\r\n            else {\r\n                buttonId = this._getButtonId(this._handler.getInput(id));\r\n            }\r\n\r\n            if (buttonId) {\r\n                this._buttonIdsForFileIds[id] = buttonId;\r\n            }\r\n        },\r\n\r\n        _updateFormSupportAndParams: function(formElementOrId) {\r\n            this._options.form.element = formElementOrId;\r\n\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n                );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this.setEndpoint(this._formSupport.newEndpoint);\r\n                }\r\n            }\r\n        },\r\n\r\n        _upload: function(id, params, endpoint) {\r\n            var name = this.getName(id);\r\n\r\n            if (params) {\r\n                this.setParams(params, id);\r\n            }\r\n\r\n            if (endpoint) {\r\n                this.setEndpoint(endpoint, id);\r\n            }\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onSubmit\",\r\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\r\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\r\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\r\n                identifier: id\r\n            });\r\n        },\r\n\r\n        _uploadFile: function(id) {\r\n            if (!this._handler.upload(id)) {\r\n                this._uploadData.setStatus(id, qq.status.QUEUED);\r\n            }\r\n        },\r\n\r\n        _uploadStoredFiles: function() {\r\n            var idToUpload, stillSubmitting,\r\n                self = this;\r\n\r\n            while (this._storedIds.length) {\r\n                idToUpload = this._storedIds.shift();\r\n                this._uploadFile(idToUpload);\r\n            }\r\n\r\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\r\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\r\n            if (stillSubmitting) {\r\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\r\n                setTimeout(function() {\r\n                    self._uploadStoredFiles();\r\n                }, 1000);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs some internal validation checks on an item, defined in the `validation` option.\r\n         *\r\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\r\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\r\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\r\n         * @private\r\n         */\r\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\r\n            var self = this,\r\n                file = (function() {\r\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                        return fileWrapper.file.referenceBlob;\r\n                    }\r\n                    return fileWrapper.file;\r\n                }()),\r\n                name = validationDescriptor.name,\r\n                size = validationDescriptor.size,\r\n                buttonId = this._getButtonId(fileWrapper.file),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                validityChecker = new qq.Promise();\r\n\r\n            validityChecker.then(\r\n                function() {},\r\n                function() {\r\n                    self._fileOrBlobRejected(fileWrapper.id, name);\r\n                });\r\n\r\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\r\n                this._itemError(\"typeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size === 0) {\r\n                this._itemError(\"emptyError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\r\n                this._itemError(\"sizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && size < validationBase.minSizeLimit) {\r\n                this._itemError(\"minSizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\r\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\r\n                    validityChecker.success,\r\n                    function(errorCode) {\r\n                        self._itemError(errorCode + \"ImageError\", name, file);\r\n                        validityChecker.failure();\r\n                    }\r\n                );\r\n            }\r\n            else {\r\n                validityChecker.success();\r\n            }\r\n\r\n            return validityChecker;\r\n        },\r\n\r\n        _wrapCallbacks: function() {\r\n            var self, safeCallback, prop;\r\n\r\n            self = this;\r\n\r\n            safeCallback = function(name, callback, args) {\r\n                var errorMsg;\r\n\r\n                try {\r\n                    return callback.apply(self, args);\r\n                }\r\n                catch (exception) {\r\n                    errorMsg = exception.message || exception.toString();\r\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\r\n                }\r\n            };\r\n\r\n            /* jshint forin: false, loopfunc: true */\r\n            for (prop in this._options.callbacks) {\r\n                (function() {\r\n                    var callbackName, callbackFunc;\r\n                    callbackName = prop;\r\n                    callbackFunc = self._options.callbacks[callbackName];\r\n                    self._options.callbacks[callbackName] = function() {\r\n                        return safeCallback(callbackName, callbackFunc, arguments);\r\n                    };\r\n                }());\r\n            }\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                params: {},\n                paramsInBody: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                }\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: 2000000,\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\r\n/**\r\n * Base upload handler module.  Controls more specific handlers.\r\n *\r\n * @param o Options.  Passed along to the specific handler submodule as well.\r\n * @param namespace [optional] Namespace for the specific handler.\r\n */\r\nqq.UploadHandlerController = function(o, namespace) {\r\n    \"use strict\";\r\n\r\n    var controller = this,\r\n        chunkingPossible = false,\r\n        concurrentChunkingPossible = false,\r\n        chunking, preventRetryResponse, log, handler,\r\n\r\n    options = {\r\n        paramsStore: {},\r\n        maxConnections: 3, // maximum number of concurrent uploads\r\n        chunking: {\r\n            enabled: false,\r\n            multiple: {\r\n                enabled: false\r\n            }\r\n        },\r\n        log: function(str, level) {},\r\n        onProgress: function(id, fileName, loaded, total) {},\r\n        onComplete: function(id, fileName, response, xhr) {},\r\n        onCancel: function(id, fileName) {},\r\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\r\n        onUpload: function(id, fileName) {},\r\n        onUploadChunk: function(id, fileName, chunkData) {},\r\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\r\n        onAutoRetry: function(id, fileName, response, xhr) {},\r\n        onResume: function(id, fileName, chunkData) {},\r\n        onUuidChanged: function(id, newUuid) {},\r\n        getName: function(id) {},\r\n        setSize: function(id, newSize) {},\r\n        isQueued: function(id) {},\r\n        getIdsInProxyGroup: function(id) {},\r\n        getIdsInBatch: function(id) {}\r\n    },\r\n\r\n    chunked = {\r\n        // Called when each chunk has uploaded successfully\r\n        done: function(id, chunkIdx, response, xhr) {\r\n            var chunkData = handler._getChunkData(id, chunkIdx);\r\n\r\n            handler._getFileState(id).attemptingResume = false;\r\n\r\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\r\n            handler._getFileState(id).loaded += chunkData.size;\r\n\r\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\r\n        },\r\n\r\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\r\n        // logic associated with closing out the file, such as combining the chunks.\r\n        finalize: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id);\r\n\r\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\r\n            handler.finalizeChunks(id).then(\r\n                function(response, xhr) {\r\n                    log(\"Finalize successful for \" + id);\r\n\r\n                    var normaizedResponse = upload.normalizeResponse(response, true);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    handler._maybeDeletePersistedChunkData(id);\r\n                    upload.cleanup(id, normaizedResponse, xhr);\r\n                },\r\n                function(response, xhr) {\r\n                    var normaizedResponse = upload.normalizeResponse(response, false);\r\n\r\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\r\n\r\n                    if (normaizedResponse.reset) {\r\n                        chunked.reset(id);\r\n                    }\r\n\r\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\r\n                        upload.cleanup(id, normaizedResponse, xhr);\r\n                    }\r\n                }\r\n            );\r\n        },\r\n\r\n        handleFailure: function(chunkIdx, id, response, xhr) {\r\n            var name = options.getName(id);\r\n\r\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\r\n\r\n            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n            var responseToReport = upload.normalizeResponse(response, false),\r\n                inProgressIdx;\r\n\r\n            if (responseToReport.reset) {\r\n                chunked.reset(id);\r\n            }\r\n            else {\r\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\r\n                if (inProgressIdx >= 0) {\r\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\r\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\r\n                }\r\n            }\r\n\r\n            // We may have aborted all other in-progress chunks for this file due to a failure.\r\n            // If so, ignore the failures associated with those aborts.\r\n            if (!handler._getFileState(id).temp.ignoreFailure) {\r\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\r\n                // chunks since they will be explicitly aborted\r\n                if (concurrentChunkingPossible) {\r\n                    handler._getFileState(id).temp.ignoreFailure = true;\r\n\r\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\r\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\r\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\r\n                        ckXhr.abort();\r\n                        // Flag the transport, in case we are waiting for some other async operation\r\n                        // to complete before attempting to upload the chunk\r\n                        ckXhr._cancelled = true;\r\n                    });\r\n\r\n                    // We must indicate that all aborted chunks are no longer in progress\r\n                    handler.moveInProgressToRemaining(id);\r\n\r\n                    // Free up any connections used by these chunks, but don't allow any\r\n                    // other files to take up the connections (until we have exhausted all auto-retries)\r\n                    connectionManager.free(id, true);\r\n                }\r\n\r\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\r\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\r\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\r\n                    // is a failure or not.\r\n                    upload.cleanup(id, responseToReport, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        hasMoreParts: function(id) {\r\n            return !!handler._getFileState(id).chunking.remaining.length;\r\n        },\r\n\r\n        nextPart: function(id) {\r\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\r\n\r\n            if (nextIdx >= handler._getTotalChunks(id)) {\r\n                nextIdx = null;\r\n            }\r\n\r\n            return nextIdx;\r\n        },\r\n\r\n        reset: function(id) {\r\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\r\n\r\n            handler._maybeDeletePersistedChunkData(id);\r\n            handler.reevaluateChunking(id);\r\n            handler._getFileState(id).loaded = 0;\r\n        },\r\n\r\n        sendNext: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id),\r\n                chunkIdx = chunked.nextPart(id),\r\n                chunkData = handler._getChunkData(id, chunkIdx),\r\n                resuming = handler._getFileState(id).attemptingResume,\r\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\r\n\r\n            if (handler._getFileState(id).loaded == null) {\r\n                handler._getFileState(id).loaded = 0;\r\n            }\r\n\r\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\r\n            if (resuming && options.onResume(id, name, chunkData) === false) {\r\n                chunked.reset(id);\r\n                chunkIdx = chunked.nextPart(id);\r\n                chunkData = handler._getChunkData(id, chunkIdx);\r\n                resuming = false;\r\n            }\r\n\r\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\r\n            if (chunkIdx == null && inProgressChunks.length === 0) {\r\n                chunked.finalize(id);\r\n            }\r\n\r\n            // Send the next chunk\r\n            else {\r\n                log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\r\n                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\r\n                inProgressChunks.push(chunkIdx);\r\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\r\n\r\n                if (concurrentChunkingPossible) {\r\n                    connectionManager.open(id, chunkIdx);\r\n                }\r\n\r\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\r\n                    chunked.sendNext(id);\r\n                }\r\n\r\n                if (chunkData.blob.size === 0) {\r\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\r\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\r\n                }\r\n                else {\r\n                    handler.uploadChunk(id, chunkIdx, resuming).then(\r\n                        // upload chunk success\r\n                        function success(response, xhr) {\r\n                            log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\r\n\r\n                            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n                            var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\r\n                                responseToReport = upload.normalizeResponse(response, true),\r\n                                inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\r\n\r\n                            log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\r\n\r\n                            chunked.done(id, chunkIdx, responseToReport, xhr);\r\n\r\n                            if (inProgressChunkIdx >= 0) {\r\n                                inProgressChunks.splice(inProgressChunkIdx, 1);\r\n                            }\r\n\r\n                            handler._maybePersistChunkedState(id);\r\n\r\n                            if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\r\n                                chunked.finalize(id);\r\n                            }\r\n                            else if (chunked.hasMoreParts(id)) {\r\n                                chunked.sendNext(id);\r\n                            }\r\n                            else {\r\n                                log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\r\n                            }\r\n                        },\r\n\r\n                        // upload chunk failure\r\n                        function failure(response, xhr) {\r\n                            chunked.handleFailure(chunkIdx, id, response, xhr);\r\n                        }\r\n                        )\r\n                        .done(function() {\r\n                            handler.clearXhr(id, chunkIdx);\r\n                        });\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    connectionManager = {\r\n        _open: [],\r\n        _openChunks: {},\r\n        _waiting: [],\r\n\r\n        available: function() {\r\n            var max = options.maxConnections,\r\n                openChunkEntriesCount = 0,\r\n                openChunksCount = 0;\r\n\r\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\r\n                openChunkEntriesCount++;\r\n                openChunksCount += openChunkIndexes.length;\r\n            });\r\n\r\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\r\n        },\r\n\r\n        /**\r\n         * Removes element from queue, starts upload of next\r\n         */\r\n        free: function(id, dontAllowNext) {\r\n            var allowNext = !dontAllowNext,\r\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\r\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\r\n                nextId;\r\n\r\n            delete connectionManager._openChunks[id];\r\n\r\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\r\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\r\n                delete handler._getFileState(id).file;\r\n            }\r\n\r\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\r\n            if (waitingIndex >= 0) {\r\n                connectionManager._waiting.splice(waitingIndex, 1);\r\n            }\r\n            // If this file was consuming a connection, allow the next file to be uploaded\r\n            else if (allowNext && connectionsIndex >= 0) {\r\n                connectionManager._open.splice(connectionsIndex, 1);\r\n\r\n                nextId = connectionManager._waiting.shift();\r\n                if (nextId >= 0) {\r\n                    connectionManager._open.push(nextId);\r\n                    upload.start(nextId);\r\n                }\r\n            }\r\n        },\r\n\r\n        getWaitingOrConnected: function() {\r\n            var waitingOrConnected = [];\r\n\r\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\r\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\r\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\r\n                if (chunks && chunks.length) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // For non-chunked files, only one connection will be consumed per file.\r\n            // This is where we aggregate those file IDs.\r\n            qq.each(connectionManager._open, function(idx, fileId) {\r\n                if (!connectionManager._openChunks[fileId]) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // There may be files waiting for a connection.\r\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\r\n\r\n            return waitingOrConnected;\r\n        },\r\n\r\n        isUsingConnection: function(id) {\r\n            return qq.indexOf(connectionManager._open, id) >= 0;\r\n        },\r\n\r\n        open: function(id, chunkIdx) {\r\n            if (chunkIdx == null) {\r\n                var alreadyInWaiting = qq.indexOf(connectionManager._waiting, id);\r\n                var alreadyInOpen = qq.indexOf(connectionManager._open, id);\r\n                if (alreadyInWaiting === -1 && alreadyInOpen === -1) {\r\n                    connectionManager._waiting.push(id);\r\n                }\r\n            }\r\n\r\n            if (connectionManager.available()) {\r\n                if (chunkIdx == null) {\r\n                    connectionManager._waiting.pop();\r\n                    connectionManager._open.push(id);\r\n                }\r\n                else {\r\n                    (function() {\r\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\r\n                        openChunksEntry.push(chunkIdx);\r\n                        connectionManager._openChunks[id] = openChunksEntry;\r\n                    }());\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        reset: function() {\r\n            connectionManager._waiting = [];\r\n            connectionManager._open = [];\r\n        }\r\n    },\r\n\r\n    simple = {\r\n        send: function(id, name) {\r\n            handler._getFileState(id).loaded = 0;\r\n\r\n            log(\"Sending simple upload request for \" + id);\r\n            handler.uploadFile(id).then(\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request succeeded for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, true),\r\n                        size = options.getSize(id);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    upload.maybeNewUuid(id, responseToReport);\r\n                    upload.cleanup(id, responseToReport, optXhr);\r\n                },\r\n\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request failed for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, false);\r\n\r\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\r\n                        upload.cleanup(id, responseToReport, optXhr);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    },\r\n\r\n    upload = {\r\n        cancel: function(id) {\r\n            log(\"Cancelling \" + id);\r\n            options.paramsStore.remove(id);\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        cleanup: function(id, response, optXhr) {\r\n            var name = options.getName(id);\r\n\r\n            options.onComplete(id, name, response, optXhr);\r\n\r\n            if (handler._getFileState(id)) {\r\n                handler._clearXhrs && handler._clearXhrs(id);\r\n            }\r\n\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\r\n        // if none of these are available for the ID\r\n        getProxyOrBlob: function(id) {\r\n            return (handler.getProxy && handler.getProxy(id)) ||\r\n                (handler.getFile && handler.getFile(id));\r\n        },\r\n\r\n        initHandler: function() {\r\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\r\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\r\n\r\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\r\n                options,\r\n                {\r\n                    getDataByUuid: options.getDataByUuid,\r\n                    getName: options.getName,\r\n                    getSize: options.getSize,\r\n                    getUuid: options.getUuid,\r\n                    log: log,\r\n                    onCancel: options.onCancel,\r\n                    onProgress: options.onProgress,\r\n                    onUuidChanged: options.onUuidChanged\r\n                }\r\n            );\r\n\r\n            if (handler._removeExpiredChunkingRecords) {\r\n                handler._removeExpiredChunkingRecords();\r\n            }\r\n        },\r\n\r\n        isDeferredEligibleForUpload: function(id) {\r\n            return options.isQueued(id);\r\n        },\r\n\r\n        // For Blobs that are part of a group of generated images, along with a reference image,\r\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\r\n        // even if some async processing must be completed on one or more Blobs first.\r\n        maybeDefer: function(id, blob) {\r\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\r\n            // and then submit the upload to the specific handler once the blob is available.\r\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\r\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\r\n\r\n                // Blob creation may take some time, so the caller may want to update the\r\n                // UI to indicate that an operation is in progress, even before the actual\r\n                // upload begins and an onUpload callback is invoked.\r\n                options.onUploadPrep(id);\r\n\r\n                log(\"Attempting to generate a blob on-demand for \" + id);\r\n                blob.create().then(function(generatedBlob) {\r\n                    log(\"Generated an on-demand blob for \" + id);\r\n\r\n                    // Update record associated with this file by providing the generated Blob\r\n                    handler.updateBlob(id, generatedBlob);\r\n\r\n                    // Propagate the size for this generated Blob\r\n                    options.setSize(id, generatedBlob.size);\r\n\r\n                    // Order handler to recalculate chunking possibility, if applicable\r\n                    handler.reevaluateChunking(id);\r\n\r\n                    upload.maybeSendDeferredFiles(id);\r\n                },\r\n\r\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\r\n                function(errorMessage) {\r\n                    var errorResponse = {};\r\n\r\n                    if (errorMessage) {\r\n                        errorResponse.error = errorMessage;\r\n                    }\r\n\r\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\r\n\r\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\r\n                    upload.maybeSendDeferredFiles(id);\r\n                    connectionManager.free(id);\r\n                });\r\n            }\r\n            else {\r\n                return upload.maybeSendDeferredFiles(id);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\r\n        maybeSendDeferredFiles: function(id) {\r\n            var idsInGroup = options.getIdsInProxyGroup(id),\r\n                uploadedThisId = false;\r\n\r\n            if (idsInGroup && idsInGroup.length) {\r\n                log(\"Maybe ready to upload proxy group file \" + id);\r\n\r\n                qq.each(idsInGroup, function(idx, idInGroup) {\r\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\r\n                        uploadedThisId = idInGroup === id;\r\n                        upload.now(idInGroup);\r\n                    }\r\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                uploadedThisId = true;\r\n                upload.now(id);\r\n            }\r\n\r\n            return uploadedThisId;\r\n        },\r\n\r\n        maybeNewUuid: function(id, response) {\r\n            if (response.newUuid !== undefined) {\r\n                options.onUuidChanged(id, response.newUuid);\r\n            }\r\n        },\r\n\r\n        // The response coming from handler implementations may be in various formats.\r\n        // Instead of hoping a promise nested 5 levels deep will always return an object\r\n        // as its first param, let's just normalize the response here.\r\n        normalizeResponse: function(originalResponse, successful) {\r\n            var response = originalResponse;\r\n\r\n            // The passed \"response\" param may not be a response at all.\r\n            // It could be a string, detailing the error, for example.\r\n            if (!qq.isObject(originalResponse)) {\r\n                response = {};\r\n\r\n                if (qq.isString(originalResponse) && !successful) {\r\n                    response.error = originalResponse;\r\n                }\r\n            }\r\n\r\n            response.success = successful;\r\n\r\n            return response;\r\n        },\r\n\r\n        now: function(id) {\r\n            var name = options.getName(id);\r\n\r\n            if (!controller.isValid(id)) {\r\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\r\n            }\r\n\r\n            options.onUpload(id, name);\r\n\r\n            if (chunkingPossible && handler._shouldChunkThisFile(id)) {\r\n                chunked.sendNext(id);\r\n            }\r\n            else {\r\n                simple.send(id, name);\r\n            }\r\n        },\r\n\r\n        start: function(id) {\r\n            var blobToUpload = upload.getProxyOrBlob(id);\r\n\r\n            if (blobToUpload) {\r\n                return upload.maybeDefer(id, blobToUpload);\r\n            }\r\n            else {\r\n                upload.now(id);\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Adds file or file input to the queue\r\n         **/\r\n        add: function(id, file) {\r\n            handler.add.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Sends the file identified by id\r\n         */\r\n        upload: function(id) {\r\n            if (connectionManager.open(id)) {\r\n                return upload.start(id);\r\n            }\r\n            return false;\r\n        },\r\n\r\n        retry: function(id) {\r\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\r\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\r\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\r\n            // any more failures at this point.\r\n            if (concurrentChunkingPossible) {\r\n                handler._getFileState(id).temp.ignoreFailure = false;\r\n            }\r\n\r\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\r\n            // Just go ahead and ask the handler to upload again.\r\n            if (connectionManager.isUsingConnection(id)) {\r\n                return upload.start(id);\r\n            }\r\n\r\n            // If we are attempting to retry a file that is not currently consuming a connection,\r\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\r\n            // before the retry commences.\r\n            else {\r\n                return controller.upload(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels file upload by id\r\n         */\r\n        cancel: function(id) {\r\n            var cancelRetVal = handler.cancel(id);\r\n\r\n            if (qq.isGenericPromise(cancelRetVal)) {\r\n                cancelRetVal.then(function() {\r\n                    upload.cancel(id);\r\n                });\r\n            }\r\n            else if (cancelRetVal !== false) {\r\n                upload.cancel(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels all queued or in-progress uploads\r\n         */\r\n        cancelAll: function() {\r\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\r\n                i;\r\n\r\n            // ensure files are cancelled in reverse order which they were added\r\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\r\n            if (waitingOrConnected.length) {\r\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\r\n                    controller.cancel(waitingOrConnected[i]);\r\n                }\r\n            }\r\n\r\n            connectionManager.reset();\r\n        },\r\n\r\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\r\n        // Undefined if no file record is available.\r\n        getFile: function(id) {\r\n            if (handler.getProxy && handler.getProxy(id)) {\r\n                return handler.getProxy(id).referenceBlob;\r\n            }\r\n\r\n            return handler.getFile && handler.getFile(id);\r\n        },\r\n\r\n        // Returns true if the Blob associated with the ID is related to a proxy s\r\n        isProxied: function(id) {\r\n            return !!(handler.getProxy && handler.getProxy(id));\r\n        },\r\n\r\n        getInput: function(id) {\r\n            if (handler.getInput) {\r\n                return handler.getInput(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            log(\"Resetting upload handler\");\r\n            controller.cancelAll();\r\n            connectionManager.reset();\r\n            handler.reset();\r\n        },\r\n\r\n        expunge: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.expunge(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Determine if the file exists.\r\n         */\r\n        isValid: function(id) {\r\n            return handler.isValid(id);\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            if (handler.getResumableFilesData) {\r\n                return handler.getResumableFilesData();\r\n            }\r\n            return [];\r\n        },\r\n\r\n        /**\r\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\r\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\r\n         * will be undefined.\r\n         *\r\n         * @param id Internal file ID\r\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\r\n         */\r\n        getThirdPartyFileId: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.getThirdPartyFileId(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\r\n         * @param id ID of the upload/file to pause\r\n         * @returns {boolean} true if the upload was paused\r\n         */\r\n        pause: function(id) {\r\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\r\n                connectionManager.free(id);\r\n                handler.moveInProgressToRemaining(id);\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        // True if the file is eligible for pause/resume.\r\n        isResumable: function(id) {\r\n            return !!handler.isResumable && handler.isResumable(id);\r\n        }\r\n    });\r\n\r\n    qq.extend(options, o);\r\n    log = options.log;\r\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\r\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\r\n\r\n    preventRetryResponse = (function() {\r\n        var response = {};\r\n\r\n        response[options.preventRetryParam] = true;\r\n\r\n        return response;\r\n    }());\r\n\r\n    upload.initHandler();\r\n};\r\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id);\n\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now()\n                };\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*globals qq*/\n/**\n * Upload handler used that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to\n * a generic server.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log;\n\n    /**\n     * Returns json object received by iframe from server.\n     */\n    function getIframeContentJson(id, iframe) {\n        /*jshint evil: true*/\n\n        var response, doc, innerHtml;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            log(\"converting iframe's innerHTML to JSON\");\n            log(\"innerHTML = \" + innerHtml);\n            //plain text response may be wrapped in <pre> tag\n            if (innerHtml && innerHtml.match(/^<pre/i)) {\n                innerHtml = doc.body.firstChild.firstChild.nodeValue;\n            }\n\n            response = handler._parseJsonResponse(innerHtml);\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n            response = {success: false};\n        }\n\n        return response;\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var params = options.paramsStore.get(id),\n            method = options.method.toLowerCase() === \"get\" ? \"GET\" : \"POST\",\n            endpoint = options.endpointStore.get(id),\n            name = getName(id);\n\n        params[options.uuidName] = getUuid(id);\n        params[options.filenameParam] = name;\n\n        return handler._initFormForUpload({\n            method: method,\n            endpoint: endpoint,\n            params: params,\n            paramsInBody: options.paramsInBody,\n            targetName: iframe.name\n        });\n    }\n\n    this.uploadFile = function(id) {\n        var input = handler.getInput(id),\n            iframe = handler._createIframe(id),\n            promise = new qq.Promise(),\n            form;\n\n        form = createForm(id, iframe);\n        form.appendChild(input);\n\n        handler._attachLoadEvent(iframe, function(responseFromMessage) {\n            log(\"iframe loaded\");\n\n            var response = responseFromMessage ? responseFromMessage : getIframeContentJson(id, iframe);\n\n            handler._detachLoadEvent(id);\n\n            //we can't remove an iframe if the iframe doesn't belong to the same domain\n            if (!options.cors.expected) {\n                qq(iframe).remove();\n            }\n\n            if (response.success) {\n                promise.success(response);\n            }\n            else {\n                promise.failure(response);\n            }\n        });\n\n        log(\"Sending upload request for \" + id);\n        form.submit();\n        qq(form).remove();\n\n        return promise;\n    };\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: options.cors.expected,\n            inputName: options.inputName\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n};\n","/*globals qq*/\n/**\n * Upload handler used to upload to traditional endpoints.  It depends on File API support, and, therefore,\n * makes use of `XMLHttpRequest` level 2 to upload `File`s and `Blob`s to a generic server.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        multipart = spec.forceMultipart || spec.paramsInBody,\n\n        addChunkingSpecificParams = function(id, params, chunkData) {\n            var size = getSize(id),\n                name = getName(id);\n\n            params[spec.chunking.paramNames.partIndex] = chunkData.part;\n            params[spec.chunking.paramNames.partByteOffset] = chunkData.start;\n            params[spec.chunking.paramNames.chunkSize] = chunkData.size;\n            params[spec.chunking.paramNames.totalParts] = chunkData.count;\n            params[spec.totalFileSizeName] = size;\n\n            /**\n             * When a Blob is sent in a multipart request, the filename value in the content-disposition header is either \"blob\"\n             * or an empty string.  So, we will need to include the actual file name as a param in this case.\n             */\n            if (multipart) {\n                params[spec.filenameParam] = name;\n            }\n        },\n\n        allChunksDoneRequester = new qq.traditional.AllChunksDoneAjaxRequester({\n            cors: spec.cors,\n            endpoint: spec.chunking.success.endpoint,\n            log: log\n        }),\n\n        createReadyStateChangedHandler = function(id, xhr) {\n            var promise = new qq.Promise();\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    var result = onUploadOrChunkComplete(id, xhr);\n\n                    if (result.success) {\n                        promise.success(result.response, xhr);\n                    }\n                    else {\n                        promise.failure(result.response, xhr);\n                    }\n                }\n            };\n\n            return promise;\n        },\n\n        getChunksCompleteParams = function(id) {\n            var params = spec.paramsStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            params[spec.uuidName] = getUuid(id);\n            params[spec.filenameParam] = name;\n            params[spec.totalFileSizeName] = size;\n            params[spec.chunking.paramNames.totalParts] = handler._getTotalChunks(id);\n\n            return params;\n        },\n\n        isErrorUploadResponse = function(xhr, response) {\n            return qq.indexOf([200, 201, 202, 203, 204], xhr.status) < 0 ||\n                !response.success ||\n                response.reset;\n        },\n\n        onUploadOrChunkComplete = function(id, xhr) {\n            var response;\n\n            log(\"xhr - server response received for \" + id);\n            log(\"responseText = \" + xhr.responseText);\n\n            response = parseResponse(true, xhr);\n\n            return {\n                success: !isErrorUploadResponse(xhr, response),\n                response: response\n            };\n        },\n\n        // If this is an upload response, we require a JSON payload, otherwise, it is optional.\n        parseResponse = function(upload, xhr) {\n            var response = {};\n\n            try {\n                log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n                response = qq.parseJson(xhr.responseText);\n            }\n            catch (error) {\n                upload && log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        },\n\n        sendChunksCompleteRequest = function(id) {\n            var promise = new qq.Promise();\n\n            allChunksDoneRequester.complete(\n                    id,\n                    handler._createXhr(id),\n                    getChunksCompleteParams(id),\n                    spec.customHeaders.get(id)\n                )\n                .then(function(xhr) {\n                    promise.success(parseResponse(false, xhr), xhr);\n                }, function(xhr) {\n                    promise.failure(parseResponse(false, xhr), xhr);\n                });\n\n            return promise;\n        },\n\n        setParamsAndGetEntityToSend = function(params, xhr, fileOrBlob, id) {\n            var formData = new FormData(),\n                method = spec.method,\n                endpoint = spec.endpointStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            params[spec.uuidName] = getUuid(id);\n            params[spec.filenameParam] = name;\n\n            if (multipart) {\n                params[spec.totalFileSizeName] = size;\n            }\n\n            //build query string\n            if (!spec.paramsInBody) {\n                if (!multipart) {\n                    params[spec.inputName] = name;\n                }\n                endpoint = qq.obj2url(params, endpoint);\n            }\n\n            xhr.open(method, endpoint, true);\n\n            if (spec.cors.expected && spec.cors.sendCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (multipart) {\n                if (spec.paramsInBody) {\n                    qq.obj2FormData(params, formData);\n                }\n\n                formData.append(spec.inputName, fileOrBlob);\n                return formData;\n            }\n\n            return fileOrBlob;\n        },\n\n        setUploadHeaders = function(id, xhr) {\n            var extraHeaders = spec.customHeaders.get(id),\n                fileOrBlob = handler.getFile(id);\n\n            xhr.setRequestHeader(\"Accept\", \"application/json\");\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n\n            if (!multipart) {\n                xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n                //NOTE: return mime type in xhr works on chrome 16.0.9 firefox 11.0a2\n                xhr.setRequestHeader(\"X-Mime-Type\", fileOrBlob.type);\n            }\n\n            qq.each(extraHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        };\n\n    qq.extend(this, {\n        uploadChunk: function(id, chunkIdx, resuming) {\n            var chunkData = handler._getChunkData(id, chunkIdx),\n                xhr = handler._createXhr(id, chunkIdx),\n                size = getSize(id),\n                promise, toSend, params;\n\n            promise = createReadyStateChangedHandler(id, xhr);\n            handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n            params = spec.paramsStore.get(id);\n            addChunkingSpecificParams(id, params, chunkData);\n\n            if (resuming) {\n                params[spec.resume.paramNames.resuming] = true;\n            }\n\n            toSend = setParamsAndGetEntityToSend(params, xhr, chunkData.blob, id);\n            setUploadHeaders(id, xhr);\n            xhr.send(toSend);\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var fileOrBlob = handler.getFile(id),\n                promise, xhr, params, toSend;\n\n            xhr = handler._createXhr(id);\n            handler._registerProgressHandler(id);\n            promise = createReadyStateChangedHandler(id, xhr);\n            params = spec.paramsStore.get(id);\n            toSend = setParamsAndGetEntityToSend(params, xhr, fileOrBlob, id);\n            setUploadHeaders(id, xhr);\n            xhr.send(toSend);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"traditional\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            finalizeChunks: function(id) {\n                if (spec.chunking.success.endpoint) {\n                    return sendChunksCompleteRequest(id);\n                }\n                else {\n                    return super_.finalizeChunks(id, qq.bind(parseResponse, this, true));\n                }\n            }\n        };\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send a POST to a traditional endpoint once all chunks for a specific file have uploaded\n * successfully.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.traditional.AllChunksDoneAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"POST\",\n        options = {\n            cors: {\n                allowXdr: false,\n                expected: false,\n                sendCredentials: false\n            },\n            endpoint: null,\n            log: function(str, level) {}\n        },\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                return options.endpoint;\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [method],\n        method: method,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: options.cors,\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        complete: function(id, xhr, params, headers) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting All Chunks Done request for \" + id);\n\n            promises[id] = promise;\n\n            requester.initTransport(id)\n                .withParams(params)\n                .withHeaders(headers)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\r\n/**\r\n * Defines the public API for FineUploader mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.uiPublicApi = {\r\n        addInitialFiles: function(cannedFileList) {\r\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\r\n            this._templating.addCacheToDom();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\r\n            this._templating.clearFiles();\r\n        },\r\n\r\n        addExtraDropzone: function(element) {\r\n            this._dnd && this._dnd.setupExtraDropzone(element);\r\n        },\r\n\r\n        removeExtraDropzone: function(element) {\r\n            if (this._dnd) {\r\n                return this._dnd.removeDropzone(element);\r\n            }\r\n        },\r\n\r\n        getItemByFileId: function(id) {\r\n            if (!this._templating.isHiddenForever(id)) {\r\n                return this._templating.getFileContainer(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            this._parent.prototype.reset.apply(this, arguments);\r\n            this._templating.reset();\r\n\r\n            if (!this._options.button && this._templating.getButton()) {\r\n                this._defaultButtonId = this._createUploadButton({\r\n                    element: this._templating.getButton(),\r\n                    title: this._options.text.fileInputTitle\r\n                }).getButtonId();\r\n            }\r\n\r\n            if (this._dnd) {\r\n                this._dnd.dispose();\r\n                this._dnd = this._setupDragAndDrop();\r\n            }\r\n\r\n            this._totalFilesInBatch = 0;\r\n            this._filesInBatchAddedToUi = 0;\r\n\r\n            this._setupClickAndEditEventHandlers();\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            var formattedFilename = this._options.formatFileName(newName);\r\n\r\n            this._parent.prototype.setName.apply(this, arguments);\r\n            this._templating.updateFilename(id, formattedFilename);\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\r\n\r\n            paused && this._templating.uploadPaused(id);\r\n            return paused;\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\r\n\r\n            continued && this._templating.uploadContinued(id);\r\n            return continued;\r\n        },\r\n\r\n        getId: function(fileContainerOrChildEl) {\r\n            return this._templating.getFileId(fileContainerOrChildEl);\r\n        },\r\n\r\n        getDropTarget: function(fileId) {\r\n            var file = this.getFile(fileId);\r\n\r\n            return file.qqDropTarget;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploader mode.\r\n     */\r\n    qq.uiPrivateApi = {\r\n        _getButton: function(buttonId) {\r\n            var button = this._parent.prototype._getButton.apply(this, arguments);\r\n\r\n            if (!button) {\r\n                if (buttonId === this._defaultButtonId) {\r\n                    button = this._templating.getButton();\r\n                }\r\n            }\r\n\r\n            return button;\r\n        },\r\n\r\n        _removeFileItem: function(fileId) {\r\n            this._templating.removeFile(fileId);\r\n        },\r\n\r\n        _setupClickAndEditEventHandlers: function() {\r\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\r\n\r\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\r\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\r\n            this._focusinEventSupported = !qq.firefox();\r\n\r\n            if (this._isEditFilenameEnabled())\r\n            {\r\n                this._filenameClickHandler = this._bindFilenameClickEvent();\r\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\r\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\r\n            }\r\n        },\r\n\r\n        _setupDragAndDrop: function() {\r\n            var self = this,\r\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\r\n                templating = this._templating,\r\n                defaultDropZone = templating.getDropZone();\r\n\r\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\r\n\r\n            return new qq.DragAndDrop({\r\n                dropZoneElements: dropZoneElements,\r\n                allowMultipleItems: this._options.multiple,\r\n                classes: {\r\n                    dropActive: this._options.classes.dropActive\r\n                },\r\n                callbacks: {\r\n                    processingDroppedFiles: function() {\r\n                        templating.showDropProcessing();\r\n                    },\r\n                    processingDroppedFilesComplete: function(files, targetEl) {\r\n                        templating.hideDropProcessing();\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            file.qqDropTarget = targetEl;\r\n                        });\r\n\r\n                        if (files.length) {\r\n                            self.addFiles(files, null, null);\r\n                        }\r\n                    },\r\n                    dropError: function(code, errorData) {\r\n                        self._itemError(code, errorData);\r\n                    },\r\n                    dropLog: function(message, level) {\r\n                        self.log(message, level);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _bindFileButtonsClickEvent: function() {\r\n            var self = this;\r\n\r\n            return new qq.FileButtonsClickHandler({\r\n                templating: this._templating,\r\n\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n\r\n                onDeleteFile: function(fileId) {\r\n                    self.deleteFile(fileId);\r\n                },\r\n\r\n                onCancel: function(fileId) {\r\n                    self.cancel(fileId);\r\n                },\r\n\r\n                onRetry: function(fileId) {\r\n                    self.retry(fileId);\r\n                },\r\n\r\n                onPause: function(fileId) {\r\n                    self.pauseUpload(fileId);\r\n                },\r\n\r\n                onContinue: function(fileId) {\r\n                    self.continueUpload(fileId);\r\n                },\r\n\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                }\r\n            });\r\n        },\r\n\r\n        _isEditFilenameEnabled: function() {\r\n            /*jshint -W014 */\r\n            return this._templating.isEditFilenamePossible()\r\n                && !this._options.autoUpload\r\n                && qq.FilenameClickHandler\r\n                && qq.FilenameInputFocusHandler\r\n                && qq.FilenameInputFocusHandler;\r\n        },\r\n\r\n        _filenameEditHandler: function() {\r\n            var self = this,\r\n                templating = this._templating;\r\n\r\n            return {\r\n                templating: templating,\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n                onGetUploadStatus: function(fileId) {\r\n                    return self.getUploads({id: fileId}).status;\r\n                },\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                },\r\n                onSetName: function(id, newName) {\r\n                    self.setName(id, newName);\r\n                },\r\n                onEditingStatusChange: function(id, isEditing) {\r\n                    var qqInput = qq(templating.getEditInput(id)),\r\n                        qqFileContainer = qq(templating.getFileContainer(id));\r\n\r\n                    if (isEditing) {\r\n                        qqInput.addClass(\"qq-editing\");\r\n                        templating.hideFilename(id);\r\n                        templating.hideEditIcon(id);\r\n                    }\r\n                    else {\r\n                        qqInput.removeClass(\"qq-editing\");\r\n                        templating.showFilename(id);\r\n                        templating.showEditIcon(id);\r\n                    }\r\n\r\n                    // Force IE8 and older to repaint\r\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\r\n                }\r\n            };\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\r\n\r\n            if (this._isEditFilenameEnabled()) {\r\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\r\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\r\n                    this._templating.markFilenameEditable(id);\r\n                    this._templating.hideEditIcon(id);\r\n                }\r\n            }\r\n\r\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\r\n                this._templating.hideRetry(id);\r\n                this._templating.setStatusText(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\r\n            }\r\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\r\n                this._templating.hidePause(id);\r\n            }\r\n        },\r\n\r\n        _bindFilenameInputFocusInEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusInHandler(spec);\r\n        },\r\n\r\n        _bindFilenameInputFocusEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusHandler(spec);\r\n        },\r\n\r\n        _bindFilenameClickEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameClickHandler(spec);\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._parent.prototype._storeForLater.apply(this, arguments);\r\n            this._templating.hideSpinner(id);\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._parent.prototype._onAllComplete.apply(this, arguments);\r\n            this._templating.resetTotalProgress();\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            var file = this.getFile(id);\r\n\r\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\r\n                this._paramsStore.addReadOnly(id, {\r\n                    qqpath: file.qqPath\r\n                });\r\n            }\r\n\r\n            this._parent.prototype._onSubmit.apply(this, arguments);\r\n            this._addToList(id, name);\r\n        },\r\n\r\n        // The file item has been added to the DOM.\r\n        _onSubmitted: function(id) {\r\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\r\n            if (this._isEditFilenameEnabled()) {\r\n                this._templating.markFilenameEditable(id);\r\n                this._templating.showEditIcon(id);\r\n\r\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\r\n                if (!this._focusinEventSupported) {\r\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\r\n                }\r\n            }\r\n        },\r\n\r\n        // Update the progress bar & percentage as the file is uploaded\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._parent.prototype._onProgress.apply(this, arguments);\r\n\r\n            this._templating.updateProgress(id, loaded, total);\r\n\r\n            if (Math.round(loaded / total * 100) === 100) {\r\n                this._templating.hideCancel(id);\r\n                this._templating.hidePause(id);\r\n                this._templating.hideProgress(id);\r\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\r\n\r\n                // If ~last byte was sent, display total file size\r\n                this._displayFileSize(id);\r\n            }\r\n            else {\r\n                // If still uploading, display percentage - total size is actually the total request(s) size\r\n                this._displayFileSize(id, loaded, total);\r\n            }\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\r\n            this._templating.updateTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\r\n                templating = this._templating,\r\n                fileContainer = templating.getFileContainer(id),\r\n                self = this;\r\n\r\n            function completeUpload(result) {\r\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\r\n                // If so, don't perform any UI-related tasks related to this file.\r\n                if (!fileContainer) {\r\n                    return;\r\n                }\r\n\r\n                templating.setStatusText(id);\r\n\r\n                qq(fileContainer).removeClass(self._classes.retrying);\r\n                templating.hideProgress(id);\r\n\r\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\r\n                    templating.hideCancel(id);\r\n                }\r\n                templating.hideSpinner(id);\r\n\r\n                if (result.success) {\r\n                    self._markFileAsSuccessful(id);\r\n                }\r\n                else {\r\n                    qq(fileContainer).addClass(self._classes.fail);\r\n                    templating.showCancel(id);\r\n\r\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\r\n                        qq(fileContainer).addClass(self._classes.retryable);\r\n                        templating.showRetry(id);\r\n                    }\r\n                    self._controlFailureTextDisplay(id, result);\r\n                }\r\n            }\r\n\r\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\r\n            if (parentRetVal instanceof qq.Promise) {\r\n                parentRetVal.done(function(newResult) {\r\n                    completeUpload(newResult);\r\n                });\r\n\r\n            }\r\n            else {\r\n                completeUpload(result);\r\n            }\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _markFileAsSuccessful: function(id) {\r\n            var templating = this._templating;\r\n\r\n            if (this._isDeletePossible()) {\r\n                templating.showDeleteButton(id);\r\n            }\r\n\r\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\r\n\r\n            this._maybeUpdateThumbnail(id);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\r\n            this._templating.showSpinner(id);\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\r\n\r\n            this._templating.showSpinner(id);\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\r\n\r\n            // Only display the pause button if we have finished uploading at least one chunk\r\n            // & this file can be resumed\r\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\r\n                this._templating.allowPause(id);\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._parent.prototype._onCancel.apply(this, arguments);\r\n            this._removeFileItem(id);\r\n\r\n            if (this._getNotFinished() === 0) {\r\n                this._templating.resetTotalProgress();\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id) {\r\n            var retryNumForDisplay, maxAuto, retryNote;\r\n\r\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\r\n\r\n            this._showCancelLink(id);\r\n\r\n            if (this._options.retry.showAutoRetryNote) {\r\n                retryNumForDisplay = this._autoRetries[id];\r\n                maxAuto = this._options.retry.maxAutoAttempts;\r\n\r\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\r\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\r\n\r\n                this._templating.setStatusText(id, retryNote);\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\r\n            }\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\r\n                this._templating.resetProgress(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\r\n                this._templating.setStatusText(id);\r\n                this._templating.showSpinner(id);\r\n                this._showCancelLink(id);\r\n                return true;\r\n            }\r\n            else {\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\r\n                this._templating.showRetry(id);\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id) {\r\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\r\n\r\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\r\n        },\r\n\r\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\r\n            if (this._options.deleteFile.forceConfirm) {\r\n                this._showDeleteConfirm.apply(this, arguments);\r\n            }\r\n            else {\r\n                this._sendDeleteRequest.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhr, isError) {\r\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\r\n\r\n            this._templating.hideSpinner(id);\r\n\r\n            if (isError) {\r\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\r\n                this._templating.showDeleteButton(id);\r\n            }\r\n            else {\r\n                this._removeFileItem(id);\r\n            }\r\n        },\r\n\r\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\r\n            this._templating.hideDeleteButton(id);\r\n            this._templating.showSpinner(id);\r\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\r\n            this._deleteHandler.sendDelete.apply(this, arguments);\r\n        },\r\n\r\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\r\n            /*jshint -W004 */\r\n            var fileName = this.getName(id),\r\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\r\n                uuid = this.getUuid(id),\r\n                deleteRequestArgs = arguments,\r\n                self = this,\r\n                retVal;\r\n\r\n            retVal = this._options.showConfirm(confirmMessage);\r\n\r\n            if (qq.isGenericPromise(retVal)) {\r\n                retVal.then(function() {\r\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n                });\r\n            }\r\n            else if (retVal !== false) {\r\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n            }\r\n        },\r\n\r\n        _addToList: function(id, name, canned) {\r\n            var prependData,\r\n                prependIndex = 0,\r\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\r\n                record;\r\n\r\n            if (this._options.display.prependFiles) {\r\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\r\n                    prependIndex = this._filesInBatchAddedToUi - 1;\r\n                }\r\n\r\n                prependData = {\r\n                    index: prependIndex\r\n                };\r\n            }\r\n\r\n            if (!canned) {\r\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\r\n                    this._templating.disableCancel();\r\n                }\r\n\r\n                // Cancel all existing (previous) files and clear the list if this file is not part of\r\n                // a scaled file group that has already been accepted, or if this file is not part of\r\n                // a scaled file group at all.\r\n                if (!this._options.multiple) {\r\n                    record = this.getUploads({id: id});\r\n\r\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\r\n\r\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\r\n                        this._handler.cancelAll();\r\n                        this._clearList();\r\n                        this._handledProxyGroup = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (canned) {\r\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\r\n            }\r\n            else {\r\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\r\n            }\r\n\r\n            this._filesInBatchAddedToUi += 1;\r\n\r\n            if (canned ||\r\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\r\n\r\n                this._displayFileSize(id);\r\n            }\r\n        },\r\n\r\n        _clearList: function() {\r\n            this._templating.clearFiles();\r\n            this.clearStoredFiles();\r\n        },\r\n\r\n        _displayFileSize: function(id, loadedSize, totalSize) {\r\n            var size = this.getSize(id),\r\n                sizeForDisplay = this._formatSize(size);\r\n\r\n            if (size >= 0) {\r\n                if (loadedSize !== undefined && totalSize !== undefined) {\r\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\r\n                }\r\n\r\n                this._templating.updateSize(id, sizeForDisplay);\r\n            }\r\n        },\r\n\r\n        _formatProgress: function(uploadedSize, totalSize) {\r\n            var message = this._options.text.formatProgress;\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\r\n            r(\"{total_size}\", this._formatSize(totalSize));\r\n            return message;\r\n        },\r\n\r\n        _controlFailureTextDisplay: function(id, response) {\r\n            var mode, responseProperty, failureReason;\r\n\r\n            mode = this._options.failedUploadTextDisplay.mode;\r\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\r\n\r\n            if (mode === \"custom\") {\r\n                failureReason = response[responseProperty];\r\n                if (!failureReason) {\r\n                    failureReason = this._options.text.failUpload;\r\n                }\r\n\r\n                this._templating.setStatusText(id, failureReason);\r\n\r\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\r\n                    this._showTooltip(id, failureReason);\r\n                }\r\n            }\r\n            else if (mode === \"default\") {\r\n                this._templating.setStatusText(id, this._options.text.failUpload);\r\n            }\r\n            else if (mode !== \"none\") {\r\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\r\n            }\r\n        },\r\n\r\n        _showTooltip: function(id, text) {\r\n            this._templating.getFileContainer(id).title = text;\r\n        },\r\n\r\n        _showCancelLink: function(id) {\r\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\r\n                this._templating.showCancel(id);\r\n            }\r\n        },\r\n\r\n        _itemError: function(code, name, item) {\r\n            var message = this._parent.prototype._itemError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._parent.prototype._batchError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _setupPastePrompt: function() {\r\n            var self = this;\r\n\r\n            this._options.callbacks.onPasteReceived = function() {\r\n                var message = self._options.paste.namePromptMessage,\r\n                    defaultVal = self._options.paste.defaultName;\r\n\r\n                return self._options.showPrompt(message, defaultVal);\r\n            };\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id, name) {\r\n            this._totalFilesInBatch -= 1;\r\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            this._totalFilesInBatch = items.length;\r\n            this._filesInBatchAddedToUi = 0;\r\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\r\n        },\r\n\r\n        _maybeUpdateThumbnail: function(fileId) {\r\n            var thumbnailUrl = this._thumbnailUrls[fileId],\r\n                fileStatus = this.getUploads({id: fileId}).status;\r\n\r\n            if (fileStatus !== qq.status.DELETED &&\r\n                (thumbnailUrl ||\r\n                this._options.thumbnails.placeholders.waitUntilResponse ||\r\n                !qq.supportedFeatures.imagePreviews)) {\r\n\r\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\r\n                // if called with a null thumbnailUrl.\r\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\r\n            }\r\n        },\r\n\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\r\n\r\n            this._addToList(id, this.getName(id), true);\r\n            this._templating.hideSpinner(id);\r\n            this._templating.hideCancel(id);\r\n            this._markFileAsSuccessful(id);\r\n\r\n            return id;\r\n        },\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._parent.prototype._setSize.apply(this, arguments);\r\n\r\n            this._templating.updateSize(id, this._formatSize(newSize));\r\n        },\r\n\r\n        _sessionRequestComplete: function() {\r\n            this._templating.addCacheToDom();\r\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\r\n        }\r\n    };\r\n}());\r\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n"]}